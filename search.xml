<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo-GitHub搭建静态博客平台(Next主题)]]></title>
    <url>%2F2018%2F08%2F09%2FHexo-GitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0-Next%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 0x01 准备工作域名我的域名：www.dizai.tech，主要是提升自我逼格，不愿意花钱就跳过此步骤。国内可以去阿里云或腾讯云购买域名，价格也很便宜。 环境技术前往github官网https://github.com 注册一个github账号。 Hexo 的安装前提就是得有 Node.js 和 Git 。 这里，我们要区分清楚git与github。git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。 下面提供相关的官方版本地址，安装教程去网上搜一下就很多。 Node 官方版本安装：https://nodejs.org/en/ Git 官方版本安装：https://git-scm.com/download/win 我用到软件版本（你们可以在官方下载最新版的） Git：Git-2.18.0-64-bit Node：node-v10.7.0-x64 验证安装：任何位置鼠标右击出现Git Bash Here cmd下 1git --version 验证安装：cmd下 1node -v 0x02 Github 配置创建仓库 new repository在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username 是你的账号名)。 在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。 简单来说，User Pages 与 Project Pages的区别是： User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。 用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。 User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。 User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。 另外注意： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效； 0x03 配置SSH key用于本地与github数据交换生成并配置key执行如下命令12git config --global user.name &quot;liuxianan&quot; #你的github用户名git config --global user.email &quot;xxx@qq.com&quot; #填写你的github注册邮箱 生成ssh密钥12cd ~/. ssh #检查本机已存在的ssh密钥ssh-keygen -t rsa -C &quot;邮件地址&quot; #生成密钥 连续按回车三次（使用默认ssh密钥生成策略），密钥生成成功，存于本地用户目录(~)，打开.ssh\id_rsa.pub文件，并复制其中内容 打开你的github主页，进入个人设置-&gt; SSH and GPG keys -&gt; New SSH key： title任意填写，将内容复制到key中即可 测试ssh本地执行 ssh -T git@github.com #注意邮箱地址不用改如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 0x04 安装hexo以下命令都是在git命令行中实现 首先在本地磁盘中建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用)然后在文件夹中右击打开git命令框(我第一次直接在桌面右击，所以命令行无效果) 在git命令框中安装Hexo 1npm install -g hexo 初始化 1hexoinit 1hexo init 此目录会自动生成hexo相关文件 注：此处目录中会存在一个_config.yml的文件，为hexo的主配置文件，以后我们称其为站点配置文件。 本地预览 hexo目录中执行123hexo clean #清除缓存hexo g #生成静态页面hexo s #启动本地预览服务 执行命令后，hexo会在public文件夹生成相关html文件，用于本地预览与后期提交github 浏览器访问[http://127.0.0.1:4000或localhost:4000，即可看到hexo默认生成页面hello,world] 0x05 写博客进入hexo根目录 1hexo new &apos;my-first-blog&apos; ‘ ‘中为你本篇博客的名称，执行完成后，会自动在\hexo\source_posts\目录下生成.md文件， 只要打开这个文件就可以写博客了。（.md的文件必须用支持markdown的编辑器） 0x06 上传到github上传前的配置配置站点配置文件_config.yml中的deploy部分： 1234deploy: type: git repository: git@github.com:yourname/yourname.github.io.git branch: master 安装上传插件1npm install hexo-deployer-git --save 上传文件在hexo根目录下 1hexo d 会将有所改动的内容全部提交至github 常用hexo命令123456789101112131415161718hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本hexo clean #清除缓存缩写：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy组合命令：hexo s -g #生成并本地预览hexo d -g #生成并上传 0x07 更改默认hexo主题及优化主题下载进入hexo根目录 执行 1git clone https://github.com/iissnan/hexo-theme-next themes/next 执行完成后会在hexo\themes\ 目录下生成next目录 next目录下也会存在一个_config.yml文件，这是next主题的主配置文件，以后我们称为主题配置文件 你也可以自己更换自己喜欢的主题https://hexo.io/themes/ ，官网有很多主题， 主题应用配置站点配置文件 寻找theme字段，将其值修改为next（next前都有一个空格，否则会报错） 主题预览执行 123hexo clean #清除缓存hexo g #重新生成代码hexo s #部署到本地 浏览器访问 http://127.0.0.1:4000 查看效果 0x08 主题简单优化设置布局主题配置文件中 寻找 Scheme 字段，next提供三种默认主题布局，将你想使用的布局取消注释即可 123#scheme: Muse#scheme: Mistscheme: Pisces Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 设置显示语言站点配置文件中 寻找language 字段，设置其值为 1language: zh-Hans 语言文件位于hexo\themes\next\languages目录下 设置菜单主题配置文件中 寻找menu字段 123456789menu: home: / || home #主页 categories: /categories/ || th #分类页 tags: /tags/ || tags #标签页 about: /about/ || user #关于页 #archives: /archives/ || archive #归档页 #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat #公益404 除主页与归档页外，其余页面需要手动创建 每行中 || 后的内容为指定此menu的图标 添加标签页新建页面 进入hexo根目录 1hexo new page tags 命令执行后，hexo\source\tags目录中生成index.md文件 设置页面类型 修改此index.md文件为(添加type行) 123title: tagsdate: 2016-11-15 19:10:05type: &quot;tags&quot; 设置具体博客文章tags 对于hexo\source_post目录下具体博客文章设置tags(设置tags行) 123title: 基于Hexo和Github搭建博客date: 2016-11-09tags: [npm, hexo, github] 添加分类页面新建页面 进入hexo根目录 1hexo new page categories 命令执行后，hexo\source\categories目录中生成index.md文件 设置页面类型 修改此index.md文件为(添加categories行) 123title: categoriesdate: 2016-11-15 19:11:13type: &quot;categories&quot; *设置具体博客文章categories 对于hexo\source_post目录下具体博客文章设置categories(设置categories行) 1234title: 基于Hexo和Github搭建博客date: 2016-11-09tags: [npm, hexo, github]categories: 搭建博客 添加关于页面添加页面 进入hexo根目录 1hexo new page about 命令执行后，hexo\source\about目录中生成index.md文件 修改index.md文件 123456789title: aboutdate: 2016-11-15 19:08:50## 关于我一只学习的小菜鸟，欢迎分享知识。QQ：Email: 设置站内搜索进入hexo根目录 1npm install hexo-generator-searchdb --save 站点配置文件中添加 12345search: path: search.xml field: post format: html limit: 10000 0x09 其他设置hexo 首页文章只显示一部分在博客文章适当位置添加&lt;!--more--&gt; 标记即可 网站底部字数统计进入hexo根目录 1npm install hexo-wordcount --save hexo\themes\next\/layout_partials\footer.swig文件中末尾添加 1234&lt;div class=&quot;theme-info&quot;&gt; &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt; &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt; 修改文章底部的带#号的标签修改hexo\themes\next\layout_macro\post.swig文件，搜索rel=&quot;tag&quot;&gt;# ，改为&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 在每篇文章末尾统一添加“本文结束”标记在hexo\themes\next\layout_macro目录下，新建passage-end-tag.swig ，并添加如下内容 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开hexo\themes\next\layout_macro\post.swig文件，在post-body 之后添加 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 打开主题配置文件，在末尾添加 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 0x010 访问线上博客执行hexo cleanhexo ghexo d浏览器访问https://yourname.github.io （yourname是你的github用户名） 设置域名解析ping一下你的博客域名，获取其IP地址 在阿里云或腾讯云设置域名解析 在Hexo目录下的source中建一个CNAME命名的文件夹(切记没有后缀) 右键新建txt文本-&gt;输入你购买的域名www.ainusers.top-&gt;保存关闭 然后快捷键F2或者右键该文本重命名-&gt;将.txt后缀去掉-&gt;会提示文件不可用继续确定即可 上传进入hexo目录 hexo cleanhexo ghexo d即可使用自定义域名访问博客，并且原博客域名也不会失效 Hexo Admin后台管理博客工具使用hexo+github确实非常方便管理自己的知识，但是缺点在于每次在本地使用markdown工具写完笔记，都要进行生成静态页面，然后本地预览或者上传github操作，操作非常繁琐。所以在这里配置使用Hexo Admin工具对博客进行管理，简化操作。 Hexo Admin介绍官方网站：https://jaredforsyth.com/hexo-admin/属于hexo插件系列，使用B/S架构对博客进行后台管理 安装进入/hexo目录git bash下1npm install --save hexo-admin 访问hexo后台管理界面git bash下1hexo server -d 访问http://localhost:4000/即可访问本地博客 访问http://localhost:4000/admin即可进入Hexo Admin后台管理界面 配置Hexo AdminSettings选项下 点击Setup authentification here 配置你的Hexo Admin登陆账户及密码，以及加密cookies的字符串 下方会生成配置文件字段，将此复制到站点目录下_config.yml中 重启hexo server -d，再次访问http://localhost:4000/admin则需输入账号密码登陆。 参考连接https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.htmlhttp://theme-next.iissnan.com/getting-started.htmlhttp://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.htmlhttps://www.cnblogs.com/syd192/p/6074323.html https://blog.csdn.net/ainuser/article/details/77609180]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP代码审计 基础知识]]></title>
    <url>%2F2018%2F08%2F08%2FPHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[本文记录 PHP 代码审计的学习过程 PHP 代码审计博客目录 1. 环境准备1.1 测试运行环境安装 wamp 1.2 PHP 编写工具 EditPlu Notepad++ Zendstudio 10 百度云下载链接 1.3 代码审计工具Seay源代码审计系统 百度云下载链接 1.4 代码审计平台 DVWA GitHub 链接 ZVulDrill GitHub 链接 2. 注释 单行注释 =&gt; //单行注释 多行注释 =&gt; /*多行注释*/ 3. 单引号和双引号 单引号不解析变量 双引号解析变量 aaa=’123’ echo &apos;$aaa&apos; =&gt; 结果为 $aaa echo &quot;$aaa&quot; =&gt; 结果为 123 4. 输出函数 echo 或者 print：最简单的输出方法 print_r、var_dump(var_export)、debug_zval_dump：输出变量数据值，特别是数组和对象数据 var_dump 会额外输出数据类型 print_r：输出格式很整齐，跟var_dump 的区别是没有类型数据，并且布尔值的 false 和 NULL 输出为空 var_export：所有的数据是可以作为组织好的变量输出的，都是能够作为直接赋值使用；需要注意的一点是, var_export 对于资源型的变量会输出NULL debug_zval_dump：输出结果跟 var_dump 类似，唯一增加的一个值是 refcount，就是记录一个变量被引用了多少次，这是 php 的copy on write (写时复制) 的机制的一个重要特点。 5. 超全局变量1超全局变量——超全局变量是在全部作用域中始终可用的内置变量 1. 简介 在php 中可由用户操作的全局变量列表如下: $GLOBALS — 引用全局作用域中可用的全部变量 $_SERVER — 服务器和执行环境信息 $_GET — HTTP GET 变量 $_POST — HTTP POST 变量 $_FILES — HTTP 文件上传变量 $_REQUEST — HTTP Request 变量 $_SESSION — Session 变量 $_ENV — 环境变量 $_COOKIE — HTTP Cookies 已经被弃用的超全局变量 $_HTTP_COOKIE_VARS $_HTTP_ENV_VARS $_HTTP_GET_VARS $_HTTP_POST_FILES $_HTTP_POST_VARS $_HTTP_SERVER_VARS 2. 超全局变量示例 $GLOBALS 例一：1234567891011121314151617&lt;?php$moon=&quot;1&quot;;echo $GLOBALS[&apos;moon&apos;];?&gt;# 显示结果为1# 例二&lt;?phpfunction test()&#123; echo $moon=&quot;2&quot;; echo $GLOBALS[&apos;moon&apos;];&#125;$moon=&quot;1&quot;;test();?&gt;# 显示结果为 21 # 函数内部为局部变量，不被 $GLOBALS 所识别 $_SERVER test1.php &lt;?php print_r($_SERVER); ?&gt; 12345test2.php &lt;?php $_SERVER=&apos;aaaaaa&apos;; print_r($_SERVER); ?&gt; 输出结果为服务器的配置信息 输出结果可以被覆盖 $_GET test.php &lt;?php print_r($_GET); ?&gt; 输出结果为 URL 中的 GET 变量的数据 $_POST test.php &lt;?php print_r($_POST); ?&gt; 输出结果为 URL 中的 POET 变量的数据 $_FILES file.html&lt;lable for=&quot;file&quot;&gt;Filename:&lt;/lable&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt; &lt;br /&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; test.php&lt;?phpprint_r($_FILES);?&gt; 输出结果为提交的文件的信息 $_REQUEST 1234567891011121314 test1.php &lt;?php print_r($_REQUEST); ?&gt; test2.php &lt;?php $_REQUEST=&apos;aaaaaa&apos;; print_r($_REQUEST); ?&gt;输出结果可以被覆盖![](https://i.imgur.com/W6GgqVz.png) $_SESSION test1.php &lt;?php print_r($_SESSION); ?&gt; 12345test2.php &lt;?php $_SESSION=&apos;aaaaaa&apos;; print_r($_SESSION); ?&gt; 输出结果可以被覆盖 $_ENV test1.php &lt;?php print_r($_ENV); ?&gt; 12345678910test2.php &lt;?php $_ENV=&apos;aaaaaa&apos;; print_r($_ENV); ?&gt;test3.php &lt;?php print_r($_ENV[&apos;OS&apos;]=&apos;bbbbbb&apos;); ?&gt; 输出结果可以被覆盖 $_COOKIE test.php &lt;?php print_r($_COOKIE); ?&gt; 输出结果为 cookie 值]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>php</tag>
      </tags>
  </entry>
</search>
